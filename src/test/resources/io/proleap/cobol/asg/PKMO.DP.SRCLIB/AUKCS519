000100******************************************************************00010000
000200 IDENTIFICATION DIVISION.                                         00020000
000300******************************************************************00030000
000400                                                                  00040000
000500 PROGRAM-ID.   AUKCS519.                                          00050001
000600 AUTHOR.       JILL ZIMBAL.                                       00060001
000700 INSTALLATION. KOHLS DEPARTMENT STORES.                           00070000
000800 DATE-WRITTEN.              05-12-2012.                           00080001
000900 DATE-COMPILED.                                                   00090000
001000                                                                  00100000
001100******************************************************************00110000
001200*          CICS PROGRAM - AUKCS519 - A519                        *00120002
001300*                                                                *00130000
001400*        INCOMM TO MAINFRAME TCP/IP LISTENER                     *00140001
001500*                                                                *00150000
001600* THIS TRANSACTION WILL ESTABLISH TCP/IP CONNECTIONS FROM THE    *00160000
001600* INCOMM SERVICE BUREAU TO OUR CORPORATE DATA CENTER             *00170002
001600* FOR AUTHORIZING KOHLS GIFT CARD SALES.                         *00180000
001600* THE PROGRAM WILL ACCEPT CONNECTIONS, RECEIVE AND ROUTE THE     *00190000
001600* REQUEST MESSAGES TO A CICS AUTHORIZATION PROGRAM,              *00200000
001600* AND SEND RESPONSES BACK TO THE INCOMM VPN    CONNECTION THAT   *00210002
001600* THE REQUEST WAS MADE ON.                                       *00220000
001900*                                                                *00230000
002000* - THIS PROGRAM WAS WRITTEN USING AUKCS505 AS A GUIDE           *00240002
002100*                                                                *00250000
002110* NOTE: This program must be compiled with "CICS SOCKETS PGM"    *00260000
002120*       option set to "Y".                                       *00270000
002200*--------------------------------------------------------------- *00280000
002300* DISPLAY MESSAGES CAN BE TURNED ON BY STARTING PROGRAM A520.    *00290022
002400* SEE PROGRAM DOC FOR AUKCS520 FOR MORE INFO.                    *00300022
002500*                                                                *00310000
002600* DISP-MSGS VARIABLE - IF 9999 = DISPLAY ALL MSGS                *00320000
002700*                      IF 0 =    DISPLAY ERROR MSGS ONLY "!"     *00330000
002800*                      IF < 9999 = DISPLAY NEXT # OF MESSAGES    *00340000
002900*--------------------------------------------------------------- *00350000
003000* THIS PROGRAM IS SETUP TO HANDLE A MAXIMUM OF 100  SOCKETS.     *00360000
003100* BECAUSE THE WAY TCP/IP HANDLES SOCKETS, SOME COULD BE 'DEAD'   *00370000
003200* AND THAT IS WHY THIS PROGRAM CAN HANDLE MORE THAN NECESSARY.   *00380000
003300* ANY DEAD SOCKETS THAT HAVE NOT HAD ANY TRAFFIC IN THE LAST     *00390000
003400* 6 MINUTES WILL BE CLOSED.  INCOMM SENDS A NETWORK 800 'ECHO'   *00400001
003500* MESSAGE EVERY 4 MINUTES, IF NO MESSAGES COME THROUGH IN 6      *00410000
003500* MINUTES, THE SOCKET WILL BE CLOSED AND A NETCOOL ALERT WILL    *00420000
003600* BE GENERATED.  THE 'CLOSE' ROUTINE IS CALLED EVERY 7 MINS.     *00430000
003700* THE TIMEOUT CAN BE CHANGED IN 1 MINUTE INTERVALS.              *00440000
003800*                                                                *00450000
003900* THE FOLLOWING VARIABLES NEED TO BE CHANGED IF YOU CHANGE THE   *00460000
004000* NUMBER OF SOCKETS THAT THIS SOCKET SERVER SUPPORTS.  THESE     *00470000
004100* VARIABLES ARE:                                                 *00480000
004200*                                                                *00490000
004300*  NOTE: 2000 SOCKETS IS THE MAXIMUM THAT CAN BE HANDLED BY      *00500000
004400*        ANY 1 MAINFRAME LISTENER. IF YOU NEED MORE THAN THAT,   *00510000
004500*        THEN RUN 2 LISTENERS.                                   *00520000
004600*                                                   CURRENT      *00530000
004700*                                                                *00540000
004800*    SOCKETS                                          100        *00550000
004900*    CHAR-STRING                                      100        *00560000
005000*    CHAR-STRING1                                     100        *00570000
005100*    CHAR-ENTRY-TABLE                                 100        *00580000
005200*    SELECT-NUMFDS                                    100        *00590000
005300*    BIT-MASK-LENGTH                                  100        *00600000
005400*                                                                *00610000
005500*                      (ROUND DOWN ON DIVIDES)       CURRENT     *00620000
005600*    BIT-ARRAY         - ((sockets/32)+1))*4           16        *00630000
005700*    SELECT-RD-MASK    - ((sockets/32)+1))*4           16        *00640000
005800*    SELECT-WR-MASK    - ((sockets/32)+1))*4           16        *00650000
005900*    SELECT-EX-MASK    - ((sockets/32)+1))*4           16        *00660000
006000*    SELECT-RR-MASK    - ((sockets/32)+1))*4           16        *00670000
006100*    SELECT-RW-MASK    - ((sockets/32)+1))*4           16        *00680000
006200*    SELECT-RE-MASK    - ((sockets/32)+1))*4           16        *00690000
006300*                                                                *00700000
006400* ALSO SEE NOTE IN THE LINKAGE SECTION FOR INCREASING THE SIZE   *00710000
006500* OF THE SOCKET TABLE.  Statement is below:                      *00720000
006600*                                                                *00730000
006700*    05 TCPSOCKETN-TABLE-ELEMENT OCCURS 100  TIMES.              *00740000
006800*                                                                *00750000
006900* WHEN PARSING MESSAGES, THE MAXIMUM MESSAGE LENGTH IS 500.      *00760000
007000* IF YOU WILL BE USING MESSAGES LARGER THAN 500 BYTES, CHANGE    *00770000
007100* THE CONSTANT "PC-MAX-MSG-LEN" TO YOUR NEW MESSAGE LENGTH.      *00780000
007200* USED IN 7900-READ-HEADER-LENGTH.                               *00790000
007210*                                                                *00800000
007220* For a complete guide to TCP/IP Socket programming for CICS, see*00810000
007221* the following IBM BOOK (available on IBM Bookmanager CD):      *00820000
007230* OS/390 SecureWay Communications Server                         *00830000
007232* IP CICS Sockets Guide Version 2 Release 8                      *00840000
007240* Document Number SC31-8518-01  File Number S390-50              *00850000
007300******************************************************************00860000
007400******************************************************************00870000
007500                                                                  00880000
007600******************************************************************00890000
007700 ENVIRONMENT DIVISION.                                            00900000
007800******************************************************************00910000
007900                                                                  00920000
008000******************************************************************00930000
008100 DATA DIVISION.                                                   00940000
008200******************************************************************00950000
008300                                                                  00960000
008400 WORKING-STORAGE SECTION.                                         00970000
008500 01  PV-PROGRAM-VARIABLES.                                        00980000
008600     05  STARTUP-AGAIN         PIC X    VALUE 'N'.                00990000
008700     05  DEAD-TIMEOUT          PIC 9(16) COMP VALUE 5.            01000000
008800     05  PORTADDR              PIC 9(4) VALUE 0.                  01010000
008900     05  PV-HOLD-PORT          PIC 9(4) VALUE 0.                  01020000
009000     05  RECORD-TO-READ        PIC 9(4) COMP VALUE 2.             01030000
009100     05  GWPTR                 PIC S9(8) COMP.                    01040000
009200     05  TSTAMP                PIC 9(16) COMP.                    01050000
009300     05  TSTAMP-SWQ            PIC 9(16) COMP VALUE 0.            01060000
009400     05  TSTAMP-DEAD           PIC 9(16) COMP VALUE 0.            01070000
009500     05  DSTAMP                PIC 9(16) COMP.                    01080000
009600     05  SSTAMP                PIC 9(16) COMP.                    01090000
009700     05  PV-RESPONSE           PIC 9(9) BINARY.                   01100000
009800     05  PV-RC                 PIC 9(4) BINARY VALUE 0.           01110000
009900     05  WSCT                  PIC S9(8) BINARY VALUE 0.          01120000
010000     05  TSOCKET               PIC S9(8) BINARY.                  01130000
010100     05  SAV-MSG-LEN           PIC S9(4) COMP.                    01140000
010200     05  SOCKNO                PIC S9(8) BINARY.                  01150000
010300     05  SAV-SOCKNO            PIC S9(8) BINARY.                  01160000
010400     05  SOCKET-DESCRIPTOR     PIC 9(4) BINARY VALUE 0.           01170000
010500     05  SOCKID                PIC 9(4) BINARY.                   01180000
010600     05  ERRNO                 PIC 9(8) BINARY.                   01190000
010700     05  RETCODE               PIC S9(8) BINARY.                  01200000
010800     05  PV-REC-PACKET-LEN     PIC S9(8) BINARY.                  01210000
010900     05  RTSQ-LEN              PIC S9(4) BINARY VALUE 0.          01220000
011000     05  PV-CONVERT-LEN        PIC 9(8) BINARY VALUE 0.           01230000
011000     05  PV-CONVERT-LEN4       PIC 9(8) BINARY VALUE 4.           01240020
011000     05  PV-CONVERT-LEN-REQ    PIC 9(8) BINARY VALUE 4.           01250020
011100     05  RECV-FLAG             PIC 9(8) BINARY VALUE 0.           01260000
011200     05  CLENG                 PIC 9(4) BINARY.                   01270000
011300     05  OCTET                 PIC 9(3).                          01280000
011400     05  DSPLY8                PIC X(8).                          01290000
011500     05  CICS-DAT-LEN          PIC 9(4) BINARY VALUE 0.           01300000
011600     05  DCOUNT                PIC 9(8) BINARY.                   01310000
011700     05  MATCHING-NUMB         PIC 9(8) BINARY VALUE 1.           01320000
011800     05  TCPIP-CICS-QUEUE      PIC X(1)    VALUE SPACE.           01330000
011900     05  TSQ-WRITE-COUNT       PIC 9(8).                          01340000
012000     05  TSQ-TOTAL-RECORDS     PIC 9(8).                          01350000
012100     05  TSQ-READ-COUNT        PIC 9(8).                          01360000
012200     05  CIP-1                 PIC S9(8) BINARY.                  01370000
012300     05  CIP-2                 PIC S9(8) BINARY.                  01380000
012400     05  CIP-3                 PIC S9(8) BINARY.                  01390000
012500     05  CIP-4                 PIC S9(8) BINARY.                  01400000
012600     05  WS-RECEIVE            PIC X(30).                         01410000
012700     05  HEADER-ERROR          PIC X     VALUE 'N'.               01420000
012800     05  MSG-PARSER            PIC X(9000) VALUE SPACES.          01430000
012900     05  PV-CONVRT-MSGLEN-HEX  PIC X(2).                          01440000
013000     05  PV-CONVRT-MSGLEN-COMP REDEFINES PV-CONVRT-MSGLEN-HEX     01450000
013100                               PIC 9(4) COMP.                     01460000
013200     05  PV-CONVRT-MSGLEN-INT  PIC 9(4).                          01470033
013300     05  SW-END-OF-PACKET      PIC X     VALUE 'N'.               01480000
013400     05  PRSR-CT               PIC 9(4)  VALUE ZERO.              01490000
013500     05  PRSR-CT-1             PIC 9(4)  VALUE ZERO.              01500000
013600     05  PV-PRTL-MSG-LEN       PIC S9(4) COMP.                    01510033
013700     05  PV-TO-PARSE-LEN       PIC 9(4)  VALUE ZERO.              01520033
013800     05  PV-MSG-LEN-WOHDR      PIC 9(5) VALUE ZERO.               01530012
013900     05  PV-MSG-LEN-WHDR       PIC 9(5) VALUE ZERO.               01540012
014000     05  WS-NEWLEN             PIC 9(5)  VALUE ZERO.              01550000
014100                                                                  01560000
014200 01  PC-PROGRAM-CONSTANTS.                                        01570000
014300     05  IP-LISTENER-TRAN      PIC X(4) VALUE 'A519'.             01580004
014400     05  SOCKETS               PIC 9(8) COMP VALUE 100.           01590000
014500     05  MAX-SOCKETS-LESS1     PIC 9(8) COMP VALUE 99.            01600000
014600     05  FULL-TIMEOUT-T1440    PIC 9(16) COMP VALUE 1440.         01610000
014600     05  FULL-TIMEOUT-T720     PIC 9(16) COMP VALUE 720.          01620000
014700     05  FULL-TIMEOUT-T30      PIC 9(16) COMP VALUE 30.           01630000
           05  FULL-TIMEOUT-T7       PIC 9(16) COMP VALUE 6.            01640000
           05  FULL-TIMEOUT-T6       PIC 9(16) COMP VALUE 5.            01650000
014800     05  FULL-TIMEOUT-T2       PIC 9(16) COMP VALUE 2.            01660000
014900     05  BITMASK-TOKEN         PIC X(16) VALUE 'TCPIPBITMASKCOBL'.01670000
015000     05  TOEBCDIC-TOKEN        PIC X(16) VALUE 'TCPIPTOEBCDICXLT'.01680000
015100     05  TOASCII-TOKEN         PIC X(16) VALUE 'TCPIPTOASCIIXLAT'.01690000
015200     05  USED-COUNTER          PIC S9(8) BINARY VALUE 100.        01700000
015300     05  INIT-LOW              PIC X VALUE LOW-VALUES.            01710000
015400     05  TCP-BUF-SIZE          PIC 9(8) BINARY VALUE 9999.        01720033
015500     05  PC-MAX-MSG-LEN        PIC 9(5) VALUE 9984.               01730033
015600     05  PC-MIN-MSG-LEN        PIC 9(5) VALUE 2.                  01740000
015700                                                                  01750000
015800 01  DS-DISPLAY-MESSAGES.                                         01760000
015900     05  DISP-MSGS             PIC S9(8) COMP VALUE 0025.         01770000
016000                                                                  01780000
016100* THESE VARIABLES ARE IN COMMENTED-OUT CODE.                      01790000
016200 01  MISC-VARIABLES.                                              01800000
016300     05  RECV-COUNT            PIC 9(8) BINARY VALUE 0.           01810000
016400     05  SEND-COUNT            PIC 9(8) BINARY VALUE 0.           01820000
016500     05  STARTT                PIC 9(16) COMP.                    01830000
016600     05  DISP-MAX              PIC 9(4).                          01840000
016700                                                                  01850000
      * TEMP STORAGE DATA QUEUE NAME *                                  01860000
016800 01  TCPIPPRQ.                                                    01870000
016900     05 FILLER                  PIC X(7)    VALUE 'AUINCPR'.      01880007
017000     05 TCPIPPRQ-ONE            PIC X(1)    VALUE SPACE.          01890000
017100                                                                  01900000
      * TEMP STORAGE SWITCH QUEUE NAME *                                01910000
017200 01  TCPIPSWQ.                                                    01920000
017300     05 FILLER                  PIC X(7)    VALUE 'AUINCSW'.      01930007
017400     05 TCPIPSWQ-ONE            PIC X(1)    VALUE SPACE.          01940000
017500                                                                  01950000
017600 01  PV-SYSTEM-ID.                                                01960000
017700     05  PV-CICS-REGION         PIC  X(06)  VALUE SPACE.          01970000
017800     05  FILLER                 PIC  X(02)  VALUE SPACE.          01980000
017900                                                                  01990000
018000 01  TTIME-1.                                                     02000000
018100     05 TTIME                   PIC 9(8).                         02010000
018200 01  TTIME-2 REDEFINES TTIME-1.                                   02020000
018300     05 HH                      PIC 9(2).                         02030000
018400     05 FILLER                  PIC X.                            02040000
018500     05 MM                      PIC 9(2).                         02050000
018600     05 FILLER                  PIC X.                            02060000
018700     05 SS                      PIC 9(2).                         02070000
018800                                                                  02080000
018900 01  FCNTL-PARMS.                                                 02090000
019000     02  FCNTL-COMMAND      PIC 9(8) COMP.                        02100000
019100     02  FCNTL-ARG          PIC 9(8) COMP.                        02110000
019200     02  FCNTL-ERR          PIC 9(8) COMP.                        02120000
019300     02  FCNTL-RET          PIC 9(8) COMP.                        02130000
019400                                                                  02140000
019500 01  TCPIP-API-PARMS.                                             02150000
019600     02  INTAIDNT               PIC X(8) VALUE 'IUCVAPI '.        02160000
019700     02  INTAMAXS               PIC 9(4) COMP VALUE 251.          02170000
019800     02  INTASUBT.                                                02180000
019900         05 SUBTASKNO           PIC X(7) VALUE LOW-VALUES.        02190000
020000         05 SUBT-CHAR           PIC X VALUE 'S'.                  02200000
020100     02  MAX-SOCK-NUM           PIC 9(8) COMP VALUE 0.            02210000
020200                                                                  02220000
020300     02  SELRETC                PIC S9(8) COMP.                   02230000
020400     02  EZRETC                 PIC S9(8) COMP.                   02240000
020500     02  EZERRNO                PIC S9(8) COMP.                   02250000
020600                                                                  02260000
020700     02  SOCKAFIN               PIC 9(8) COMP VALUE 2.            02270000
020800     02  SOCKTYPE               PIC 9(8) COMP VALUE 1.            02280000
020900     02  SOCKPCOL               PIC 9(8) COMP VALUE 0.            02290000
021000                                                                  02300000
021100     02  SSOLEN                 PIC 9(8) COMP VALUE 4.            02310000
021200     02  SSOOPTNM               PIC 9(8) COMP VALUE 4.            02320000
021300     02  SSOOPVAL               PIC X(4) VALUE '1   '.            02330000
021400     02  SSOREUSE               PIC 9(8) COMP VALUE 4.            02340000
021500                                                                  02350000
021600     02  BINDNAME.                                                02360000
021700         05  BINDAFIN           PIC 9(4) COMP.                    02370000
021800         05  BINDPORT           PIC 9(4) COMP.                    02380000
021900         05  BINDIPAD           PIC 9(8) COMP.                    02390000
022000         05  BINDZERO           PIC 9(16) COMP.                   02400000
022100                                                                  02410000
022200     02  LISTBCKL               PIC 9(8) COMP VALUE 40.           02420000
022300***   CHANGE TO MATCH (OR LESS THAN) SOMAXCONN IN ********        02430000
022400***   IN TCPIP.PROFILE                            ********        02440000
022500                                                                  02450000
022600     02  ACCEPT-NAME.                                             02460000
022700         03  ACCEPT-AF-INET     PIC 9(4) COMP.                    02470000
022800         03  ACCEPT-PORT        PIC 9(4) COMP.                    02480000
022900         03  ACCEPT-IP-ADDR     PIC 9(8) COMP.                    02490000
023000         03  FILLER             PIC X(8).                         02500000
023100                                                                  02510000
023200 01  SELECT-PARMS.                                                02520000
023300     02  SELECT-NUMFDS          PIC 9(8) COMP VALUE 100.          02530000
023400     02  SELECT-TIMEOUT.                                          02540000
023500         03  SELECT-SECS        PIC 9(8) COMP VALUE 2.            02550000
023600         03  SELECT-MILLSECS    PIC 9(8) COMP VALUE 0.            02560000
023700     02  SELECT-RD-MASK         PIC X(16).                        02570000
023800     02  SELECT-WR-MASK         PIC X(16).                        02580000
023900     02  SELECT-EX-MASK         PIC X(16).                        02590000
024000     02  SELECT-RR-MASK         PIC X(16).                        02600000
024100     02  SELECT-RW-MASK         PIC X(16).                        02610000
024200     02  SELECT-RE-MASK         PIC X(16).                        02620000
024300                                                                  02630000
024400 01  CHAR-MASK1.                                                  02640000
024500     02 CHAR-STRING1            PIC X(100).                       02650000
024600                                                                  02660000
024700 01  CHAR-MASK.                                                   02670000
024800     02 CHAR-STRING             PIC X(100).                       02680000
024900                                                                  02690000
025000 01  CHAR-ARRAY REDEFINES CHAR-MASK.                              02700000
025100     02  CHAR-ENTRY-TABLE OCCURS 100 TIMES.                       02710000
025200       03  CHAR-ENTRY           PIC X.                            02720000
025300                                                                  02730000
025400 01  BIT-MASK.                                                    02740000
025500     02  BIT-ARRAY              PIC X(16).                        02750000
025600                                                                  02760000
025700 01  BIT-FUNCTION-CODES.                                          02770000
025800     02  CTOB                   PIC X(4) VALUE 'CTOB'.            02780000
025900     02  BTOC                   PIC X(4) VALUE 'BTOC'.            02790000
026000                                                                  02800000
026100 01  BIT-MASK-LENGTH            PIC 9(8) COMP VALUE 100.          02810000
026200                                                                  02820000
026300 01  COMMAND.                                                     02830000
026400     05 ACCEPT-CMD              PIC X(16) VALUE 'ACCEPT'.         02840000
026500     05 BIND-CMD                PIC X(16) VALUE 'BIND'.           02850000
026600     05 CLOSE-CMD               PIC X(16) VALUE 'CLOSE'.          02860000
026700     05 FCNTL-CMD               PIC X(16) VALUE 'FCNTL'.          02870000
026800     05 INITAPI-CMD             PIC X(16) VALUE 'INITAPI'.        02880000
026900     05 LISTEN-CMD              PIC X(16) VALUE 'LISTEN'.         02890000
027000     05 RECVFROM-CMD            PIC X(16) VALUE 'RECVFROM'.       02900000
027100     05 SELECT-CMD              PIC X(16) VALUE 'SELECT'.         02910000
027200     05 SETSOCK-CMD             PIC X(16) VALUE 'SETSOCKOPT'.     02920000
027300     05 SOCKET-CMD              PIC X(16) VALUE 'SOCKET'.         02930000
027400     05 TAKESOCKET-CMD          PIC X(16) VALUE 'TAKESOCKET'.     02940000
027500     05 WRITE-CMD               PIC X(16) VALUE 'WRITE'.          02950000
027600                                                                  02960000
027700                                                                  02970000
027800*---------------------------------------------------------        02980000
027900* AUTHORIZATION MESSAGE VERIFY VALID MESSAGE FIELDS               02990000
028000* THIS VARIABLE WILL HOLD THE AUTHORIZATION MESSAGE.              03000000
028100* WILL BE USED TO VERIFY THE FIRST FIELD AS HAVING VALID          03010000
028200* DATA BEFORE SENDING TO THE AUTH PROGRAM.                        03020000
028500*---------------------------------------------------------        03030000
028600 01  UT-VERIFY-AUTH-MESSAGE.                                      03040000
           05  UT-VERIFY-HEADER.                                        03050000
028700       10  UT-VERIFY-HEADER-START  PIC 9(4)       VALUE ZEROES.   03060010
                 88 UT-VERIFY-GOOD-HEADER  VALUE 0100, 0200, 0400, 0800.03070007
028900     05  FILLER                    PIC X(9980)    VALUE SPACES.   03080033
029100                                                                  03090000
029700                                                                  03100000
029800***************  INPUT & OUTPUT BUFFER AREAS ********             03110000
029900                                                                  03120000
030000* TCP-BUF IS MESSAGE READ FROM SOCKET OR TSQ *                    03130000
030100 01  TCP-BUF-OUT.                                                 03140000
    00     05 TCP-BUF-LEN             PIC 9(4).                         03150034
030300     05 TCP-BUF-MATCHING        PIC 9(8).                         03160000
030400     05 TCP-BUF.                                                  03170000
030500        10 TCP-MSG-LEN          PIC X(2).                         03180011
030500        10 TCP-MESSAGE          PIC X(9984).                      03190033
030700                                                                  03200000
030800* MESSAGE TO BE SENT BACK TO STORE *                              03210000
030900 01  TCP-BUF-OUT-R  REDEFINES TCP-BUF-OUT.                        03220000
031000     05 FILLER                  PIC X(12).                        03230033
031100     05 TCP-BUF-REC.                                              03240000
031200       10 TCP-BUF-HEX-LEN       PIC X(2).                         03250011
031300       10 TCP-BUF-R             PIC X(9984).                      03260033
031400                                                                  03270000
031500 01  SPARE-SPACE-FOR-OVERLAY.                                     03280000
031600     05  FILLER                 PIC X(50).                        03290000
031700                                                                  03300000
031800* MESSAGE SENT TO CHILD PROGRAM *                                 03310000
031900 01  CICS-BUF-OUT.                                                03320000
032000     05 CICS-BUF-LEN            PIC 9(4).                         03330033
032100     05 CICS-BUF-MATCHING       PIC 9(8).                         03340000
032200     05 CICS-BUF-LISTENER-Q     PIC X(1).                         03350000
032300     05 CICS-BUF.                                                 03360000
032400        10 FILLER               PIC X(9986).                      03370033
032500                                                                  03380000
032600 01  CICS-TRANID.                                                 03390000
032700     05 CICS-TRANID-SV          PIC X(4)                          03400000
032800                                VALUE 'A521'.                     03410021
032900                                                                  03420000
033000* INDEX TO KEEP TRACK OF MESSAGE TO READ FROM TSQ *               03430000
033100 01  TSQ-INDEX.                                                   03440000
033200     02 TSQ-COUNT-1             PIC 9(8).                         03450000
033300     02 TSQ-COUNT-2             PIC 9(8).                         03460000
033400     02 FILLER                  PIC X(9998).                      03470033
033500                                                                  03480000
033600**********************************************************        03490000
033700* FORMATTED TRACE MESSAGES TO BE DISPLAYED IN CSSL       *        03500000
033800**********************************************************        03510000
033900 01  DISP-OPEN-MSG.                                               03520000
034000     05 FILLER              PIC X(07) VALUE ' OPEN ='.            03530000
034100     05 DISP-OPEN-SOKT      PIC 9(4).                             03540000
034200     05 FILLER              PIC X VALUE '-'.                      03550000
034300     05 DISP-OPEN-CIP-1     PIC 9(3).                             03560000
034400     05 FILLER              PIC X VALUE '.'.                      03570000
034500     05 DISP-OPEN-CIP-2     PIC 9(3).                             03580000
034600     05 FILLER              PIC X VALUE '.'.                      03590000
034700     05 DISP-OPEN-CIP-3     PIC 9(3).                             03600000
034800     05 FILLER              PIC X VALUE '.'.                      03610000
034900     05 DISP-OPEN-CIP-4     PIC 9(3).                             03620000
035000     05 FILLER              PIC X(05) VALUE ',NUM='.              03630000
035100     05 DISP-OPEN-NUMB      PIC 9(6).                             03640000
035200     05 FILLER              PIC X(5) VALUE ',ACT='.               03650000
035300     05 DISP-OPEN-CIP-ACT   PIC 9(4).                             03660000
035400     05 FILLER              PIC X VALUE '.'.                      03670000
035500                                                                  03680000
035600 01  DISP-TRAN-COUNT.                                             03690000
035700     05  FILLER             PIC X(7) VALUE ' CLOSE='.             03700000
035800     05  DISP-TRAN-STORE    PIC 9(4).                             03710000
035900     05  FILLER             PIC X VALUE '-'.                      03720000
036000     05  DIS-RT-1           PIC 9(3).                             03730000
036100     05  FILLER             PIC X VALUE '.'.                      03740000
036200     05  DIS-RT-2           PIC 9(3).                             03750000
036300     05  FILLER             PIC X VALUE '.'.                      03760000
036400     05  DIS-RT-3           PIC 9(3).                             03770000
036500     05  FILLER             PIC X VALUE '.'.                      03780000
036600     05  DIS-RT-4           PIC 9(3).                             03790000
036700     05  FILLER             PIC X(6) VALUE ',RCV#='.              03800000
036800     05  DISP-TRAN-NUMB     PIC 9(5).                             03810000
036900     05  FILLER             PIC X(6) VALUE ',SND#='.              03820000
037000     05  DISP-TRAN-NUMBS    PIC 9(5).                             03830000
037100                                                                  03840000
037200 01  DISP-DEAD-MATCH.                                             03850000
037300     05  FILLER             PIC X(17) VALUE ' MATCHING NUMBER'.   03860000
037400     05  DISP-DEAD-MATCH-NUMB      PIC X(8).                      03870000
037500     05  FILLER             PIC X(18) VALUE ' WITH DEAD SOCKET'.  03880000
037600     05  DISP-DEAD-MATCH-SOCK      PIC 9(4).                      03890000
037700                                                                  03900000
037800 01  INITAPI-COMPLETE.                                            03910000
037900     05  FILLER                 PIC X(32)                         03920000
038000         VALUE '!INITAPI COMPLETED - MAXSOCK# ='.                 03930000
038100     05  INIT-MAXSOCK           PIC 9(8).                         03940000
038200                                                                  03950000
038300 01  INITAPI-ERR.                                                 03960000
038400     05  FILLER                 PIC X(32)                         03970000
038500         VALUE '!INITIAL IUCV API FAIL- ERRNO ='.                 03980000
038600     05  INIT-ERRNO             PIC 9(8).                         03990000
038700                                                                  04000000
038800 01  SOCKAPI-ERR.                                                 04010000
038900     05  FILLER                 PIC X(32)                         04020000
039000         VALUE '!SOCKET IUCV API FAIL-  ERRNO ='.                 04030000
039100     05  SOCK-ERRNO             PIC 9(8).                         04040000
039200                                                                  04050000
039300 01  SETSAPI-ERR.                                                 04060000
039400     05  FILLER                 PIC X(32)                         04070000
039500         VALUE '!SET SOCK IUCV API FAIL-ERRNO ='.                 04080000
039600     05  SETS-ERRNO             PIC 9(8).                         04090000
039700                                                                  04100000
039800 01  BINDAPI-ERR.                                                 04110000
039900     05  FILLER                 PIC X(32)                         04120000
040000         VALUE '!BIND IUCV API FAIL-    ERRNO ='.                 04130000
040100     05  BIND-ERRNO             PIC 9(8).                         04140000
040200                                                                  04150000
040300 01  LISTAPI-ERR.                                                 04160000
040400     05  FILLER                 PIC X(32)                         04170000
040500         VALUE '!LISTEN IUCV API FAIL-  ERRNO ='.                 04180000
040600     05  LIST-ERRNO             PIC 9(8).                         04190000
040700                                                                  04200000
040800 01  OPENCNT-MSG.                                                 04210000
040900     05  FILLER                 PIC X(23)                         04220000
041000         VALUE '!HIGH USED SOCKET IX = '.                         04230000
041100     05  OPEN-COUNTER           PIC 9(8).                         04240000
041200                                                                  04250000
041300 01  DISP-ERR.                                                    04260000
041400     05  FILLER                 PIC X(11)                         04270000
041500         VALUE ' SELRETC = '.                                     04280000
041600     05  DISP-EZRETC            PIC 9(8).                         04290000
041700     05  FILLER                 PIC X(05)  VALUE SPACES.          04300000
041800     05  FILLER                 PIC X(10)                         04310000
041900         VALUE 'EZERRNO = '.                                      04320000
042000     05  DISP-ERRNO             PIC 9(8).                         04330000
042100 01  DISP-EXCEP-MSG.                                              04340000
042200     05  FILLER                 PIC X(20)                         04350000
042300         VALUE ' EXCEPTION - SOCKET'.                             04360000
042400     05  DISP-EXCEP-SOCK        PIC 9(4).                         04370000
042500     05  FILLER                 PIC X(08)                         04380000
042600         VALUE ' RETC = '.                                        04390000
042700     05  DISP-EXCEP-SELRETC     PIC 9(4).                         04400000
042800     05  FILLER                 PIC X(09)                         04410000
042900         VALUE ' ERRNO = '.                                       04420000
043000     05  DISP-EXCEP-ERRNO       PIC 9(4).                         04430000
043100                                                                  04440000
043200 01  SELEAPI-ERR.                                                 04450000
043300     05  FILLER                 PIC X(32)                         04460000
043400         VALUE '!SELECT IUCV API FAIL-  ERRNO ='.                 04470000
043500     05  SELE-ERRNO             PIC 9(8).                         04480000
043600                                                                  04490000
043700 01  ACCEAPI-ERR.                                                 04500000
043800     05  FILLER                 PIC X(32)                         04510000
043900         VALUE '!ACCEPT IUCV API FAIL-  ERRNO ='.                 04520000
044000     05  ACCE-ERRNO             PIC 9(8).                         04530000
044100                                                                  04540000
044200 01  ASSG-ERR-MSG.                                                04550000
044300     05  FILLER                 PIC X(32)                         04560000
044400         VALUE 'ASSIGNING SOCKET - IX =      '.                   04570000
044500     05  ASSG-COUNT             PIC 9(8).                         04580000
044600                                                                  04590000
044700 01  CLOS-ERR-MSG.                                                04600000
044800     05  FILLER                 PIC X(17)                         04610000
044900         VALUE 'CLOSING SOCKET='.                                 04620000
045000     05  CLOS-SOCKT             PIC 9(4).                         04630000
045100     05  FILLER                 PIC X(10)                         04640000
045200         VALUE 'ERRNO='.                                          04650000
045300     05  CLOS-SOCKT-ERR         PIC 9(6).                         04660000
045400                                                                  04670000
045500 01  FCNTAPI-ERR.                                                 04680000
045600     05  FILLER                 PIC X(32)                         04690000
045700         VALUE '!FCONTROL IUCV API FAIL-ERRNO ='.                 04700000
045800     05  FCNT-ERRNO             PIC 9(8).                         04710000
045900                                                                  04720000
046000 01  SEARCH-MSG-ERR.                                              04730000
046100     05  FILLER                 PIC X(24)                         04740000
046200         VALUE ' CLOSING DEAD SOCKET =..'.                        04750000
046300     05  SEARCH-MSG-COUNT       PIC 9(4).                         04760000
046400                                                                  04770000
046500 01  SEARCH-MSG-ERR2.                                             04780000
046600     05  FILLER                 PIC X(24)                         04790000
046700         VALUE ' CLOSING DUP  SOCKET =..'.                        04800000
046800     05  SEARCH-MSG-COUNT2      PIC 9(4).                         04810000
046900                                                                  04820000
047000 01  OPEN-SOCK-MSG.                                               04830000
047100     05  FILLER                 PIC X(24)                         04840000
047200         VALUE ' OPEN NEW SOCKET     =..'.                        04850000
047300     05  OPEN-SOCK-COUNT        PIC 9(4).                         04860000
047400                                                                  04870000
047500 01  INVALID-LEN-ER-MSG.                                          04880000
047600     05  FILLER                 PIC X(32)                         04890000
047700         VALUE '!INVALID LENGTH ON BUFFER ='.                     04900000
047800     05  INVALID-LEN-ER         PIC 9(4).                         04910000
047900     05  FILLER                 PIC X(3) VALUE ' : '.             04920000
048000     05  INVALID-LEN-IX         PIC 9(4).                         04930000
048100                                                                  04940000
048200 01  INVALID-MSG-TYP-MSG.                                         04950000
048300     05  FILLER                 PIC X(27)                         04960000
048400         VALUE '!INVALID MESSAGE TYPE,BUF ='.                     04970000
048500     05  INVALID-MSG-TYP-IX     PIC 9(4).                         04980000
048600     05  FILLER                 PIC X(3) VALUE ' : '.             04990000
048700     05  INVALID-MSG-TYP        PIC X(16).                        05000000
048800                                                                  05010000
048900 01  READ-SOCK1-MSG.                                              05020000
049000     05  FILLER                 PIC X(25)                         05030000
049100         VALUE 'READ SOCKET-SELECT SOCK='.                        05040000
049200     05  READ-SOCK1-COUNT       PIC 9(5).                         05050000
049300                                                                  05060000
049400 01  PART-CNT-MSG.                                                05070000
049500     05  FILLER                 PIC X(25)                         05080000
049600         VALUE ' PREVIOUSLY SAVED CNT='.                          05090000
049700     05  PART-CNT-1             PIC 9(5).                         05100000
049800     05  FILLER                 PIC X(12)                         05110000
049900         VALUE 'NEWRECEIVED='.                                    05120000
050000     05  PART-CNT-2             PIC 9(5).                         05130000
050100                                                                  05140000
050200 01  DISP-BIT-MASK-MSG.                                           05150000
050300     05  FILLER                 PIC X(01)                         05160000
050400         VALUE '!'.                                               05170000
050500     05  DISP-BIT-MASK          PIC X(49).                        05180000
050600                                                                  05190000
050700 01  DEAD-S.                                                      05200000
050800     05 FILLER                  PIC X(13) VALUE ' DEAD SOCKETS'.  05210000
050900     05 DEAD-S-2                PIC 9(18).                        05220000
051000     05 FILLER                  PIC X(1) VALUE ','.               05230000
051100     05 DEAD-S-4                PIC 9(18).                        05240000
051200                                                                  05250000
051300 01  MATCHING-LOG-AREA.                                           05260000
051400     05  FILLER                 PIC X(12) VALUE ' SOCKET # ='.    05270000
051500     05  MATCHING-LOG-A-STORE     PIC 9(4).                       05280000
051600     05  FILLER                 PIC X(13) VALUE ' MATCHING #='.   05290000
051700     05  MATCHING-LOG-A-NUMB      PIC 9(8).                       05300000
051800                                                                  05310000
051900 01  TEMP-DISPLAY.                                                05320000
052000     05 TEMP-DISPLAY-MSG        PIC X(20568) VALUE SPACES.        05330011
052100                                                                  05340000
052200 01  TCPCICS-MSG-AREA.                                            05350000
052300    02 TCPCICS-MSG-1.                                             05360000
052400       05 FILLER                PIC X(1) VALUE SPACES.            05370000
052500       05 MSGDATE               PIC 9(8).                         05380000
052600       05 FILLER                PIC X(1) VALUE SPACES.            05390000
052700       05 MSGTIME               PIC 9(8).                         05400000
052800       05 FILLER                PIC X(3) VALUE ' > '.             05410000
052900       05 MODULE                PIC X(4).                         05420000
053000       05 FILLER                PIC X(1) VALUE SPACES.            05430000
053100       05 MSG-PORT              PIC X(4).                         05440000
053200       05 FILLER                PIC X(1) VALUE SPACES.            05450000
053300                                                                  05460000
053400    02 TCPCICS-MSG-2.                                             05470000
053500       05 MSG-AREA             PIC X(89).                         05480000
053600    02 MSG-OUT REDEFINES TCPCICS-MSG-2.                           05490000
053700       05  CALL-NO      PIC X(10).                                05500000
053800       05  FIELDXX      PIC X(7).                                 05510000
053900       05  ERR-CODE     PIC X(8).                                 05520000
054000       05  SHOW-FIELDS REDEFINES ERR-CODE.                        05530000
054100           10 FILLER    PIC X(2).                                 05540000
054200           10 SHOW-PORTX  PIC 9(6).                               05550000
054300       05  FILLER       PIC X(1).                                 05560000
054400       05  FIELDYY      PIC X(7).                                 05570000
054500       05  DIS-RET-CODE PIC X(10).                                05580000
054600       05  FILLER       PIC X(46).                                05590000
054700                                                                  05600000
054800**********************************************************        05610000
054900* END OF FORMATTED TRACE MESSAGES TO BE DISPLAYED IN CSSL*        05620000
055000**********************************************************        05630000
      *---------------------------------------------------------*       05640000
      * NETCOOL ERROR MESSAGES DISPLAYED IN CSSL                        05650000
      *---------------------------------------------------------*       05660000
       01  PE-PROGRAM-ERROR-MESSAGES.                                   05670000
         05  PE-NETCOOL-ALERT-TO-BE-WRITTEN.                            05680000
           10  FILLER                              PIC  X(016)          05690000
                 VALUE '!NETCOOL ALERT- '.                              05700000
           10  PE-IS003-SUMMARY                    PIC  X(255)          05710000
                                                    VALUE SPACES.       05720000
      *---------------------------------------------------------*       05730000
      * NETCOOL MESSAGE COPYBOOK                                        05740000
      *---------------------------------------------------------*       05750000
           COPY ISWS003.                                                05760000
055100                                                                  05770000
055200                                                                  05780000
055300 LINKAGE SECTION.                                                 05790000
055400                                                                  05800000
055500****************************************************************  05810000
055600*  THIS IS THE SOCKET TABLE THAT HOLDS ALL OPEN SOCKET INFO    *  05820000
055700*  AND MESSAGE DATA AS IT IS READ.                             *  05830000
055800*  TO INCREASE THE NUMBER OF SOCKETS,  THE TCPSOCKETN-TABLE-   *  05840000
055900*  ELEMENT MUST BE UPDATED FOR THE OCCURS STATEMENT.           *  05850000
056000* Explanation of variables:                                    *  05860000
056100* SOCKADDR-IN = IP address and port of the Client Connection on*  05870000
056200*               this Socket                                    *  05880000
056300* ST-AVAIL = "Y" = Socket is not connected                     *  05890000
056400*            "N" = Socket connection is established and being  *  05900000
056500*                  used.                                       *  05910000
056600* ST-TSTAMP = Timestamp updated at connection and each msg read*  05920000
056700* ST-MATCHING = A number used to match the response to a socket*  05930000
056800* ST-OPENS,RECV,SEND,CLOSE = Counters that can be used to track*  05940000
056900*                            socket stats                      *  05950000
057000* DATA-CNT = 1 + Length of message to be sent to child program.*  05960000
057100* DATA-TRANID = CICS TranID (child) to send message to.        *  05970000
057200* DATA-LEN-HEX = Length of message in HEX as sent by Client    *  05980000
057300*                The length does NOT include this 2 byte header*  05990000
057400* DATA-REQ = Data in EBCDIC format to be sent to child program.*  06000000
057500****************************************************************  06010000
057600                                                                  06020000
057700 01  TCPSOCKETN-TABLE.                                            06030000
057800     05 TCPSOCKETN-TABLE-ELEMENT OCCURS 100 TIMES.                06040000
057900       10 TBL-SOCKADDR-IN.                                        06050000
058000          15 TBL-SIN-FAMILY   PIC 9(4) BINARY.                    06060000
058100          15 TBL-SIN-PORT     PIC 9(4) BINARY.                    06070000
058200          15 TBL-SIN-ADDR     PIC 9(8) BINARY.                    06080000
058300          15 TBL-SIN-ZERO     PIC X(8).                           06090000
058400       10 TBL-ST-AVAIL        PIC X.                              06100000
058500       10 TBL-TSTAMP          PIC 9(16) BINARY.                   06110000
058600       10 TBL-ST-MATCHING     PIC 9(8).                           06120000
058700       10 TBL-ST-OPENS        PIC 9(8) BINARY.                    06130000
058800       10 TBL-ST-RECV         PIC 9(8) BINARY.                    06140000
058900       10 TBL-ST-SEND         PIC 9(8) BINARY.                    06150000
059000       10 TBL-ST-CLOSE        PIC 9(8) BINARY.                    06160000
059100** TBL-DATA-CNT = LENGTH OF MESSAGE + 1                           06170000
059200       10 TBL-DATA-CNT        PIC 9(8) BINARY.                    06180000
059300       10 TBL-DATA-TRANID     PIC X(4).                           06190000
059400       10 TBL-DATA.                                               06200000
059500          15 TBL-DATA-LEN-HEX PIC X(2).                           06210000
059600          15 TBL-DATA-REQ     PIC X(9984).                        06220033
059700                                                                  06230000
059800 EJECT                                                            06240000
059900                                                                  06250000
060000                                                                  06260000
060100******************************************************************06270000
060200 PROCEDURE DIVISION.                                              06280000
060300******************************************************************06290000
060400 0000-MAINLINE.                                                   06300000
060500                                                                  06310000
060600     PERFORM 1000-INITIALIZE.                                     06320000
060700                                                                  06330000
060800     PERFORM 2000-CONNECT.                                        06340000
060900                                                                  06350000
061000     MOVE 'PERFORM PROCESS-MODULE' TO MSG-AREA.                   06360000
061100     PERFORM 9000-WRITE-CICS.                                     06370000
061200                                                                  06380000
061300     PERFORM 3000-PROCESS-MODULE                                  06390000
061400        UNTIL EZRETC < 0.                                         06400000
061500                                                                  06410000
061600     MOVE '!TERMINATION TRANSACTION' TO MSG-AREA.                 06420000
061700     PERFORM 9000-WRITE-CICS.                                     06430000
061800     PERFORM 9990-PGM-EXIT.                                       06440000
061900                                                                  06450000
062000                                                                  06460000
062100****************************************************************  06470000
062200* INITIALIZE                                                   *  06480000
062300* INITIALIZE ALL PARAMETERS AT TASK STARTUP                    *  06490000
062400* THE FOLLOWING LOGIC IS EXECUTED AT TASK STARTUP TO SET       *  06500000
062500* HANDLES FOR EXCEPTIONAL CONDITIONS AND INITIALIZE INTERNAL   *  06510000
062600* TABLES/WORK AREAS.                                           *  06520000
062700****************************************************************  06530000
062800 1000-INITIALIZE.                                                 06540000
                                                                        06550015
062900     EXEC CICS HANDLE CONDITION                                   06560000
063000                      INVREQ  (9010-INVREQ-ERR-SEC)               06570000
063100                      IOERR   (9020-IOERR-SEC)                    06580000
063200                      QZERO   (9030-QZERO-SEC)                    06590000
063300                      LENGERR (9040-LENGERR-SEC)                  06600000
063400                      NOSPACE (9050-NOSPACE-ERR-SEC)              06610000
063500                      NOSTG   (9050-NOSPACE-ERR-SEC)              06620000
063600                      QIDERR  (9060-QIDERR-SEC)                   06630000
063700                      ITEMERR (9070-ITEMERR-SEC)                  06640000
063800                      ENDDATA (9080-ENDDATA-SEC)                  06650000
063900                      INVEXITREQ (9090-TCP-TRUE-REQ)              06660000
064000          END-EXEC.                                               06670000
064100     PERFORM 1100-GET-PORT.                                       06680000
064200     PERFORM 1200-GET-MAIN.                                       06690000
064300     PERFORM 1300-CREATE-TSQS.                                    06700000
064400     PERFORM 1400-INIT-SOCKET-TBL.                                06710000
064500                                                                  06720000
064600****************************************************************  06730000
064700* GET-PORT                                                     *  06740000
064800* RECEIVE THE PORT NUMBER FROM PARMS PASSED TO PROGRAM         *  06750000
064900****************************************************************  06760000
065000 1100-GET-PORT.                                                   06770000
                                                                        06780034
065100     MOVE '!START OF INCOMM TO MAINFRAME TCPIP LISTENER'          06790001
065110          TO MSG-AREA.                                            06800000
065200     PERFORM 9000-WRITE-CICS.                                     06810000
065300                                                                  06820000
065400     MOVE SPACES TO WS-RECEIVE.                                   06830000
065500     MOVE +4 TO SAV-MSG-LEN.                                      06840033
065600     EXEC CICS RETRIEVE INTO(WS-RECEIVE) LENGTH(SAV-MSG-LEN)      06850000
065700               RESP(PV-RC) NOHANDLE END-EXEC.                     06860000
065800     IF PV-RC NOT = 0 THEN                                        06870000
065900        MOVE '!INVALID PARMS RECEIVED, STOPPING PROGRAM' TO       06880000
066000             MSG-AREA                                             06890000
066100        PERFORM 9000-WRITE-CICS                                   06900000
066200        PERFORM 9990-PGM-EXIT                                     06910000
066300     ELSE                                                         06920000
066400        MOVE '!PARMS=' TO MSG-AREA                                06930000
066500        MOVE WS-RECEIVE TO MSG-AREA(8:30)                         06940000
066600        PERFORM 9000-WRITE-CICS                                   06950000
066700        MOVE WS-RECEIVE(1:4) TO PORTADDR                          06960000
066800        MOVE WS-RECEIVE(1:4) TO PV-HOLD-PORT                      06970000
066900        IF PORTADDR NOT = 0 THEN                                  06980000
067000           MOVE '!PORT#=' TO MSG-AREA                             06990000
067100           MOVE PORTADDR TO MSG-AREA(8:4)                         07000000
067200           PERFORM 9000-WRITE-CICS                                07010000
067300        ELSE                                                      07020000
067400           MOVE '!INVALID PORT NUMBER, EXITING PGM' TO            07030000
067500               MSG-AREA                                           07040000
067600           PERFORM 9000-WRITE-CICS                                07050000
067700           PERFORM 9990-PGM-EXIT                                  07060000
067800        END-IF                                                    07070000
067900     END-IF.                                                      07080000
068000                                                                  07090000
068100*                                                                 07100000
068200*  SET THE CICS TEMP STORAGE QUEUES BASED ON PORT NUMBER          07110000
068300*                                                                 07120000
068400                                                                  07130000
068500     EXEC CICS                                                    07140000
068600         ASSIGN APPLID (PV-SYSTEM-ID)                             07150000
068700     END-EXEC.                                                    07160000
068800                                                                  07170000
068900     IF PV-HOLD-PORT = 7993 AND PV-CICS-REGION = 'CICST1' THEN    07180004
069000        MOVE '1' TO TCPIP-CICS-QUEUE                              07190000
069100     END-IF.                                                      07200000
069200                                                                  07210006
069300     IF PV-HOLD-PORT = 7997 AND PV-CICS-REGION = 'CICSQA' THEN    07220006
069400        MOVE '1' TO TCPIP-CICS-QUEUE                              07230006
069500     END-IF.                                                      07240006
069600                                                                  07250006
069700     IF PV-HOLD-PORT = 7996 AND PV-CICS-REGION = 'CICSLA' THEN    07260006
069800        MOVE '1' TO TCPIP-CICS-QUEUE                              07270006
069900     END-IF.                                                      07280006
070000                                                                  07290006
070100     IF PV-HOLD-PORT = 7998 AND PV-CICS-REGION = 'CICSPS' THEN    07300004
070200        MOVE '1' TO TCPIP-CICS-QUEUE                              07310000
070300     END-IF.                                                      07320000
070400                                                                  07330000
070500     IF TCPIP-CICS-QUEUE = SPACE                                  07340000
070600        MOVE '!INVALID PORT AND CICS, STOPPING PROGRAM' TO        07350000
070700             MSG-AREA                                             07360000
070800        PERFORM 9000-WRITE-CICS                                   07370000
070900        PERFORM 9990-PGM-EXIT                                     07380000
071000     END-IF.                                                      07390000
071100                                                                  07400000
071200     MOVE TCPIP-CICS-QUEUE TO TCPIPPRQ-ONE.                       07410000
071300     MOVE TCPIP-CICS-QUEUE TO TCPIPSWQ-ONE.                       07420000
071400                                                                  07430000
071500***************************************************************** 07440000
071600*  GET-MAIN                                                     * 07450000
071700*  GET MAIN STORAGE                                             * 07460000
071800***************************************************************** 07470000
071900 1200-GET-MAIN.                                                   07480000
                                                                        07490034
072000*    EXEC CICS IGNORE CONDITION TERMERR EOC SIGNAL END-EXEC.      07500000
072100     MOVE 256 TO CLENG.                                           07510000
072200*    EXEC CICS ASKTIME ABSTIME(STARTT) NOHANDLE END-EXEC.         07520000
072300                                                                  07530000
072400     MOVE '!GETMAIN STARTED.' TO MSG-AREA.                        07540000
072500     PERFORM 9000-WRITE-CICS.                                     07550000
072600                                                                  07560000
072700     EXEC CICS GETMAIN SET(ADDRESS OF TCPSOCKETN-TABLE)           07570000
072800        FLENGTH(LENGTH OF TCPSOCKETN-TABLE) INITIMG(INIT-LOW)     07580000
072900        RESP(PV-RC) END-EXEC.                                     07590000
073000                                                                  07600000
073100     MOVE '!GETMAIN DONE ' TO MSG-AREA.                           07610000
073200     PERFORM 9000-WRITE-CICS.                                     07620000
073300     IF PV-RC NOT = 0 THEN                                        07630000
073400        MOVE '!' TO MSG-AREA                                      07640000
073500        MOVE 'RC=' TO FIELDXX                                     07650000
073600        MOVE PV-RC TO ERR-CODE                                    07660000
073700        PERFORM 9000-WRITE-CICS                                   07670000
073800     END-IF.                                                      07680000
073900                                                                  07690000
074000***************************************************************** 07700000
074100* CREATE-TSQS                                                     07710000
074200* DELETE THE TEMP STORAGE QUEUES IF THEY ARE PRESENT, AND         07720000
074300* CREATE NEW TEMP STORAGE QUEUES.                                 07730000
074400* THE FORMAT OF THE QUEUE IS:                                     07740000
074500*  LINE1 = # OF LAST RECORD WRITTEN TO THE Q BY THE CHILD PROGRAM 07750000
074600*          FOLLOWED BY THE TOTAL POSSIBLE ENTRIES IN THE Q (1000) 07760000
074700*  LINE2 = # OF LAST RECORD READ BY THE LISTENER, FOLLOWED BY     07770000
074800*          THE TOTAL POSSIBLE ENTRIES IN THE Q (1000)             07780000
074900*  LINE3 - LINE 1002 = BLANK LINES TO BE FILLED IN BY CHILD       07790000
075000*                     RESPONSES                                   07800000
075100***************************************************************** 07810000
075200 1300-CREATE-TSQS.                                                07820000
075300                                                                  07830000
075400* 'PUSH' DISABLES ALL PREVIOUS CONDITION HANDLERS                 07840000
075500     EXEC CICS PUSH HANDLE  END-EXEC.                             07850000
075600                                                                  07860000
075700* DELETE TCPIPPRQ                                                 07870000
075800     MOVE 'CHECKING TCPIPPRQ TSQ' TO MSG-AREA.                    07880000
075900     MOVE TCPIPPRQ TO MSG-AREA(10:8).                             07890000
076000     PERFORM 9000-WRITE-CICS.                                     07900000
076100                                                                  07910000
076200     EXEC CICS IGNORE CONDITION QIDERR                            07920000
076300     END-EXEC.                                                    07930000
076400                                                                  07940000
076500     EXEC CICS DELETEQ TS QUEUE(TCPIPPRQ) END-EXEC.               07950000
076600                                                                  07960000
076700* DELETE TCPIPSWQ                                                 07970000
076800     MOVE 'CHECKING TCPIPSWQ TSQ' TO MSG-AREA.                    07980000
076900     MOVE TCPIPSWQ TO MSG-AREA(10:8).                             07990000
077000     PERFORM 9000-WRITE-CICS.                                     08000000
077100                                                                  08010000
077200     EXEC CICS IGNORE CONDITION QIDERR                            08020000
077300     END-EXEC.                                                    08030000
077400                                                                  08040000
077500     EXEC CICS DELETEQ TS QUEUE(TCPIPSWQ) END-EXEC.               08050000
077600                                                                  08060000
077700* 'POP' RE-ENABLES CONDITION HANDLERS                             08070000
077800     EXEC CICS POP HANDLE END-EXEC.                               08080000
077900                                                                  08090000
078000* CREATE THE PR DATA QUEUE                                        08100000
078100* WRITE OUT THE FIRST 2 LINES OF THE QUEUE, THEN 1000 BLANK LINES 08110000
078200                                                                  08120000
078300     MOVE 'CREATING TCPIPPRQ TSQ' TO MSG-AREA.                    08130000
078400     MOVE TCPIPPRQ TO MSG-AREA(10:8).                             08140000
078500     PERFORM 9000-WRITE-CICS.                                     08150000
078600                                                                  08160000
078700     MOVE LENGTH OF TCP-BUF-OUT TO SAV-MSG-LEN.                   08170000
078800     MOVE SPACES TO TSQ-INDEX.                                    08180000
078900     MOVE 3 TO TSQ-COUNT-1.                                       08190000
079000     MOVE 1000 TO TSQ-COUNT-2.                                    08200000
079100     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          08210000
079200          LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC.            08220000
079300     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          08230000
079400          LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC.            08240000
079500     MOVE SPACES TO TSQ-INDEX.                                    08250000
079600                                                                  08260000
079700     PERFORM 1000 TIMES                                           08270000
079800        EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)       08280000
079900             LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC          08290000
080000     END-PERFORM.                                                 08300000
080100                                                                  08310000
080200* CREATE THE TS SWITCH OPTION QUEUE                               08320000
080300                                                                  08330000
080400     MOVE 'CREATING TCPIPSWQ TSQ' TO MSG-AREA.                    08340000
080500     MOVE TCPIPSWQ TO MSG-AREA(10:8).                             08350000
080600     PERFORM 9000-WRITE-CICS.                                     08360000
080700                                                                  08370000
080800     MOVE SPACES TO TCP-BUF.                                      08380000
080900     PERFORM 100 TIMES                                            08390000
081000        EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ) FROM(TCP-BUF)         08400000
081100             LENGTH(80) MAIN NOSUSPEND END-EXEC                   08410000
081200     END-PERFORM.                                                 08420000
081300                                                                  08430000
081400***************************************************************** 08440000
081500*  INIT-SOCKET-TBL                                              * 08450000
081600*  INITIALIZE THE SOCKETS STRING                                * 08460000
081700*  HERE WE ARE INITIALIZING THE SOCKETS TABLE, A BYTE STRING    * 08470000
081800*  USED TO IDENTIFY WHICH SOCKETS ARE ACTIVE FROM THE INACTIVE, * 08480000
081900*  AND A TABLE CONTAINING 50 ELEMENTS USED TO STORE RECYCLED    * 08490000
082000*  (CLOSED AND AVAILABLE FOR RE-USE) SOCKET DESCRIPTORS.        * 08500000
082100***************************************************************** 08510000
082200 1400-INIT-SOCKET-TBL.                                            08520000
082300                                                                  08530000
082400     MOVE 'INITIALIZING SOCKET TABLES' TO MSG-AREA.               08540000
082500     PERFORM 9000-WRITE-CICS.                                     08550000
082600                                                                  08560000
082700* SET INITIAL VALUES FOR ALL TCPSOCKETN-TABLE ENTRIES             08570000
082800     PERFORM 1500-INIT-TABLE                                      08580000
082900         VARYING SOCKNO FROM 1 BY 1 UNTIL SOCKNO > SOCKETS.       08590000
083000                                                                  08600000
083100***************************************************************** 08610000
083200* INIT-TABLE                                                    * 08620000
083300*     INIT-TABLES FOR PROGRAM                                   * 08630000
083400***************************************************************** 08640000
083500 1500-INIT-TABLE.                                                 08650000
                                                                        08660034
083600     MOVE 'Y' TO TBL-ST-AVAIL(SOCKNO).                            08670000
083700     MOVE 0 TO TBL-ST-MATCHING(SOCKNO).                           08680000
083800     MOVE 0 TO TBL-ST-OPENS(SOCKNO).                              08690000
083900     MOVE 0 TO TBL-ST-CLOSE(SOCKNO).                              08700000
084000     MOVE 0 TO TBL-TSTAMP(SOCKNO).                                08710000
084100     MOVE 0 TO TBL-ST-RECV(SOCKNO).                               08720000
084200     MOVE 0 TO TBL-ST-SEND(SOCKNO).                               08730000
084300     MOVE SPACES TO TBL-DATA(SOCKNO).                             08740000
084400     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              08750000
084500                                                                  08760000
084600****************************************************************  08770000
084700* CONNECT                                                      *  08780000
084800* CONNECT TO TCP/IP                                            *  08790000
084900*  BEFORE SERVER STARTS,  TRUE MUST BE ACTIVE.  ISSUE 'EXTRACT *  08800000
085000*  EXIT' COMMAND TO CHECK IF TRUE IS ACTIVE OR NOT             *  08810000
085100*  'TRUE' = TASK RELATED USER EXIT                                08820000
085200****************************************************************  08830000
085300 2000-CONNECT.                                                    08840000
085400                                                                  08850000
085500**** OBTAIN ADDRESS OF THE GLOBAL WORK AREA (GWA)                 08860000
085600****      IF NOT FOUND, WAIT 30 SECONDS AND TRY AGAIN             08870000
085700****      FOR UP TO 10 TIMES.                                     08880000
085800****                                                              08890000
085900     MOVE 1 TO PV-RC.                                             08900000
086000     PERFORM VARYING WSCT FROM 1 BY 1 UNTIL                       08910000
086100                                       PV-RC = 0 OR WSCT > 10     08920000
086200       EXEC CICS EXTRACT EXIT PROGRAM('EZACIC01') GASET(GWPTR)    08930000
086300            GALENGTH(CLENG) RESP(PV-RC) END-EXEC                  08940000
086400       IF PV-RC NOT = 0 THEN                                      08950000
086500          IF WSCT > 9 THEN                                        08960000
086600             MOVE '!COULD NOT FIND TRUE IN 5 MIN.' TO MSG-AREA    08970000
086700             PERFORM 9000-WRITE-CICS                              08980000
086800             PERFORM 9990-PGM-EXIT                                08990000
086900          END-IF                                                  09000000
087000          MOVE '!EZACIC01 NOT FOUND, WAITING 30 SEC' TO MSG-AREA  09010000
087100          PERFORM 9000-WRITE-CICS                                 09020000
087200          EXEC CICS DELAY INTERVAL(30) END-EXEC                   09030000
087300       END-IF                                                     09040000
087400     END-PERFORM.                                                 09050000
087500                                                                  09060000
087600*        INDICATE SELECT IS USING SOCKET 1.                       09070000
087700                                                                  09080000
087800     PERFORM 2100-INIT-API.                                       09090000
087900     PERFORM 2110-SOCKET-RTN.                                     09100000
088000     PERFORM 2120-SET-SOCK-OPT.                                   09110000
088100     PERFORM 2130-BIND-RTN.                                       09120000
088200     PERFORM 2140-LISTEN-RTN.                                     09130000
088300                                                                  09140000
088400*         INITIALIZE CHARACTER MASK FOR SELECT                    09150000
088500     PERFORM VARYING WSCT FROM 1 BY 1 UNTIL WSCT > SOCKETS        09160000
088600        MOVE '0' TO CHAR-ENTRY(WSCT)                              09170000
088700     END-PERFORM.                                                 09180000
088800     MOVE '1' TO CHAR-ENTRY(1).                                   09190000
088900     PERFORM 7000-CHAR-TO-BIT.                                    09200000
089000     MOVE BIT-MASK TO SELECT-RD-MASK.                             09210000
089100*    MOVE BIT-MASK TO SELECT-WR-MASK.                             09220000
089200*    MOVE BIT-MASK TO SELECT-EX-MASK.                             09230000
089300                                                                  09240000
089400***************************************************************** 09250000
089500*                                                               * 09260000
089600*     INIT-API - CONNECTS THE APPLICATION TO TCP/IP             * 09270000
089700*                                                               * 09280000
089800***************************************************************** 09290000
089900*                                                                 09300000
090000 2100-INIT-API.                                                   09310000
                                                                        09320034
090100     MOVE EIBTASKN TO SUBTASKNO                                   09330000
090200     MOVE 'CICS TASK NUMBER' TO MSG-AREA.                         09340000
090300     MOVE INTASUBT TO MSG-AREA(18:7).                             09350000
090400     PERFORM 9000-WRITE-CICS.                                     09360000
090500     MOVE 'PERFORMING INIT-API ' TO MSG-AREA.                     09370000
090600     PERFORM 9000-WRITE-CICS.                                     09380000
090700     MOVE SOCKETS TO INTAMAXS.                                    09390000
090800     MOVE 0 TO EZERRNO.                                           09400000
090900     MOVE 0 TO EZRETC.                                            09410000
091000     CALL 'EZASOKET' USING INITAPI-CMD INTAMAXS INTAIDNT          09420000
091100         INTASUBT MAX-SOCK-NUM EZERRNO EZRETC.                    09430000
091200                                                                  09440000
091300     MOVE MAX-SOCK-NUM TO MAX-SOCKETS-LESS1.                      09450000
091400     MOVE MAX-SOCK-NUM TO INIT-MAXSOCK.                           09460000
091500     MOVE INITAPI-COMPLETE TO MSG-AREA.                           09470000
091600     PERFORM 9000-WRITE-CICS.                                     09480000
091700     IF EZRETC < 0 THEN                                           09490000
091800        MOVE EZERRNO TO INIT-ERRNO                                09500000
091900        MOVE INITAPI-ERR TO MSG-AREA                              09510000
092000        PERFORM 9000-WRITE-CICS                                   09520000
092100        PERFORM 9990-PGM-EXIT                                     09530000
092200     END-IF.                                                      09540000
092300                                                                  09550000
092400***************************************************************** 09560000
092500*                                                               * 09570000
092600*     SOCKET ROUTINE - OBTAINS A SOCKET                         * 09580000
092700*                                                               * 09590000
092800***************************************************************** 09600000
092900*                                                                 09610000
093000 2110-SOCKET-RTN.                                                 09620000
093100     MOVE 'PERFORMING SOCKET   ' TO MSG-AREA.                     09630000
093200     PERFORM 9000-WRITE-CICS.                                     09640000
093300     MOVE 0 TO EZERRNO.                                           09650000
093400     MOVE 0 TO EZRETC.                                            09660000
093500     CALL 'EZASOKET' USING SOCKET-CMD                             09670000
093600         SOCKAFIN SOCKTYPE SOCKPCOL                               09680000
093700         EZERRNO EZRETC.                                          09690000
093800     IF EZRETC < 0 THEN                                           09700000
093900        MOVE EZERRNO TO SOCK-ERRNO                                09710000
094000        MOVE SOCKAPI-ERR TO MSG-AREA                              09720000
094100        PERFORM 9000-WRITE-CICS                                   09730000
094200        PERFORM 9990-PGM-EXIT                                     09740000
094300     END-IF.                                                      09750000
094400                                                                  09760000
094500***************************************************************** 09770000
094600*                                                               * 09780000
094700*     SET SOCKET OPTIONS - SOCKET 0 IS SET TO RE-USE            * 09790000
094800*                                                               * 09800000
094900***************************************************************** 09810000
095000*                                                                 09820000
095100 2120-SET-SOCK-OPT.                                               09830000
095200     MOVE 'PERFORMING SET-SOCK ' TO MSG-AREA.                     09840000
095300     PERFORM 9000-WRITE-CICS.                                     09850000
095400     MOVE SSOREUSE TO SSOOPTNM.                                   09860000
095500     MOVE 0 TO SOCKET-DESCRIPTOR.                                 09870000
095600     MOVE 0 TO EZERRNO.                                           09880000
095700     MOVE 0 TO EZRETC.                                            09890000
095800     CALL 'EZASOKET' USING SETSOCK-CMD                            09900000
095900         SOCKET-DESCRIPTOR SSOOPTNM SSOOPVAL SSOLEN               09910000
096000         EZERRNO EZRETC.                                          09920000
096100     IF EZRETC < 0 THEN                                           09930000
096200        MOVE EZERRNO TO SETS-ERRNO                                09940000
096300        MOVE SETSAPI-ERR TO MSG-AREA                              09950000
096400        PERFORM 9000-WRITE-CICS                                   09960000
096500        PERFORM 9990-PGM-EXIT                                     09970000
096600     END-IF.                                                      09980000
096700                                                                  09990000
096800***************************************************************** 10000000
096900*                                                               * 10010000
097000*     BIND ROUTINE - BINDS THE SOCKET TO THE LOCAL PORT         * 10020000
097100*                                                               * 10030000
097200***************************************************************** 10040000
097300 2130-BIND-RTN.                                                   10050000
097400     MOVE 'PERFORMING BIND     ' TO MSG-AREA.                     10060000
097500     PERFORM 9000-WRITE-CICS.                                     10070000
097600     MOVE 2 TO BINDAFIN.                                          10080000
097700     MOVE PORTADDR TO BINDPORT.                                   10090000
097800     MOVE 0 TO BINDIPAD.                                          10100000
097900     MOVE 0 TO BINDZERO.                                          10110000
098000     MOVE 0 TO SOCKET-DESCRIPTOR.                                 10120000
098100     MOVE 0 TO EZERRNO.                                           10130000
098200     MOVE 0 TO EZRETC.                                            10140000
098300     CALL 'EZASOKET' USING BIND-CMD                               10150000
098400         SOCKET-DESCRIPTOR BINDNAME EZERRNO EZRETC.               10160000
098500     IF EZRETC < 0 THEN                                           10170000
098600        MOVE EZERRNO TO BIND-ERRNO                                10180000
098700        MOVE BINDAPI-ERR TO MSG-AREA                              10190000
098800        PERFORM 9000-WRITE-CICS                                   10200000
098900        PERFORM 9990-PGM-EXIT                                     10210000
099000     END-IF.                                                      10220000
099100                                                                  10230000
099200***************************************************************** 10240000
099300*                                                               * 10250000
099400*     LISTEN ROUTINE - ACCEPT INCOMING CALLS FROM CLIENTS       * 10260000
099500*                                                               * 10270000
099600***************************************************************** 10280000
099700*                                                                 10290000
099800 2140-LISTEN-RTN.                                                 10300000
099900     MOVE 'PERFORMING LISTEN   ' TO MSG-AREA.                     10310000
100000     PERFORM 9000-WRITE-CICS.                                     10320000
100100     MOVE 0 TO SOCKET-DESCRIPTOR.                                 10330000
100200     MOVE 0 TO EZERRNO.                                           10340000
100300     MOVE 0 TO EZRETC.                                            10350000
100400     CALL 'EZASOKET' USING LISTEN-CMD                             10360000
100500         SOCKET-DESCRIPTOR LISTBCKL EZERRNO EZRETC.               10370000
100600     IF EZRETC < 0 THEN                                           10380000
100700        MOVE EZERRNO TO LIST-ERRNO                                10390000
100800        MOVE LISTAPI-ERR TO MSG-AREA                              10400000
100900        PERFORM 9000-WRITE-CICS                                   10410000
101000        PERFORM 9990-PGM-EXIT                                     10420000
101100     END-IF.                                                      10430000
101200                                                                  10440000
101300 EJECT                                                            10450000
101400                                                                  10460000
101500************************************************************      10470000
101600* PROCESS-MODULE                                           *      10480000
101700* THIS IS THE MAIN LOOP OF THE PROGRAM.  A SELECT CALL IS  *      10490000
101800* ISSUED TO TCPIP TO WAIT FOR WORK.                        *      10500000
101900************************************************************      10510000
102000 3000-PROCESS-MODULE.                                             10520000
102100                                                                  10530000
102200* FIND OUT WHICH SOCKETS HAVE DATA TO READ                        10540000
102300     PERFORM 3010-SELECT-SOCKETS.                                 10550000
102400                                                                  10560000
102500* CHECK RETURN CODE FROM SELECT AND PROCESS ACCORDINGLY           10570000
102600* IF SELRETC < 0, THAT IS AN ERROR, SO PROCESSING WILL STOP       10580000
102700* IF SELRETC = 0, INDICATES SOCKET HAS TIMED OUT                  10590000
102800* IF SELRETC > 0, CONTINUE PROCESSING                             10600000
102900* AFTER CHECKING ALL SOCKETS, PERFORM TIMEOUT ROUTINE             10610000
103000                                                                  10620000
103100     IF SELRETC > 0                                               10630000
103200*                                                                 10640000
103300* CONVERT BIT MASK TO CHAR MASK FOR READ BITS                     10650000
103400*                                                                 10660000
103500       MOVE SELECT-RR-MASK TO BIT-MASK                            10670000
103600       PERFORM 7010-BIT-TO-CHAR                                   10680000
103700       MOVE CHAR-MASK TO CHAR-MASK1                               10690000
103800*                                                                 10700000
103900*  TRACE DISPLAY ALL BIT THAT ARE ON IT BIT ARRAY                 10710000
104000*                                                                 10720000
104100       IF DISP-MSGS > 0                                           10730000
104200         MOVE 'BIT MASK1 FROM SELECT READ' TO MSG-AREA            10740000
104300         PERFORM 9000-WRITE-CICS                                  10750000
104400         MOVE CHAR-MASK1 TO MSG-AREA                              10760000
104500         PERFORM 9000-WRITE-CICS                                  10770000
104600       END-IF                                                     10780000
104700*                                                                 10790000
104800* TEST FOR READ ON SOCKET 0, IF SO OPEN NEW SOCKET                10800000
104900*                                                                 10810000
105000       IF CHAR-MASK1(1:1) = '1' THEN                              10820000
105100          PERFORM 3100-OPEN-NEW-SOCKET                            10830000
105200          IF EZRETC < 0 THEN                                      10840000
105300            MOVE '!ERROR ON OPEN-NEW-SOCKET   ' TO MSG-AREA       10850000
105400            PERFORM 9000-WRITE-CICS                               10860000
105500          END-IF                                                  10870000
105600       END-IF                                                     10880000
105700*                                                                 10890000
105800* IF OPEN NEW SOCKET FAILED, THEN QUIT READING BUT                10900000
105900* DON'T ABEND.                                                    10910000
106000*                                                                 10920000
106100       IF EZRETC < 0 THEN                                         10930000
106200          MOVE 0 TO EZRETC                                        10940000
106300       ELSE                                                       10950000
106400*                                                                 10960000
106500* TEST FOR READ ON OTHER SOCKETS, IF SO PROCESS SOCKET            10970000
106600*                                                                 10980000
106700         PERFORM VARYING TSOCKET FROM 2 BY 1                      10990000
106800                  UNTIL TSOCKET > SOCKETS                         11000000
106900          IF CHAR-MASK1(TSOCKET:1) = '1' THEN                     11010000
107000             COMPUTE SOCKNO = TSOCKET - 1                         11020000
107100             PERFORM 4000-RECEIVE-DATA                            11030000
107200          END-IF                                                  11040000
107300         END-PERFORM                                              11050000
107400       END-IF                                                     11060000
107500                                                                  11070000
107600     END-IF.                                                      11080000
107700                                                                  11090000
107800*                                                                 11100000
107900* PROCESS TIMEOUT AFTER ALL SOCKETS HAVE BEEN CHECKED FOR DATA    11110000
108000*                                                                 11120000
108100     IF SELRETC >= 0                                              11130000
108200       PERFORM 5000-PROCESS-TIMEOUT                               11140000
108300     END-IF.                                                      11150000
108400                                                                  11160000
108500************************************************************      11170000
108600* SELECT-SOCKETS                                           *      11180000
108700* ISSUE SELECT TO FIND OUT WHAT SOCKETS HAVE DATA TO READ  *      11190000
108800************************************************************      11200000
108900 3010-SELECT-SOCKETS.                                             11210000
109000* ZERO OUT ALL OUTPUT BIT MASKS FOR SELECT                        11220000
109100     PERFORM VARYING SOCKNO FROM 1 BY 1 UNTIL SOCKNO > SOCKETS    11230000
109200        MOVE '0' TO CHAR-ENTRY(SOCKNO)                            11240000
109300     END-PERFORM.                                                 11250000
109400     PERFORM 7000-CHAR-TO-BIT.                                    11260000
109500     MOVE BIT-MASK TO SELECT-RR-MASK.                             11270000
109600     MOVE BIT-MASK TO SELECT-RW-MASK.                             11280000
109700     MOVE BIT-MASK TO SELECT-RE-MASK.                             11290000
109800                                                                  11300000
109900* CLEAR AND NEVER CHECK EXCEPTION OR WRITE BITS                   11310000
110000                                                                  11320000
110100     MOVE BIT-MASK TO SELECT-EX-MASK.                             11330000
110200     MOVE BIT-MASK TO SELECT-WR-MASK.                             11340000
110300                                                                  11350000
110400*                                                                 11360000
110500* ISSUE THE SELECT COMMAND ----------------------------           11370000
110600* SELECT WILL FLIP A BIT IN THE READ MASK TO '1' FOR ANY          11380000
110700* SOCKET THAT HAS DATA TO BE PROCESSED.                           11390000
110800*                                                                 11400000
110900                                                                  11410000
111000* A TRACE MESSAGE                                                 11420000
111100     IF DISP-MSGS > 0                                             11430000
111200       MOVE 'PERFORMING SELECT COMMAND' TO MSG-AREA               11440000
111300       PERFORM 9000-WRITE-CICS                                    11450000
111400     END-IF.                                                      11460000
111500                                                                  11470000
111600     MOVE 0 TO EZERRNO.                                           11480000
111700     MOVE 0 TO SELRETC.                                           11490000
111800     CALL 'EZASOKET' USING SELECT-CMD                             11500000
111900         SELECT-NUMFDS SELECT-TIMEOUT                             11510000
112000         SELECT-RD-MASK SELECT-WR-MASK SELECT-EX-MASK             11520000
112100         SELECT-RR-MASK SELECT-RW-MASK SELECT-RE-MASK             11530000
112200         EZERRNO SELRETC.                                         11540000
112300                                                                  11550000
112400     MOVE SELRETC TO EZRETC.                                      11560000
112500                                                                  11570000
112600     IF SELRETC < 0 THEN                                          11580000
112700        MOVE EZERRNO TO SELE-ERRNO                                11590000
112800        MOVE SELEAPI-ERR TO MSG-AREA                              11600000
112900        PERFORM 9000-WRITE-CICS                                   11610000
113000     END-IF.                                                      11620000
113100                                                                  11630000
113200* TIMESTAMP IS COMPUTED HERE                                      11640000
      * Timestamp is the number of minutes past since Jan 1st.          11650000
      * IN THE CALCULATION, THE '1440' is the minutes in 24 hrs.        11660000
113300     IF SELRETC >= 0                                              11670000
113400        EXEC CICS ASKTIME ABSTIME(DSTAMP) NOHANDLE END-EXEC       11680000
113500        EXEC CICS FORMATTIME ABSTIME(DSTAMP) DAYCOUNT(DCOUNT)     11690000
113600             TIME(TTIME) TIMESEP(':') NOHANDLE END-EXEC           11700000
113700        COMPUTE TSTAMP = ( DCOUNT * 1440 ) + (HH * 60) + MM       11710000
113800     END-IF.                                                      11720000
113900                                                                  11730000
114000***************************************************************   11740000
114100*  OPEN-NEW-SOCKET                                            *   11750000
114200*  PERFORM THE STEPS NECESSARY TO ESTABLISH A NEW SOCKET AND  *   11760000
114300*  INITIALIZE ALL ASSOCIATED VARIABLES REQUIRED.              *   11770000
114400***************************************************************   11780000
114500 3100-OPEN-NEW-SOCKET.                                            11790000
114600     PERFORM 3110-ACCEPT-SOCKET.                                  11800000
114700     IF EZRETC > 0 THEN                                           11810000
114800        PERFORM 3120-SET-SOCK-OPTIONS                             11820000
114900        IF EZRETC >= 0 THEN                                       11830000
115000           PERFORM 3130-SET-NON-BLOCKING                          11840000
115100           IF EZRETC >= 0 THEN                                    11850000
115200              PERFORM 3140-PREPARE-SOCKET                         11860000
115300              PERFORM 3150-CHECK-OPEN-SOCKETS                     11870000
115400           END-IF                                                 11880000
115500        END-IF                                                    11890000
115600     END-IF.                                                      11900000
115700***************************************************************   11910000
115800*  ACCEPT-SOCKET                                              *   11920000
115900* GET THE PORT AND IP ADDRESS OF THE CLIENT, AND THE NEW      *   11930000
116000* SOCKET NUMBER TO BE OPENED                                  *   11940000
116100***************************************************************   11950000
116200 3110-ACCEPT-SOCKET.                                              11960000
116300                                                                  11970000
116400* NEED TO ACCEPT THE SOCKET FIRST                                 11980000
116500                                                                  11990000
116600     MOVE 0 TO SOCKET-DESCRIPTOR.                                 12000000
116700     MOVE 0 TO EZERRNO.                                           12010000
116800     MOVE 0 TO EZRETC.                                            12020000
116900                                                                  12030000
117000     CALL 'EZASOKET' USING ACCEPT-CMD                             12040000
117100          SOCKET-DESCRIPTOR ACCEPT-NAME                           12050000
117200          EZERRNO EZRETC.                                         12060000
117300                                                                  12070000
117400* THE SOCKET NUMBER IS RETURNED IN EZRETC.                        12080000
117500* IF EZRETC IS < ZERO, THAT IS AN ERROR SO CALL 'DEAD-SOCKET'     12090000
117600                                                                  12100000
117700     IF EZRETC < 0 THEN                                           12110000
117800        MOVE EZERRNO TO ACCE-ERRNO                                12120000
117900        MOVE ACCEAPI-ERR TO MSG-AREA                              12130000
118000        MOVE 10 TO DISP-MSGS                                      12140000
118100        PERFORM 9000-WRITE-CICS                                   12150000
118200        MOVE '!ACCEPT ERROR - CLOSE SOCKETS AT 2 MIN' TO MSG-AREA 12160000
118300        PERFORM 9000-WRITE-CICS                                   12170000
118400        MOVE FULL-TIMEOUT-T2 TO DEAD-TIMEOUT                      12180000
118500        PERFORM 7050-DEAD-SOCKET                                  12190000
118600        MOVE FULL-TIMEOUT-T6 TO DEAD-TIMEOUT                      12200000
118700     END-IF.                                                      12210000
118800                                                                  12220000
118900* IF EZRETC IS ZERO, THAT IS INVALID, AS THE '0' SOCKET IS THE    12230000
119000* LISTENER, WHICH IS ALREADY OPEN.                                12240000
119100                                                                  12250000
119200     IF EZRETC = 0 THEN                                           12260000
119300        MOVE EZERRNO TO ACCE-ERRNO                                12270000
119400        MOVE ACCEAPI-ERR TO MSG-AREA                              12280000
119500        MOVE 10 TO DISP-MSGS                                      12290000
119600        PERFORM 9000-WRITE-CICS                                   12300000
119700        MOVE '!ACCEPT ERROR - RETURN CODE = 0' TO MSG-AREA        12310000
119800        PERFORM 9000-WRITE-CICS                                   12320000
119900     END-IF.                                                      12330000
120000                                                                  12340000
120100                                                                  12350000
120200                                                                  12360000
120300***************************************************************   12370000
120400*  SET-SOCK-OPTIONS                                           *   12380000
120500***************************************************************   12390000
120600 3120-SET-SOCK-OPTIONS.                                           12400000
120700*     ACCEPT-CMD RETURNED THE SOCKET NUMBER TO BE USED            12410000
120800*     SAVE IT IN SOCKNO.                                          12420000
120900     MOVE EZRETC TO SOCKNO.                                       12430000
121000     PERFORM 7030-VALID-IPADDR.                                   12440000
121100                                                                  12450000
121200     IF TBL-ST-AVAIL(SOCKNO) = 'N'                                12460000
121300        MOVE ' ACCEPT SOCKET NOT AVAILABLE ' TO MSG-AREA          12470000
121400        PERFORM 9000-WRITE-CICS                                   12480000
121500     END-IF.                                                      12490000
121600                                                                  12500000
121700     IF SOCKNO = USED-COUNTER                                     12510000
121800        MOVE USED-COUNTER TO OPEN-COUNTER                         12520000
121900        MOVE OPENCNT-MSG TO MSG-AREA                              12530000
122000        PERFORM 9000-WRITE-CICS                                   12540000
122100        ADD 100 TO USED-COUNTER                                   12550000
122200     END-IF.                                                      12560000
122300                                                                  12570000
122400     MOVE SOCKNO TO OPEN-SOCK-COUNT.                              12580000
122500     MOVE OPEN-SOCK-MSG TO MSG-AREA.                              12590000
122600     PERFORM 9000-WRITE-CICS.                                     12600000
122700                                                                  12610000
122800* THE ACCEPT-NAME INFO (FAMILY, PORT, IP ADDR) IS SAVED IN        12620000
122900* TBL-SOCKADDR-IN(SOCKNO)                                         12630000
123000                                                                  12640000
123100     MOVE ACCEPT-NAME TO TBL-SOCKADDR-IN(SOCKNO).                 12650000
123200                                                                  12660000
123300     MOVE SOCKNO TO SOCKID.                                       12670000
123400     MOVE 0 TO EZERRNO.                                           12680000
123500     MOVE 0 TO EZRETC.                                            12690000
123600     MOVE SSOREUSE TO SSOOPTNM.                                   12700000
123700     MOVE 'ISSUE SET SOCKET COMMAND' TO MSG-AREA.                 12710000
123800     PERFORM 9000-WRITE-CICS.                                     12720000
123900                                                                  12730000
124000* SET SOCKET OPTIONS                                              12740000
124100                                                                  12750000
124200     CALL 'EZASOKET' USING SETSOCK-CMD SOCKID                     12760000
124300           SSOOPTNM SSOOPVAL SSOLEN EZERRNO EZRETC.               12770000
124400                                                                  12780000
124500* IF RETURN CODE < 0 THEN CLOSE THE SOCKET                        12790000
124600     IF EZRETC < 0 THEN                                           12800000
124700        MOVE EZERRNO TO SETS-ERRNO                                12810000
124800        MOVE SETSAPI-ERR TO MSG-AREA                              12820000
124900        PERFORM 9000-WRITE-CICS                                   12830000
125000        MOVE 10 TO DISP-MSGS                                      12840000
125100        PERFORM 7060-CLOSE-SOCKET                                 12850000
125200     END-IF.                                                      12860000
125300                                                                  12870000
125400***************************************************************   12880000
125500*  SET-NON-BLOCKING                                           *   12890000
125600*  SET SOCKET TO NON-BLOCKING MODE.                           *   12900000
125700***************************************************************   12910000
125800 3130-SET-NON-BLOCKING.                                           12920000
125900*    PUT SOCKET INTO NON-BLOCKING MODE                            12930000
126000                                                                  12940000
126100     MOVE 4 TO FCNTL-COMMAND.                                     12950000
126200     MOVE 4 TO FCNTL-ARG.                                         12960000
126300     MOVE 0 TO EZERRNO.                                           12970000
126400     MOVE 0 TO EZRETC.                                            12980000
126500                                                                  12990000
126600     CALL 'EZASOKET' USING FCNTL-CMD SOCKID                       13000000
126700          FCNTL-COMMAND FCNTL-ARG EZERRNO EZRETC.                 13010000
126800                                                                  13020000
126900* IF RETURN CODE < 0 THEN CLOSE THE SOCKET                        13030000
127000     IF EZRETC < 0 THEN                                           13040000
127100        MOVE EZERRNO TO FCNT-ERRNO                                13050000
127200        MOVE FCNTAPI-ERR TO MSG-AREA                              13060000
127300        PERFORM 9000-WRITE-CICS                                   13070000
127400        MOVE 10 TO DISP-MSGS                                      13080000
127500        PERFORM 7060-CLOSE-SOCKET                                 13090000
127600     END-IF.                                                      13100000
127700                                                                  13110000
127800***************************************************************   13120000
127900*  PREPARE-SOCKET                                             *   13130000
128000*  INITIALIZE NEW SOCKET INTO BIT MAP, ASSIGN MATCHING NUMBER *   13140000
128100***************************************************************   13150000
128200 3140-PREPARE-SOCKET.                                             13160000
128300     IF EZRETC >= 0 THEN                                          13170000
128400*  SET THE READ AND EXCEPTION BIT MAPS FOR SELECT                 13180000
128500*                                                                 13190000
128600*  THE SELECT-RD-MASK IS CONVERTED FROM BITS TO CHAR AND THE      13200000
128700*  POSITION OF THIS SOCKET IS SET TO '1' SO THAT IT WILL BE       13210000
128800*  PICKED UP IN THE NEXT SOCKET SELECT COMMAND. THE BIT STRING    13220000
128900*  IS THEN CONVERTED BACK TO BITS FROM CHAR.                      13230000
129000                                                                  13240000
129100     MOVE SELECT-RD-MASK TO BIT-MASK.                             13250000
129200     PERFORM 7010-BIT-TO-CHAR.                                    13260000
129300                                                                  13270000
129400*                                                                 13280000
129500*    UN-COMMENT FOLLOWING LINES IF NEEDED FOR DEBUGING            13290000
129600*                                                                 13300000
129700*    MOVE CHAR-MASK TO MSG-AREA.                                  13310000
129800*    PERFORM 9000-WRITE-CICS.                                     13320000
129900                                                                  13330000
130000     COMPUTE WSCT = SOCKNO + 1.                                   13340000
130100     MOVE '1' TO CHAR-ENTRY(WSCT).                                13350000
130200                                                                  13360000
130300*                                                                 13370000
130400*    UN-COMMENT FOLLOWING LINES IF NEEDED FOR DEBUGING            13380000
130500*                                                                 13390000
130600*    MOVE CHAR-MASK TO MSG-AREA.                                  13400000
130700*    PERFORM 9000-WRITE-CICS.                                     13410000
130800                                                                  13420000
130900     PERFORM 7000-CHAR-TO-BIT.                                    13430000
131000                                                                  13440000
131100     MOVE BIT-MASK TO SELECT-RD-MASK.                             13450000
131200*    MOVE BIT-MASK TO SELECT-EX-MASK.                             13460000
131300* A TRACE MESSAGE                                                 13470000
131400     IF DISP-MSGS > 0                                             13480000
131500       MOVE SOCKNO TO ASSG-COUNT                                  13490000
131600       MOVE ASSG-ERR-MSG TO MSG-AREA                              13500000
131700       PERFORM 9000-WRITE-CICS                                    13510000
131800     END-IF.                                                      13520000
131900                                                                  13530000
132000* SET READ BIT FOR THIS NEW SOCKET TO ZERO                        13540000
132100     MOVE '0' TO CHAR-MASK1(WSCT:1).                              13550000
132200* SAVE TIMESTAMP, MATCHING NUMBER,                                13560000
132300* AND SET ST-AVAIL TO 'NO' FOR NEWLY OPENED SOCKET.               13570000
132400     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           13580000
132500     MOVE MATCHING-NUMB TO TBL-ST-MATCHING(SOCKNO).               13590000
132600     MOVE 'N' TO TBL-ST-AVAIL(SOCKNO).                            13600000
132700                                                                  13610000
132800* RESET TBL-DATA-CNT WHEN OPENING A SOCKET                        13620000
132900* TBL-DATA-CNT IS USED TO STORE THE LENGTH OF THE DATA IN         13630000
133000* THE BUFFER. FOR A NEW SOCKET, THERE IS NO DATA YET.             13640000
133100     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              13650000
133200*                                                                 13660000
133300*    DISPLAY MATCHING DATA IN CICS LOG                            13670000
133400     IF DISP-MSGS > 0                                             13680000
133500       MOVE SOCKNO TO MATCHING-LOG-A-STORE                        13690000
133600       MOVE MATCHING-NUMB TO MATCHING-LOG-A-NUMB                  13700000
133700       MOVE MATCHING-LOG-AREA TO MSG-AREA                         13710000
133800       PERFORM 9000-WRITE-CICS                                    13720000
133900     END-IF.                                                      13730000
134000                                                                  13740000
134100     ADD 1 TO MATCHING-NUMB.                                      13750000
134200     IF MATCHING-NUMB > 99999990 THEN                             13760000
134300        MOVE 1 TO MATCHING-NUMB                                   13770000
134400     END-IF.                                                      13780000
134500                                                                  13790000
134600                                                                  13800000
134700************************************************************      13810000
134800*  CHECK-OPEN-SOCKETS.                                     *      13820000
134900*  THIS ROUTE IS CALLED WHENEVER A SOCKET IS OPENED.  IT   *      13830000
135000*  CHECKS TO SEE IF AN EXISTING SOCKET IS OPEN WITH THE    *      13840000
135100*  SAME TCP/IP ADDRESS AND PORT NUMBER.                    *      13850000
135200*  IF ONE IS FOUND, CLOSE IT.                              *      13860000
135300************************************************************      13870000
135400 3150-CHECK-OPEN-SOCKETS.                                         13880000
135500* A TRACE MESSAGE                                                 13890000
135600     IF DISP-MSGS > 0                                             13900000
135700       MOVE 'PERFORMING CHECK-OPEN-SOCKETS ROUTINE' TO MSG-AREA   13910000
135800       PERFORM 9000-WRITE-CICS                                    13920000
135900     END-IF.                                                      13930000
136000                                                                  13940000
136100     MOVE SOCKNO TO SAV-SOCKNO.                                   13950000
136200                                                                  13960000
136300     PERFORM VARYING TSOCKET FROM 1 BY 1                          13970000
136400              UNTIL TSOCKET > MAX-SOCKETS-LESS1                   13980000
136500        IF TBL-ST-AVAIL(TSOCKET) = 'N' THEN                       13990000
136600          IF TSOCKET NOT = SAV-SOCKNO THEN                        14000000
136700            IF TBL-SIN-ADDR(TSOCKET) = TBL-SIN-ADDR(SAV-SOCKNO)   14010000
136800               AND TBL-SIN-PORT(TSOCKET) =                        14020000
136900                                    TBL-SIN-PORT(SAV-SOCKNO)      14030000
137000                 THEN                                             14040000
137100                 MOVE TSOCKET TO SEARCH-MSG-COUNT2                14050000
137200                 MOVE SEARCH-MSG-ERR2 TO MSG-AREA                 14060000
137300                 PERFORM 9000-WRITE-CICS                          14070000
137400                 MOVE TSOCKET TO SOCKNO                           14080000
137500                 PERFORM 7060-CLOSE-SOCKET                        14090000
137600              END-IF                                              14100000
137700           END-IF                                                 14110000
137800        END-IF                                                    14120000
137900     END-PERFORM.                                                 14130000
138000     MOVE SAV-SOCKNO TO SOCKNO.                                   14140000
138100                                                                  14150000
138200                                                                  14160000
138300                                                                  14170000
138400***************************************************************   14180000
138500* RECEIVE-DATA                                                *   14190000
138600* READ A MESSAGE PACKET FROM A SOCKET.                        *   14200000
138700* BEFORE READING, SAVE MESSAGE LENGTH FROM PRIOR SOCKET READ  *   14210000
138800* IN CASE THERE WAS A PARTIAL PACKET THE LAST TIME YOU READ.  *   14220000
138900* NOTE: SOCKNO = THE NUMBER OF THE SOCKET NOW BEING PROCESSED *   14230000
139000***************************************************************   14240000
139100 4000-RECEIVE-DATA.                                               14250000
139200                                                                  14260000
139300* A TRACE MESSAGE SHOWING SOCKET # AND IP ADDRESS                 14270000
139400     IF DISP-MSGS > 0                                             14280000
139500       MOVE SOCKNO TO READ-SOCK1-COUNT                            14290000
139600       MOVE READ-SOCK1-MSG TO MSG-AREA                            14300000
139700       MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME                14310000
139800       PERFORM 7040-CONVERT-IP-ADDR                               14320000
139900       MOVE CIP-1 TO OCTET                                        14330000
140000       MOVE OCTET TO MSG-AREA(34:3)                               14340000
140100       MOVE '.' TO MSG-AREA(37:1)                                 14350000
140200       MOVE CIP-2 TO OCTET                                        14360000
140300       MOVE OCTET TO MSG-AREA(38:3)                               14370000
140400       MOVE '.' TO MSG-AREA(41:1)                                 14380000
140500       MOVE CIP-3 TO OCTET                                        14390000
140600       MOVE OCTET TO MSG-AREA(42:3)                               14400000
140700       MOVE '.' TO MSG-AREA(45:1)                                 14410000
140800       MOVE CIP-4 TO OCTET                                        14420000
140900       MOVE OCTET TO MSG-AREA(46:3)                               14430000
141000       PERFORM 9000-WRITE-CICS                                    14440000
141100     END-IF.                                                      14450000
141200                                                                  14460000
141300*                                                             *   14470000
141400*  TBL-DATA-CNT = LENGTH OF MESSAGE + 1.                      *   14480000
141500*                                                             *   14490000
141600*  FOR A NEW MESSAGE, TBL-DATA-CNT WAS INITIALIZED AT 1.      *   14500000
141700*  IF THERE WAS A PARTIAL MESSAGE READ PREVIOUSLY,            *   14510000
141800*  TBL-DATA-CNT = LENGTH OF THE PARTIAL MESSAGE + 1.          *   14520000
141900*                                                             *   14530000
142000     MOVE TBL-DATA-CNT(SOCKNO) TO PV-PRTL-MSG-LEN.                14540000
142100     MOVE SOCKNO TO SOCKID.                                       14550000
142200     MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME.                 14560000
142300     MOVE 0 TO RECV-FLAG.                                         14570000
142400     MOVE SPACES TO TCP-BUF.                                      14580000
142500     MOVE 0 TO ERRNO.                                             14590000
142600     MOVE 0 TO RETCODE.                                           14600000
142700     MOVE 0 TO PV-REC-PACKET-LEN.                                 14610000
142800****************************************************************  14620000
142900* READ DATA FROM SOCKET                                        *  14630000
143000* HERE WE ARE ISSUING THE RECEIVE COMMAND.  ALL SOCKETS SHOULD *  14640000
143100* BE IN NON-BLOCKING MODE.                                     *  14650000
143200*                                                              *  14660000
143300* IF RETCODE IS RETURNED WITH A POSITIVE VALUE THEN THAT VALUE *  14670000
143400* REPRESENTS THE NUMBER OF BYTES THAT WE HAVE RECEIVED AND WE  *  14680000
143500* WILL CONTINUE TO PROCESS THE DATA.                           *  14690000
143600*                                                              *  14700000
143700* The DATA received is in TCP-BUF.                             *  14710000
143800* PV-REC-PACKET-LEN tells how many bytes of data were received *  14720000
143900* in this data-packet.                                         *  14730000
144000****************************************************************  14740000
144100     CALL 'EZASOKET' USING RECVFROM-CMD SOCKID                    14750000
144200           RECV-FLAG TCP-BUF-SIZE TCP-BUF ACCEPT-NAME             14760000
144300           ERRNO RETCODE.                                         14770000
144400                                                                  14780000
144500* A TRACE MESSAGE SHOWING THE ASCII MESSAGE RECEIVED              14790000
144600     IF DISP-MSGS > 0                                             14800000
144700       MOVE TCP-BUF TO MSG-AREA                                   14810000
144800       PERFORM 9000-WRITE-CICS                                    14820000
144700       MOVE TCP-BUF(90:55) TO MSG-AREA                            14830028
144800       PERFORM 9000-WRITE-CICS                                    14840028
144900     END-IF.                                                      14850000
145000*                                                                 14860000
145100* INTERPRET RETURN CODE AS FOLLOWS:                               14870000
145200*   RETCODE > 0 THE VALUE IS HOW MANY BYTES WERE RECEIVED         14880000
145300*   RETCODE = 0 MEANS THE SOCKET TIMED OUT AND SHOULD BE CLOSED   14890000
145400*   RETCODE < 0 MEANS THERE WAS AN ERROR                          14900000
145500*                                                                 14910000
145600     EVALUATE TRUE                                                14920000
145700       WHEN RETCODE > 0                                           14930000
145800         MOVE RETCODE TO PV-REC-PACKET-LEN                        14940000
145900         PERFORM 4100-PROCESS-RECEIVED-DATA                       14950000
146000       WHEN RETCODE = 0                                           14960000
146100         MOVE '**TCPRECV RETCODE = 0' TO MSG-AREA                 14970000
146200         PERFORM 9000-WRITE-CICS                                  14980000
146300         MOVE 'ER-CODE' TO FIELDXX                                14990000
146400         MOVE ERRNO TO ERR-CODE                                   15000000
146500         MOVE 'RET-CD=' TO FIELDYY                                15010000
146600         MOVE RETCODE TO DIS-RET-CODE                             15020000
146700         MOVE 'RECVRDS' TO CALL-NO                                15030000
146800         PERFORM 9000-WRITE-CICS                                  15040000
146900         PERFORM 7060-CLOSE-SOCKET                                15050000
147000       WHEN RETCODE < 0                                           15060000
147100         PERFORM 4990-ERROR-ON-RECEIVE                            15070000
147200     END-EVALUATE.                                                15080000
147300                                                                  15090000
147400****************************************************************  15100000
147500* PROCESS-RECEIVED-DATA                                        *  15110000
147600* In this procedure, the data received in TCP-BUF will be      *  15120000
147700* broken up one message at a time and sent to the correct      *  15130000
147800* authorization program until there are no more messages left  *  15140000
147900* in TCP-BUF, or there is a partial message left.              *  15150000
148000*                                                              *  15160000
148100* More explaination:                                           *  15170000
148200* Each read of a socket will get as much data that fits into   *  15180000
148300* the TCP-buffer. The buffer is large enough to hold up to 10  *  15190000
148400* average-size messages.                                       *  15200000
148500* Every INCOMM    message starts with a 2 BYTE HEX value that  *  15210001
148600* tells you the message length (NOT INCLUDING THOSE 2 BYTES).  *  15220000
148700* In this procedure, the data is parsed into multiple messages *  15230000
148800* based on these header lengths.                               *  15240000
148900* If there is a partial message at the end of the data, it will*  15250000
149000* be saved in TBL-DATA and the rest of the message will be     *  15260000
149100* picked up the next time the socket is read.                  *  15270000
149200****************************************************************  15280000
149300                                                                  15290000
149400 4100-PROCESS-RECEIVED-DATA.                                      15300000
149500                                                                  15310000
149600* A TRACE MESSAGE SHOWING THE BYTE COUNTS OF THE OLD PARTIAL      15320000
149700* MESSAGE AND THE NEW DATA PACKET THAT WAS READ IN.               15330000
149800     IF DISP-MSGS > 0                                             15340000
149900       IF PV-PRTL-MSG-LEN > 1 THEN                                15350000
150000        MOVE PV-PRTL-MSG-LEN TO PART-CNT-1                        15360000
150100        MOVE PV-REC-PACKET-LEN TO PART-CNT-2                      15370000
150200        MOVE PART-CNT-MSG TO MSG-AREA                             15380000
150300        PERFORM 9000-WRITE-CICS                                   15390000
150400       END-IF                                                     15400000
150500     END-IF.                                                      15410000
150600                                                                  15420000
150700* IF THERE WAS A PARTIAL MESSAGE, USE THE HEADER LENGTH           15430000
150800* FROM THE OLD PARTIAL MESSAGE,                                   15440000
150900* OTHERWISE USE THE HEADER LENGTH FROM THE NEW MESSAGE YOU JUST   15450000
151000* RECEIVED.                                                       15460000
151100     IF PV-PRTL-MSG-LEN > 1 THEN                                  15470000
151200       MOVE TBL-DATA-LEN-HEX(SOCKNO) TO PV-CONVRT-MSGLEN-HEX      15480000
151300     ELSE                                                         15490000
151400       MOVE TCP-MSG-LEN TO PV-CONVRT-MSGLEN-HEX                   15500000
151500     END-IF.                                                      15510000
151600                                                                  15520000
151700* CONVERT THE MESSAGE HEADER LENGTH FROM HEX TO INTEGER.          15530000
151800     PERFORM 7900-READ-HEADER-LENGTH.                             15540000
151900                                                                  15550000
152000     COMPUTE PV-TO-PARSE-LEN =                                    15560000
152100             PV-REC-PACKET-LEN + PV-PRTL-MSG-LEN - 1.             15570000
152200                                                                  15580000
152300* CHECK FOR HEADER ERROR                                          15590000
152400     IF HEADER-ERROR = 'Y' THEN                                   15600000
              STRING '!ERROR IN HEADER. LEN='                           15610000
152500        PV-MSG-LEN-WOHDR DELIMITED BY SIZE INTO MSG-AREA          15620000
              END-STRING                                                15630000
152600        PERFORM 9000-WRITE-CICS                                   15640000
152700        MOVE '!CLOSING SOCKET.' TO MSG-AREA                       15650000
152800        PERFORM 9000-WRITE-CICS                                   15660000
152900        MOVE 5 TO DISP-MSGS                                       15670000
153000        PERFORM 7060-CLOSE-SOCKET                                 15680000
153100     ELSE                                                         15690000
153200        IF PV-MSG-LEN-WHDR <= PV-TO-PARSE-LEN                     15700000
153300* YOU HAVE AT LEAST 1 GOOD MESSAGE.                               15710000
153400* MOVE THE PARTIAL AND THE NEW MESSAGE INTO THE PARSER            15720000
153500* AND PROCESS THE MESSAGES.                                       15730000
153600           MOVE SPACES TO MSG-PARSER                              15740000
153700* MOVE THE OLD PARTIAL MESSAGE INTO THE PARSER FIRST              15750000
153800           MOVE TBL-DATA(SOCKNO) TO MSG-PARSER                    15760000
153900* THEN APPEND THE NEW DATA PACKET INTO THE PARSER                 15770000
154000           MOVE TCP-BUF TO                                        15780000
154100                MSG-PARSER(PV-PRTL-MSG-LEN:PV-REC-PACKET-LEN)     15790000
154200           PERFORM 4150-PARSE-MESSAGE                             15800000
154300        ELSE                                                      15810000
154400* YOU HAVE A PARTIAL MESSAGE.                                     15820000
154500* IF THIS IS THE FIRST PARTIAL, SAVE IT, OTHERWISE, CLOSE THE     15830000
154600* SOCKET, BECAUSE IF YOU GOT 2 PARTIAL MESSAGES IN A ROW,         15840000
154700* THERE IS PROBABLY SOMETHING WRONG WITH THE CONNECTION.          15850000
154800           IF PV-PRTL-MSG-LEN = 1 THEN                            15860000
154900              MOVE MSG-PARSER TO TBL-DATA(SOCKNO)                 15870000
155000              COMPUTE TBL-DATA-CNT(SOCKNO) =                      15880000
155100                       PV-PRTL-MSG-LEN + PV-REC-PACKET-LEN        15890000
155200           ELSE                                                   15900000
155300              MOVE '!2ND PARTIAL MESSAGE IN A ROW' TO MSG-AREA    15910000
155400              PERFORM 9000-WRITE-CICS                             15920000
155500              MOVE '!CLOSING SOCKET.' TO MSG-AREA                 15930000
155600              PERFORM 9000-WRITE-CICS                             15940000
155700              MOVE 5 TO DISP-MSGS                                 15950000
155800              PERFORM 7060-CLOSE-SOCKET                           15960000
155900           END-IF                                                 15970000
156000        END-IF                                                    15980000
156100     END-IF.                                                      15990000
156200                                                                  16000000
156300****************************************************************  16010000
156400* PARSE-MESSAGE.                                               *  16020000
156500* IF THERE ARE MULTIPLE MESSAGES IN THE DATA YOU RECEVIED,     *  16030000
156600* BREAK THEM UP AND PROCESS EACH ONE INDIVIDUALLY.             *  16040000
156700* (SEND EACH ONE TO ITS AUTHORIZER PROGRAM)                       16050000
156800* SAVE ANY LEFTOVER PARTIAL MESSAGE IN THE TBL-DATA ARRAY.     *  16060000
156900****************************************************************  16070000
157000 4150-PARSE-MESSAGE.                                              16080000
157100     MOVE 1 TO PRSR-CT.                                           16090000
157200     MOVE 'N' TO SW-END-OF-PACKET.                                16100000
157300* PARSING LOOP                                                    16110000
157400* PROCESS EACH MESSAGE IN THE RECEIVED DATA PACKET UNTIL          16120000
157500* YOU ARE AT THE END OF THE DATA PACKET.                          16130000
157600     PERFORM UNTIL SW-END-OF-PACKET = 'Y'                         16140000
157700* MOVE ONE COMPLETE MESSAGE TO TBL-DATA TO BE PROCESSED           16150000
157800       MOVE MSG-PARSER(PRSR-CT:PV-MSG-LEN-WHDR)                   16160000
157900            TO TBL-DATA(SOCKNO)                                   16170000
158000* PROCESS THIS MESSAGE                                            16180000
158100       MOVE 1 TO TBL-DATA-CNT(SOCKNO)                             16190000
158200       PERFORM 4200-FULL-MESSAGE-CREATED                          16200000
158300* CALCULATE START OF NEXT MESSAGE                                 16210000
158400       ADD PV-MSG-LEN-WHDR TO PRSR-CT                             16220000
158500       COMPUTE PRSR-CT-1 = PRSR-CT - 1                            16230000
158600* CHECK IF YOU ARE AT THE END OF THE DATA                         16240000
158700       IF PRSR-CT-1 = PV-TO-PARSE-LEN THEN                        16250000
158800         MOVE 'Y' TO SW-END-OF-PACKET                             16260000
158900       ELSE                                                       16270000
159000* IF NOT END OF MESSAGE, THEN CONVERT NEXT HEADER TO INTEGER      16280000
159100         PERFORM 4991-MULTIPLE-MSG                                16290000
159200         MOVE MSG-PARSER(PRSR-CT:2) TO PV-CONVRT-MSGLEN-HEX       16300000
159300         PERFORM 7900-READ-HEADER-LENGTH                          16310000
159400* CHECK FOR VALID HEADER LENGTH                                   16320000
159500         IF HEADER-ERROR = 'Y' THEN                               16330000
159600* BAD HEADER                                                      16340000
                 STRING '!ERROR IN HEADER. LEN='                        16350000
152500             PV-MSG-LEN-WOHDR DELIMITED BY SIZE INTO MSG-AREA     16360000
                 END-STRING                                             16370000
159800           PERFORM 9000-WRITE-CICS                                16380000
159900           MOVE '!CLOSING SOCKET.' TO MSG-AREA                    16390000
160000           PERFORM 9000-WRITE-CICS                                16400000
160100           PERFORM 7060-CLOSE-SOCKET                              16410000
160200           MOVE 'Y' TO SW-END-OF-PACKET                           16420000
160300         ELSE                                                     16430000
160400* GOOD HEADER, CALCULATE END OF NEXT MESSAGE                      16440000
160500           COMPUTE WS-NEWLEN = PV-MSG-LEN-WHDR + PRSR-CT-1        16450000
160600* CHECK FOR PARTIAL MESSAGE                                       16460000
160700           IF WS-NEWLEN > PV-TO-PARSE-LEN THEN                    16470000
160800* PARTIAL MESSAGE IS LEFT, SAVE IT                                16480000
160900             PERFORM 4992-PARTIAL-MSG                             16490000
161000             COMPUTE TBL-DATA-CNT(SOCKNO) =                       16500000
161100                     PV-TO-PARSE-LEN - PRSR-CT                    16510000
161200             MOVE MSG-PARSER(PRSR-CT:PV-MSG-LEN-WHDR)             16520000
161300                  TO TBL-DATA(SOCKNO)                             16530000
161400             MOVE 'Y' TO SW-END-OF-PACKET                         16540000
161500* END IF CHECK FOR PARTIAL MESSAGE                                16550000
161600           END-IF                                                 16560000
161700* END IF CHECK FOR VALID HEADER LENGTH                            16570000
161800         END-IF                                                   16580000
161900* END IF CHECK IF YOU ARE AT THE END OF THE DATA                  16590000
162000       END-IF                                                     16600000
162100* IF ANOTHER MESSAGE IS LEFT LOOP WILL BE PERFORMED AGAIN         16610000
162200     END-PERFORM.                                                 16620000
162300                                                                  16630000
162400****************************************************************  16640000
162500*  FULL-MESSAGE-CREATED                                        *  16650000
162600* REQUEST HAS BEEN RECEIVED AND IS READY TO BE SENT TO CHILD.  *  16660000
162700* CONVERT ENTIRE MESSAGE TO EBCDIC AND PASS IT TO THE CHILD    *  16670000
162800* PROGRAM.                                                     *  16680000
162900****************************************************************  16690000
163000 4200-FULL-MESSAGE-CREATED.                                       16700000
163100* A TRACE MESSAGE                                                 16710000
163200     IF DISP-MSGS > 0                                             16720000
163300       MOVE '**FULL-MESSAGE-CREATED ' TO MSG-AREA                 16730000
163400       PERFORM 9000-WRITE-CICS                                    16740000
163500     END-IF.                                                      16750000
163600                                                                  16760000
163700* THE HEADER HEX LENGTH IS NOT CONVERTED TO EBCDIC                16770000
163800     MOVE PV-MSG-LEN-WOHDR TO PV-CONVERT-LEN.                     16780000
163900                                                                  16790000
164000* A TRACE MESSAGE                                                 16800000
164100     IF DISP-MSGS > 0                                             16810000
164200          MOVE 'CONVERT TO EBCDIC LEN=' TO MSG-AREA               16820000
164300          MOVE PV-CONVERT-LEN TO MSG-AREA(22:8)                   16830000
164400          MOVE ' SOCKNO=' TO MSG-AREA(30:8)                       16840000
164500          MOVE SOCKNO TO MSG-AREA(38:8)                           16850000
164600          PERFORM 9000-WRITE-CICS                                 16860000
164700     END-IF.                                                      16870000
164800*                                                                 16880000
164900** CONVERT MESSAGE FROM ASCII TO EBCDIC **                        16890000
                                                                        16900020
165100     CALL 'EZACIC05' USING                                        16910020
165200          TOEBCDIC-TOKEN TBL-DATA-REQ(SOCKNO) PV-CONVERT-LEN.     16920026
165300                                                                  16930020
165400     MOVE TBL-DATA(SOCKNO) TO TCP-BUF.                            16940026
                                                                        16950024
165500*                                                                 16960000
165600** CHECK HEADER FOR THE TRAN CODE TO CONFIRM VALID DATA   *       16970009
165700*                                                                 16980000
           INITIALIZE UT-VERIFY-AUTH-MESSAGE.                           16990000
           MOVE TCP-MESSAGE TO UT-VERIFY-AUTH-MESSAGE.                  17000000
167400     IF NOT UT-VERIFY-GOOD-HEADER                                 17010000
167500        MOVE '!INVALID HEADER' TO MSG-AREA                        17020000
167600        PERFORM 9000-WRITE-CICS                                   17030000
167700        MOVE '!READ HEADER=' TO MSG-AREA                          17040000
167800        MOVE UT-VERIFY-HEADER TO MSG-AREA(1:4)                    17050007
167900        PERFORM 9000-WRITE-CICS                                   17060000
168000        PERFORM 7060-CLOSE-SOCKET                                 17070000
168100     ELSE                                                         17080000
168200*                                                                 17090000
168300* DETERMINE WHAT CICS TRANID TO START AND SAVE IT              *  17100000
168400* IN TBL-DATA-TRANID                                           *  17110000
168500*                                                              *  17120000
170100        MOVE CICS-TRANID-SV TO                                    17130000
170200                   TBL-DATA-TRANID(SOCKNO)                        17140000
170300        PERFORM 4300-PASS-TO-SV                                   17150000
171100     END-IF.                                                      17160000
171200                                                                  17170000
171300                                                                  17180000
171400                                                                  17190000
171500****************************************************************  17200000
171600*   PASS-TO-SV                                                 *  17210000
171700*  THIS MODULE WILL PASS THE REQUEST TO THE GIFT CARD AUTH     *  17220000
171800*  TRANSACTION AS DETERMINED IN PROCESS-RECEIVED-DATA AND      *  17230000
171900*  STORED IN TBL-DATA-TRANID.                                  *  17240000
172000****************************************************************  17250000
172100 4300-PASS-TO-SV.                                                 17260000
172200                                                                  17270000
172300* A TRACE MESSAGE                                                 17280000
172400     IF DISP-MSGS > 0                                             17290000
172500       MOVE '**SENDING TO CHILD TRANSACTION**' TO MSG-AREA        17300000
172600       PERFORM 9000-WRITE-CICS                                    17310000
173300     END-IF.                                                      17320000
173400                                                                  17330000
173500*    ADD 1 TO RECV-COUNT.                                         17340000
173600*    MOVE TBL-ST-MATCHING(SOCKNO) TO TCP-BUF-MATCHING.            17350000
173700     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           17360000
173800     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              17370000
173900     ADD 1 TO TBL-ST-RECV(SOCKNO).                                17380000
174000*                                                              *  17390000
174100* CICS-BUF-LEN IS ONLY THE LENGTH OF THE INCOMM    AUTH        *  17400001
174110* MESSAGE, INCLUDING THE 2 BYTE HEADER.                        *  17410000
174200* THE TOTAL LENGTH OF DATA SENT TO THE CHILD (CICS-DAT-LEN) IS:*  17420000
174300* MESSAGE LENGTH + 14 BYTES FOR LEN, MATCHING, AND Q INFO.     *  17430011
174400*                                                              *  17440000
174500     COMPUTE CICS-DAT-LEN = PV-MSG-LEN-WHDR + 13.                 17450033
174600     MOVE TBL-ST-MATCHING(SOCKNO) TO CICS-BUF-MATCHING.           17460011
174700     MOVE PV-MSG-LEN-WHDR TO CICS-BUF-LEN.                        17470000
174800     MOVE TCP-BUF TO CICS-BUF.                                    17480000
174900     MOVE TCPIP-CICS-QUEUE TO CICS-BUF-LISTENER-Q.                17490000
175000                                                                  17500000
175000                                                                  17510023
175100* A TRACE MESSAGE                                                 17520000
175200     IF DISP-MSGS > 0                                             17530000
175300       MOVE 'T=????      ' TO MSG-AREA                            17540000
175400       MOVE CICS-DAT-LEN TO MSG-AREA(8:54)                        17550011
175500       MOVE CICS-BUF-OUT TO MSG-AREA(14:37)                       17560011
175600       MOVE TBL-DATA-TRANID(SOCKNO) TO MSG-AREA(3:4)              17570000
175700       PERFORM 9000-WRITE-CICS                                    17580000
175800     END-IF.                                                      17590000
175900                                                                  17600000
176000     EXEC CICS START TRANSID (TBL-DATA-TRANID(SOCKNO))            17610000
176100                     FROM (CICS-BUF-OUT)                          17620000
176200                     LENGTH (CICS-DAT-LEN)                        17630027
176300                     RESP(PV-RC)                                  17640000
176400     END-EXEC.                                                    17650000
176500                                                                  17660000
176600     IF PV-RC NOT = 0 THEN                                        17670000
176700        MOVE '!INVALID TRANSID STARTED' TO MSG-AREA               17680000
176800        MOVE TBL-DATA-TRANID(SOCKNO) TO MSG-AREA(27:4)            17690000
176900        MOVE 10 TO DISP-MSGS                                      17700000
177000        PERFORM 9000-WRITE-CICS                                   17710000
177100     END-IF.                                                      17720000
177200     IF DISP-MSGS > 0 THEN                                        17730000
177300        PERFORM VARYING WSCT FROM 1 BY 50                         17740000
177400                 UNTIL WSCT > CICS-DAT-LEN                        17750000
177500           MOVE CICS-BUF-OUT(WSCT:50) TO MSG-AREA                 17760000
177600           PERFORM 9000-WRITE-CICS                                17770000
177700        END-PERFORM                                               17780000
177800     END-IF.                                                      17790000
177900     MOVE 'TRANSACTION STARTED' TO MSG-AREA.                      17800000
178000     PERFORM 9000-WRITE-CICS.                                     17810000
178100                                                                  17820000
178200***************************************************************   17830000
178300*  ERROR-ON-RECEIVE                                           *   17840000
178400*  THE RETURN CODE FROM THE RECEIVE COMMAND WAS NEGATIVE,         17850000
178500*  REPORT THE ERROR                                           *   17860000
178600***************************************************************   17870000
178700 4990-ERROR-ON-RECEIVE.                                           17880000
178800*        KNOWN ERRORS:                                            17890000
178900*          1027 = NO SUCH SOCKET EXISTS.                          17900000
179000*          35   = THERE WAS NO DATA TO READ.                      17910000
179100*          9    = AN INCORRECT SOCKET DESCRIPTOR WAS SPECIFIED    17920000
179200     EVALUATE TRUE                                                17930000
179300       WHEN ERRNO = 1027                                          17940000
179400        MOVE '!ERRNO = 1027: CLOSE IX=' TO MSG-AREA               17950000
179500        MOVE SOCKNO TO DSPLY8                                     17960000
179600        MOVE DSPLY8   TO MSG-AREA(25:8)                           17970000
179700        PERFORM 7040-CONVERT-IP-ADDR                              17980000
179800        MOVE CIP-1 TO OCTET                                       17990000
179900        MOVE OCTET TO MSG-AREA(34:3)                              18000000
180000        MOVE '.'  TO MSG-AREA(37:1)                               18010000
180100        MOVE CIP-2 TO OCTET                                       18020000
180200        MOVE OCTET TO MSG-AREA(38:3)                              18030000
180300        MOVE '.'  TO MSG-AREA(41:1)                               18040000
180400        MOVE CIP-3 TO OCTET                                       18050000
180500        MOVE OCTET TO MSG-AREA(42:3)                              18060000
180600        MOVE '.'  TO MSG-AREA(45:1)                               18070000
180700        MOVE CIP-4 TO OCTET                                       18080000
180800        MOVE OCTET TO MSG-AREA(46:3)                              18090000
180900        PERFORM 9000-WRITE-CICS                                   18100000
181000        MOVE 5  TO DISP-MSGS                                      18110000
181100        PERFORM 7060-CLOSE-SOCKET                                 18120000
181200       WHEN ERRNO = 35                                            18130000
181300        MOVE '!ERRNO = 35 ON RECVFROM CMD' TO MSG-AREA            18140000
181400        PERFORM 9000-WRITE-CICS                                   18150000
181500       WHEN ERRNO = 9                                             18160000
181600        MOVE '!ERRNO = 9 ON RECVFROM CMD' TO MSG-AREA             18170000
181700        PERFORM 9000-WRITE-CICS                                   18180000
181800       WHEN OTHER                                                 18190000
181900        MOVE '!ERR ON RECVFROM CMD' TO MSG-AREA                   18200000
182000        PERFORM 9000-WRITE-CICS                                   18210000
182100        MOVE 'ER-CODE' TO FIELDXX                                 18220000
182200        MOVE ERRNO TO ERR-CODE                                    18230000
182300        MOVE 'RET-CD=' TO FIELDYY                                 18240000
182400        MOVE RETCODE TO DIS-RET-CODE                              18250000
182500        MOVE 'RECV' TO CALL-NO                                    18260000
182600        PERFORM 9000-WRITE-CICS                                   18270000
182700        MOVE 5 TO DISP-MSGS                                       18280000
182800        PERFORM 7060-CLOSE-SOCKET                                 18290000
182900     END-EVALUATE.                                                18300000
183000                                                                  18310000
183100***************************************************************   18320000
183200*  MULTIPLE-MSG.                                              *   18330000
183300* DISPLAY A MESSAGE WHEN THERE IS A MULTIPLE-MESSAGE PACKET.  *   18340000
183400* THIS SHOULD BE FOR TESTING PURPOSES ONLY.                   *   18350000
183500***************************************************************   18360000
183600 4991-MULTIPLE-MSG.                                               18370000
183700     MOVE '!*RECEIVE EXTRA FROM IX=' TO MSG-AREA.                 18380014
183800     MOVE SOCKNO TO DSPLY8.                                       18390014
183900     MOVE DSPLY8   TO MSG-AREA(25:8).                             18400014
184000     PERFORM 7040-CONVERT-IP-ADDR.                                18410014
184100     MOVE CIP-1 TO OCTET.                                         18420014
184200     MOVE OCTET TO MSG-AREA(34:3).                                18430014
184300     MOVE '.'  TO MSG-AREA(37:1).                                 18440014
184400     MOVE CIP-2 TO OCTET.                                         18450014
184500     MOVE OCTET TO MSG-AREA(38:3).                                18460014
184600     MOVE '.'  TO MSG-AREA(41:1).                                 18470014
184700     MOVE CIP-3 TO OCTET.                                         18480014
184800     MOVE OCTET TO MSG-AREA(42:3).                                18490014
184900     MOVE '.'  TO MSG-AREA(45:1).                                 18500014
185000     MOVE CIP-4 TO OCTET.                                         18510014
185100     MOVE OCTET TO MSG-AREA(46:3).                                18520014
185200     PERFORM 9000-WRITE-CICS.                                     18530014
185300     MOVE ' *RECEIVE MORE THAN EXPECTED ' TO MSG-AREA.            18540014
185400                                                                  18550000
185500     MOVE MSG-PARSER(1:18) TO MSG-AREA(30:18).                    18560014
185600     PERFORM 9000-WRITE-CICS.                                     18570014
185700     MOVE '!' TO MSG-AREA.                                        18580014
185800     MOVE MSG-PARSER(19:64) TO MSG-AREA(2:45).                    18590014
185900     PERFORM 9000-WRITE-CICS.                                     18600014
186000     MOVE '!' TO MSG-AREA.                                        18610014
186100     MOVE MSG-PARSER(65:110) TO MSG-AREA(2:45).                   18620014
186200     PERFORM 9000-WRITE-CICS.                                     18630014
186300                                                                  18640000
186400** IF YOU'RE RUNNING A STRESS TEST, UNCOMMENT THIS DISPLAY        18650000
186500** TO MONITOR FOR MULTIPLE-PACKETS. MULTIPLES ARE TO BE           18660000
186600** EXPECTED, ARE NORMAL, AND ARE HANDLED BY THIS PROGRAM.         18670000
186700     MOVE '!*READ L= ' TO MSG-AREA.                               18680014
186800     MOVE SAV-MSG-LEN TO DISP-MAX.                                18690014
186900     MOVE DISP-MAX TO MSG-AREA(11:4).                             18700014
187000     MOVE ',HEADER COUNT=' TO MSG-AREA(15:14).                    18710014
187100     MOVE PV-MSG-LEN-WHDR TO DISP-MAX.                            18720014
187200     MOVE DISP-MAX TO MSG-AREA(29:4).                             18730014
187300     MOVE ',RETCODE=' TO MSG-AREA(33:9).                          18740014
187400     MOVE RETCODE TO DISP-MAX.                                    18750014
187500     MOVE DISP-MAX TO MSG-AREA(42:4).                             18760014
187600     PERFORM 9000-WRITE-CICS.                                     18770014
187700                                                                  18780000
187800*                                                                 18790000
187900** CONVERT MESSAGE FROM ASCII TO EBCDIC FOR TEST DISPLAY*         18800000
188000*                                                                 18810000
188100*    MOVE MSG-PARSER TO TEMP-DISPLAY-MSG.                         18820000
188200*    MOVE 1000 TO PV-CONVERT-LEN.                                 18830000
188300*    CALL 'EZACIC05' USING TOEBCDIC-TOKEN TEMP-DISPLAY-MSG        18840000
188400*                    PV-CONVERT-LEN.                              18850000
188500* Display message                                                 18860000
188600     MOVE ' REC=' TO MSG-AREA.                                    18870014
188700     MOVE TEMP-DISPLAY-MSG(1:44) TO MSG-AREA(6:44).               18880014
188800     PERFORM 9000-WRITE-CICS.                                     18890014
188900     MOVE ' ' TO MSG-AREA.                                        18900014
189000     MOVE TEMP-DISPLAY-MSG(45:49) TO MSG-AREA(2:49).              18910014
189100     PERFORM 9000-WRITE-CICS.                                     18920014
189200     MOVE ' ' TO MSG-AREA.                                        18930014
189300     MOVE TEMP-DISPLAY-MSG(94:49) TO MSG-AREA(2:49).              18940014
189400     PERFORM 9000-WRITE-CICS.                                     18950014
189500     MOVE ' ' TO MSG-AREA.                                        18960014
189600     MOVE TEMP-DISPLAY-MSG(143:49) TO MSG-AREA(2:49).             18970014
189700     PERFORM 9000-WRITE-CICS.                                     18980014
189800     MOVE ' ' TO MSG-AREA.                                        18990014
189900     MOVE TEMP-DISPLAY-MSG(192:49) TO MSG-AREA(2:49).             19000014
190000     PERFORM 9000-WRITE-CICS.                                     19010014
190100     MOVE ' ' TO MSG-AREA.                                        19020014
190200     MOVE TEMP-DISPLAY-MSG(241:49) TO MSG-AREA(2:49).             19030014
190300     PERFORM 9000-WRITE-CICS.                                     19040014
190400     MOVE ' ' TO MSG-AREA.                                        19050014
190500     MOVE TEMP-DISPLAY-MSG(290:49) TO MSG-AREA(2:49).             19060014
190600     PERFORM 9000-WRITE-CICS.                                     19070014
190700     MOVE ' ' TO MSG-AREA.                                        19080014
190800     MOVE TEMP-DISPLAY-MSG(339:49) TO MSG-AREA(2:49).             19090014
190900     PERFORM 9000-WRITE-CICS.                                     19100014
191000     MOVE ' ' TO MSG-AREA.                                        19110014
191100     MOVE TEMP-DISPLAY-MSG(388:49) TO MSG-AREA(2:49).             19120014
191200     PERFORM 9000-WRITE-CICS.                                     19130014
191300     MOVE ' ' TO MSG-AREA.                                        19140014
191400     MOVE TEMP-DISPLAY-MSG(437:49) TO MSG-AREA(2:49).             19150014
191500     PERFORM 9000-WRITE-CICS.                                     19160014
191600     MOVE ' ' TO MSG-AREA.                                        19170014
191700     MOVE TEMP-DISPLAY-MSG(486:49) TO MSG-AREA(2:49).             19180014
191800     PERFORM 9000-WRITE-CICS.                                     19190014
191900     MOVE ' ' TO MSG-AREA.                                        19200014
192000     MOVE TEMP-DISPLAY-MSG(535:49) TO MSG-AREA(2:49).             19210014
192100     PERFORM 9000-WRITE-CICS.                                     19220014
192200     MOVE ' ' TO MSG-AREA.                                        19230014
192300     MOVE TEMP-DISPLAY-MSG(584:49) TO MSG-AREA(2:49).             19240014
192400     PERFORM 9000-WRITE-CICS.                                     19250014
192500     MOVE ' ' TO MSG-AREA.                                        19260014
192600     MOVE TEMP-DISPLAY-MSG(633:49) TO MSG-AREA(2:49).             19270014
192700     PERFORM 9000-WRITE-CICS.                                     19280014
192800     MOVE ' ' TO MSG-AREA.                                        19290014
192900     MOVE TEMP-DISPLAY-MSG(682:49) TO MSG-AREA(2:49).             19300014
193000     PERFORM 9000-WRITE-CICS.                                     19310014
193100     MOVE ' ' TO MSG-AREA.                                        19320014
193200     MOVE TEMP-DISPLAY-MSG(731:49) TO MSG-AREA(2:49).             19330014
193300     PERFORM 9000-WRITE-CICS.                                     19340014
193400     MOVE ' ' TO MSG-AREA.                                        19350014
193500     MOVE TEMP-DISPLAY-MSG(780:49) TO MSG-AREA(2:49).             19360014
193600     PERFORM 9000-WRITE-CICS.                                     19370014
193700     MOVE ' ' TO MSG-AREA.                                        19380014
193800     MOVE TEMP-DISPLAY-MSG(829:49) TO MSG-AREA(2:49).             19390014
193900     PERFORM 9000-WRITE-CICS.                                     19400014
194000                                                                  19410000
194100***************************************************************   19420000
194200*  PARTIAL-MSG.                                               *   19430000
194300* DISPLAY A MESSAGE WHEN THERE IS A PARTIAL-MESSAGE PACKET.   *   19440000
194400* THIS SHOULD BE FOR TESTING PURPOSES ONLY.                   *   19450000
194500***************************************************************   19460000
194600 4992-PARTIAL-MSG.                                                19470000
194700     MOVE '!*NEED MORE DATA, READ FOR H=' TO MSG-AREA.            19480014
194800     MOVE TBL-DATA(SOCKNO)(1:18) TO MSG-AREA(30:18).              19490014
194900     PERFORM 9000-WRITE-CICS.                                     19500014
195000     MOVE '!' TO MSG-AREA.                                        19510014
195100     MOVE TBL-DATA(SOCKNO)(19:64) TO MSG-AREA(2:45).              19520014
195200     PERFORM 9000-WRITE-CICS.                                     19530014
195300     MOVE '!*READ L: ' TO MSG-AREA.                               19540014
195400     MOVE SAV-MSG-LEN TO DISP-MAX.                                19550014
195500     MOVE DISP-MAX TO MSG-AREA(11:4).                             19560014
195600     MOVE ',HEADER COUNT=' TO MSG-AREA(15:14).                    19570014
195700     MOVE PV-MSG-LEN-WHDR TO DISP-MAX.                            19580014
195800     MOVE DISP-MAX TO MSG-AREA(29:4).                             19590014
195900     MOVE ',RETCODE=' TO MSG-AREA(33:9).                          19600014
196000     MOVE RETCODE TO DISP-MAX.                                    19610014
196100     MOVE DISP-MAX TO MSG-AREA(42:4).                             19620014
196200     PERFORM 9000-WRITE-CICS.                                     19630014
196300                                                                  19640000
196400***************************************************************   19650000
196500* PROCESS-TIMEOUT                                             *   19660000
196600***************************************************************   19670000
196700 5000-PROCESS-TIMEOUT.                                            19680000
196800*                                                                 19690000
196900*       GO CHECK FOR DATA IN THE TCPIPPRQ                         19700000
197000*                                                                 19710000
197100     PERFORM 5100-READ-PRQ.                                       19720000
197200*                                                                 19730000
197300*       CALL THE READ OPTIONS TSQ ROUTINE EVERY 1 MINUTE          19740000
197400*                                                                 19750000
198100     IF TSTAMP > TSTAMP-SWQ THEN                                  19760000
198200        PERFORM 5400-READ-SWQ                                     19770000
198300        MOVE TSTAMP TO TSTAMP-SWQ                                 19780000
198400     END-IF.                                                      19790000
198500*                                                                 19800000
198600*       CALL THE DEAD-SOCKET CHECK ROUTINE EVERY 6 MINUTES        19810000
198700*       AND CLOSE ALL SOCKETS WITH NO ACTIVITY IN THE LAST        19820000
198800*       5 MINUTES.                                                19830000
198900*                                                                 19840000
199000     IF TSTAMP > TSTAMP-DEAD THEN                                 19850000
199100        PERFORM 7050-DEAD-SOCKET                                  19860000
199200        MOVE TSTAMP TO TSTAMP-DEAD                                19870000
199300        ADD FULL-TIMEOUT-T7 TO TSTAMP-DEAD                        19880000
199400        MOVE FULL-TIMEOUT-T6 TO DEAD-TIMEOUT                      19890000
199500        PERFORM 7050-DEAD-SOCKET                                  19900000
199600     END-IF.                                                      19910000
199700*                                                                 19920000
199800****************************************************************  19930000
199900*   READ-PRQ                                                   *  19940000
200000*  THIS ROUTE WILL READ THE TCPIPPRQ TEMP STORAGE QUEUE FOR    *  19950000
200100*  RESPONSES BACK FROM THE AUTHORIZATION CHILD PROGRAMS AND    *  19960000
200200*  SEND THE RESPONSES BACK TO THE STORES.                      *  19970000
200300*  THIS ROUTINE KEEPS CALLING ITSELF UNTIL THERE ARE NO MORE   *  19980000
200400*  RECORDS TO PROCESS FROM THE TEMP STORAGE QUEUE.             *  19990000
200500*  RECORDS ARE NEVER DELETED FROM THE QUEUE, THEY ARE OVER-    *  20000000
200600*  WRITTEN.                                                    *  20010000
200700*  QUEUE FORMAT:                                               *  20020000
200800*  LINE 1: # OF NEXT RECORD TO BE WRITTEN TO THE QUEUE BY THE  *  20030000
200900*          CHILD PROGRAM, FOLLOWED BY THE TOTAL NUMBER OF      *  20040000
201000*          POSSIBLE ENTRIES IN THE QUEUE (1000)                *  20050000
201100*  LINE 2: # OF NEXT RECORD TO BE READ BY LISTENER FOLLOWED BY *  20060000
201200*          TOTAL NUMBER OF POSSIBLE ENTRIES IN THE QUEUE (1000)*  20070000
201300*  LINES 3 TO 1000: RESPONSES FROM CHILD PROGRAMS IN FORMAT    *  20080000
201400*                  TCP-BUF-OUT                                 *  20090000
201500*  LINES 1001 AND 1002: NEVER USED                             *  20100000
201600****************************************************************  20110000
201700 5100-READ-PRQ.                                                   20120000
201800                                                                  20130000
201900     PERFORM WITH TEST AFTER                                      20140000
202000             UNTIL TSQ-READ-COUNT = TSQ-WRITE-COUNT               20150000
202100** READ THE FIRST 2 LINES TO SEE WHAT THE NEXT RECORD IS FOR      20160000
202200** THE LISTENER TO READ, AND WHAT THE LAST RECORD WAS THAT        20170000
202300** THE CHILD PROGRAM WROTE OUT.                                   20180000
202400                                                                  20190000
202500** READ LINE 1 TO GET POSITION OF LAST RECORD WRITTEN             20200000
202600       MOVE 1 TO RECORD-TO-READ                                   20210000
202700*      MOVE 'READ-PRQ STARTED' TO MSG-AREA                        20220000
202800*      PERFORM 9000-WRITE-CICS                                    20230000
202900       MOVE LENGTH OF TCP-BUF-OUT TO SAV-MSG-LEN                  20240000
203000       EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TSQ-INDEX)         20250000
203100            NOHANDLE                                              20260000
203200          ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC       20270000
203300       MOVE TSQ-COUNT-1 TO TSQ-WRITE-COUNT                        20280000
203400       MOVE TSQ-COUNT-2 TO TSQ-TOTAL-RECORDS                      20290000
203500       MOVE 'WRITE=' TO MSG-AREA                                  20300000
203600       MOVE TSQ-COUNT-1 TO MSG-AREA(7:8)                          20310000
203700                                                                  20320000
203800** READ LINE 2 TO GET POSITION OF NEXT RECORD TO READ             20330000
203900       MOVE 2 TO RECORD-TO-READ                                   20340000
204000       EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TSQ-INDEX)         20350000
204100            NOHANDLE                                              20360000
204200            ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC     20370000
204300       MOVE TSQ-COUNT-1 TO TSQ-READ-COUNT                         20380000
204400                                                                  20390000
204500*      MOVE TSQ-INDEX(1:36) TO MSG-AREA(14:36)                    20400000
204600*      PERFORM 9000-WRITE-CICS                                    20410000
204700                                                                  20420000
204800** IF THE WRITE-COUNT FROM LINE 1 EQUALS THE READ-COUNT FROM      20430000
204900** LINE 2 THEN THERE ARE NO RECORDS TO PROCESS, SO EXIT.          20440000
205000** OTHERWISE, READ THE NEXT RESPONSE OFF THE QUEUE.               20450000
205100       IF NOT (TSQ-READ-COUNT = TSQ-WRITE-COUNT) THEN             20460000
205200          PERFORM 5200-READ-NEXT-RESPONSE                         20470000
205300       END-IF                                                     20480000
205400     END-PERFORM.                                                 20490000
205500                                                                  20500000
205600***************************************************************   20510000
205700* READ-NEXT-RESPONSE                                          *   20520000
205800*  READ THE NEXT RESPONSE TO PROCESS FROM THE QUEUE           *   20530000
205900***************************************************************   20540000
206000 5200-READ-NEXT-RESPONSE.                                         20550000
206100     MOVE TSQ-READ-COUNT TO RECORD-TO-READ.                       20560000
206200     EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TCP-BUF-OUT)         20570000
206300         NOHANDLE                                                 20580000
206400         ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC.       20590000
206500                                                                  20600000
206600** UPDATE LINE 2 WITH THE NEXT RECORD NUMBER TO READ              20610000
206700                                                                  20620000
206800     ADD 1 TO TSQ-READ-COUNT.                                     20630000
206900     IF TSQ-READ-COUNT > TSQ-TOTAL-RECORDS                        20640000
207000        MOVE 3 TO TSQ-READ-COUNT                                  20650000
207100     END-IF.                                                      20660000
207200     MOVE TSQ-READ-COUNT TO TSQ-COUNT-1.                          20670000
207300     MOVE 2 TO RECORD-TO-READ.                                    20680000
207400     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          20690000
207500          ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN)                20700000
207600          NOHANDLE                                                20710000
207700          MAIN REWRITE END-EXEC.                                  20720000
207800                                                                  20730000
207900*    CHECK MESSAGE FOR CORRECT LENGTH.                            20740000
208000                                                                  20750000
208100     IF TCP-BUF-LEN < 13 THEN                                     20760019
208200        MOVE '!INVALID LEN ERROR IN RESPONSE' TO MSG-AREA         20770000
208300        PERFORM 9000-WRITE-CICS                                   20780000
208400     ELSE                                                         20790000
208500*                                                                 20800000
208600*       FIND SOCKET THAT RESPONSE NEEDS TO GO OUT ON              20810000
208700*       BY SEARCHING FOR THE MATCHING NUMBER                      20820000
208800*                                                                 20830000
208900       MOVE 1 TO SOCKNO                                           20840000
209000       PERFORM UNTIL SOCKNO > MAX-SOCKETS-LESS1                   20850000
209100              OR TBL-ST-MATCHING(SOCKNO) = TCP-BUF-MATCHING       20860000
209200          ADD 1 TO SOCKNO                                         20870000
209300       END-PERFORM                                                20880000
209400                                                                  20890000
209500       IF TBL-ST-MATCHING(SOCKNO) = TCP-BUF-MATCHING THEN         20900000
209600                                                                  20910000
209700*        CHECK FOR DEAD/CLOSED SOCKET                             20920000
209800                                                                  20930000
209900         IF TBL-ST-AVAIL(SOCKNO) = 'Y' THEN                       20940000
210000*          A TRACE MESSAGE                                        20950000
210100           IF DISP-MSGS > 0                                       20960000
210200             MOVE SOCKNO            TO DISP-DEAD-MATCH-SOCK       20970000
210300             MOVE TCP-BUF-MATCHING  TO DISP-DEAD-MATCH-NUMB       20980000
210400             MOVE DISP-DEAD-MATCH   TO MSG-AREA                   20990000
210500             PERFORM 9000-WRITE-CICS                              21000000
210600           END-IF                                                 21010000
210700         ELSE                                                     21020000
210800           PERFORM 5300-SEND-RESPONSE                             21030000
210900         END-IF                                                   21040000
211000       ELSE                                                       21050000
211100*                                                                 21060000
211200*       CANNOT FIND SOCKET THAT RESPONSE NEEDS TO GO OUT ON       21070000
211300*                                                                 21080000
211400         MOVE '!NO MATCH ON KEY' TO MSG-AREA                      21090000
211500         MOVE TCP-BUF-MATCHING TO MSG-AREA(18:8)                  21100000
211600         PERFORM 9000-WRITE-CICS                                  21110000
211700         MOVE '!' TO MSG-AREA(1:1)                                21120000
211800         MOVE TCP-BUF-OUT TO MSG-AREA(2:49)                       21130000
211900         PERFORM 9000-WRITE-CICS                                  21140000
212000       END-IF                                                     21150000
212100     END-IF.                                                      21160000
212200                                                                  21170000
212300***************************************************************   21180000
212400* SEND-RESPONSE                                               *   21190000
212500*  THIS ROUTINE WILL SEND THE RESPONSE BACK TO THE SOCKET THAT*   21200000
212600*  SENT THE ORIGINAL MESSAGE.                                 *   21210000
212700***************************************************************   21220000
212800 5300-SEND-RESPONSE.                                              21230000
212900                                                                  21240000
213000     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           21250000
213100                                                                  21260000
213200* A TRACE MESSAGE                                                 21270000
213300     IF DISP-MSGS > 0                                             21280000
213310       MOVE SPACES TO MSG-AREA                                    21290000
213320       MOVE '** SENDING RESPONSE TO INCOMM    **'                 21300001
213321        TO MSG-AREA                                               21310000
213330       PERFORM 9000-WRITE-CICS                                    21320000
213400       MOVE SPACES TO MSG-AREA                                    21330000
213500       MOVE 'RESPONSE  ' TO CALL-NO                               21340000
213600       MOVE 'SOCKET=' TO FIELDXX                                  21350000
213700       MOVE SOCKNO TO ERR-CODE                                    21360000
213800       MOVE 'MATCH= ' TO FIELDYY                                  21370000
213900       MOVE TCP-BUF-MATCHING TO DIS-RET-CODE                      21380000
214000       PERFORM 9000-WRITE-CICS                                    21390000
214100     END-IF.                                                      21400000
214110* A TRACE MESSAGE                                                 21410000
214120     IF DISP-MSGS > 0 THEN                                        21420000
214130        PERFORM VARYING WSCT FROM 1 BY 50                         21430000
214140                 UNTIL WSCT > TCP-BUF-LEN                         21440000
214150           MOVE TCP-BUF-REC(WSCT:50) TO MSG-AREA                  21450000
214160           PERFORM 9000-WRITE-CICS                                21460000
214170        END-PERFORM                                               21470000
214180     END-IF.                                                      21480000
214200                                                                  21490000
214300* CONVERT OUTGOING MESSAGE TO ASCII                               21500000
216200* convert to ascii all but the first 2 bytes hex length           21510000
216300* Note: TCP-BUF-LEN = length of message to be sent.               21520000
216400     COMPUTE PV-CONVERT-LEN = TCP-BUF-LEN - 2.                    21530000
216500     CALL 'EZACIC04' USING TOASCII-TOKEN TCP-BUF-R                21540000
216600                           PV-CONVERT-LEN.                        21550000
216700                                                                  21560000
216800* A TRACE MESSAGE                                                 21570000
216900     IF DISP-MSGS > 0                                             21580000
217000       MOVE 'ASCI=' TO MSG-AREA                                   21590000
217100       MOVE TCP-BUF-REC(1:44) TO MSG-AREA(6:44)                   21600000
217200       PERFORM 9000-WRITE-CICS                                    21610000
217300     END-IF.                                                      21620000
217400                                                                  21630000
217500* ISSUE SEND COMMAND                                              21640000
217600                                                                  21650000
217700     MOVE TCP-BUF-LEN TO PV-CONVERT-LEN.                          21660000
217800     MOVE SOCKNO TO SOCKID.                                       21670000
217900     MOVE 0 TO ERRNO.                                             21680000
218000     MOVE 0 TO RETCODE.                                           21690000
218100                                                                  21700000
218200     CALL 'EZASOKET' USING WRITE-CMD SOCKID PV-CONVERT-LEN        21710000
218300           TCP-BUF-REC ERRNO RETCODE.                             21720000
218400                                                                  21730000
218500     IF RETCODE <  0 THEN                                         21740000
218600        MOVE '!TCPSEND ERROR WRITING MSG TO CLIENT' TO MSG-AREA   21750000
218700        PERFORM 9000-WRITE-CICS                                   21760000
218800        MOVE SPACES TO MSG-AREA                                   21770000
218900        MOVE 'SEND' TO CALL-NO                                    21780000
219000        MOVE 'ER-CODE' TO FIELDXX                                 21790000
219100        MOVE ERRNO TO ERR-CODE                                    21800000
219200        MOVE 'RET-CD=' TO FIELDYY                                 21810000
219300        MOVE RETCODE TO DIS-RET-CODE                              21820000
219400        PERFORM 9000-WRITE-CICS                                   21830000
219500     ELSE                                                         21840000
219700*       ADD 1 TO SEND-COUNT                                       21850000
219800        ADD 1 TO TBL-ST-SEND(SOCKNO)                              21860000
219810* WRITE OUT A TRACE MESSAGE                                       21870000
219900       IF DISP-MSGS > 0                                           21880000
219910        MOVE SPACES TO MSG-AREA                                   21890000
219920        MOVE 'SENT:' TO CALL-NO                                   21900000
219930        MOVE 'HEADER=' TO FIELDXX                                 21910000
219940*      CONVERTING MESSAGE LENGTH FROM HEX TO DECIMAL HERE         21920000
219950        MOVE TCP-BUF-HEX-LEN TO PV-CONVRT-MSGLEN-HEX              21930000
219960        MOVE PV-CONVRT-MSGLEN-COMP TO PV-CONVRT-MSGLEN-INT        21940000
219970        MOVE PV-CONVRT-MSGLEN-INT TO ERR-CODE                     21950000
219980        MOVE 'RET-CD=' TO FIELDYY                                 21960000
219990        MOVE RETCODE TO DIS-RET-CODE                              21970000
219991        PERFORM 9000-WRITE-CICS                                   21980000
220000        MOVE '** RESPONSE SUCCESSFULLY SENT TO INCOMM    **'      21990001
220100          TO MSG-AREA                                             22000000
220110        PERFORM 9000-WRITE-CICS                                   22010000
221200       END-IF                                                     22020000
221300     END-IF.                                                      22030000
221400                                                                  22040000
221500***************************************************************   22050000
221600*  READ-SWQ.                                                  *   22060000
221700*  THIS ROUTE READS THE TCPIPSWQ TEMP STORAGE QUEUE TO CHECK  *   22070000
221800*  ON TRACE, NOTRACE OR CANCEL OPTIONS                        *   22080000
221900***************************************************************   22090000
222000 5400-READ-SWQ.                                                   22100000
222100* A TRACE MESSAGE                                                 22110000
222200     IF DISP-MSGS > 0                                             22120000
222300       MOVE 'PERFORMING READ-SWQ' TO MSG-AREA                     22130000
222400       PERFORM 9000-WRITE-CICS                                    22140000
222500     END-IF.                                                      22150000
222600     PERFORM VARYING RECORD-TO-READ FROM 1 BY 1                   22160000
222700                     UNTIL RECORD-TO-READ >= 99                   22170000
222800        MOVE 80 TO RTSQ-LEN                                       22180000
222900        EXEC CICS READQ TS QUEUE(TCPIPSWQ) INTO(TCP-BUF)          22190000
223000             ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN) END-EXEC       22200000
223100        IF TCP-BUF(1:5) = 'TRACE' THEN                            22210000
223200           MOVE TCP-BUF(12:4) TO DISP-MSGS                        22220000
223300           IF DISP-MSGS = 0 THEN                                  22230000
223400              MOVE 9999 TO DISP-MSGS                              22240000
223500              MOVE SPACES TO TCP-BUF                              22250000
223600              EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ)                 22260000
223700                   FROM(TCP-BUF)                                  22270000
223800                   ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN)          22280000
223900                   MAIN REWRITE END-EXEC                          22290000
224000           END-IF                                                 22300000
224100        END-IF                                                    22310000
224200        IF TCP-BUF(1:7) = 'NOTRACE' THEN                          22320000
224300           MOVE 0 TO DISP-MSGS                                    22330000
224400           MOVE SPACES TO TCP-BUF                                 22340000
224500           EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ)                    22350000
224600                   FROM(TCP-BUF)                                  22360000
224700                   ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN)          22370000
224800                   MAIN REWRITE END-EXEC                          22380000
224900        END-IF                                                    22390000
225000        IF TCP-BUF(1:6) = 'CANCEL' THEN                           22400000
225100           MOVE '!TRANSACTION CANCEL BY IPSW' TO MSG-AREA         22410000
225200           PERFORM 9000-WRITE-CICS                                22420000
225300           PERFORM 9990-PGM-EXIT                                  22430000
225400        END-IF                                                    22440000
225500     END-PERFORM.                                                 22450000
225600                                                                  22460000
225700***************************************************************   22470000
225800* CHAR-TO-BIT                                                 *   22480000
225900* CONVERT THE CHARACTER ARRAY TO A SELECT BIT MASK SO THAT THE*   22490000
226000* COBOL PROGRAM CAN WRITE IT.                                 *   22500000
226100***************************************************************   22510000
226200 7000-CHAR-TO-BIT.                                                22520000
226300     CALL 'EZACIC06' USING BITMASK-TOKEN CTOB                     22530000
226400          BIT-MASK CHAR-MASK BIT-MASK-LENGTH EZRETC               22540000
226500     IF EZRETC < 0 THEN                                           22550000
226600        MOVE '!EZCIC06 - CTOB-EXCP ' TO MSG-AREA                  22560000
226700        PERFORM 9000-WRITE-CICS                                   22570000
226800        PERFORM 9990-PGM-EXIT                                     22580000
226900     END-IF.                                                      22590000
227000                                                                  22600000
227100***************************************************************   22610000
227200* BIT-TO-CHAR                                                 *   22620000
227300* CONVERT THE SELECT BIT MASK TO A CHARACTER ARRAY SO THAT    *   22630000
227400* THIS COBOL PROGRAM CAN READ IT.                             *   22640000
227500***************************************************************   22650000
227600 7010-BIT-TO-CHAR.                                                22660000
227700     CALL 'EZACIC06' USING BITMASK-TOKEN BTOC BIT-MASK            22670000
227800         CHAR-MASK BIT-MASK-LENGTH EZRETC.                        22680000
227900     IF EZRETC < 0 THEN                                           22690000
228000        MOVE '!EZCIC06 - BTOC-EXCP ' TO MSG-AREA                  22700000
228100        PERFORM 9000-WRITE-CICS                                   22710000
228200        PERFORM 9990-PGM-EXIT                                     22720000
228300     END-IF.                                                      22730000
228400                                                                  22740000
228500***************************************************************   22750000
228600*  VALID-IPADDR                                               *   22760000
228700*  VALIDATE THE IP ADDR REQUESTING A SOCKET                   *   22770000
228800***************************************************************   22780000
228900 7030-VALID-IPADDR.                                               22790000
229000                                                                  22800000
229100********  GET THE TCPIP OF THE MERCHANT  **************           22810000
229200     PERFORM 7040-CONVERT-IP-ADDR.                                22820000
229300     MOVE SOCKNO TO DISP-OPEN-SOKT.                               22830000
229400     MOVE MATCHING-NUMB TO DISP-OPEN-NUMB.                        22840000
229500     MOVE CIP-1 TO DISP-OPEN-CIP-1.                               22850000
229600     MOVE CIP-2 TO DISP-OPEN-CIP-2.                               22860000
229700     MOVE CIP-3 TO DISP-OPEN-CIP-3.                               22870000
229800     MOVE CIP-4 TO DISP-OPEN-CIP-4.                               22880000
229900     MOVE 0 TO WSCT.                                              22890000
230000                                                                  22900000
      * SEND NETCOOL CLEAR MESSAGE HERE FOR THE IP ADDRESS              22910000
      * OF THE NEW SOCKET CONNECTION BEING ESTABLISHED                  22920000
      *                                                                 22930000
           SET IS003-ALL-CLEAR TO TRUE.                                 22940000
           SET IS003-RESOLUTION-ALERT TO TRUE.                          22950000
      *** CONSTRUCT NETCOOL MESSAGE                                     22960000
           STRING                                                       22970000
             'AUKCS519-'                 DELIMITED BY SIZE              22980001
             ' CONN '                    DELIMITED BY SIZE              22990000
             DISP-OPEN-MSG               DELIMITED BY SIZE              23000000
               INTO IS003-SUMMARY.                                      23010000
      *    PERFORM 8000-POST-NETCOOL-ALERT.                             23020035
                                                                        23030000
230100*  THIS LOOP WILL DISPLAY THE NUMBER OF SOCKETS IN USE.           23040000
230200*  THE IF CHECK WILL ONLY PERFORM THIS IF TRACING IS              23050000
230300*  TURNED ON. NO NEED TO SPIN THROUGH 100  TIMES IF               23060000
230400*  THE RESULT IS NOT GOING TO BE DISPLAYED.                       23070000
230500     IF DISP-MSGS > 0                                             23080000
230600       PERFORM VARYING TSOCKET                                    23090000
230700               FROM 1 BY 1 UNTIL TSOCKET > MAX-SOCKETS-LESS1      23100000
230800          IF TBL-ST-AVAIL(TSOCKET) NOT = 'Y' THEN                 23110000
230900             ADD 1 TO WSCT                                        23120000
231000          END-IF                                                  23130000
231100       END-PERFORM                                                23140000
231200       MOVE WSCT TO DISP-OPEN-CIP-ACT                             23150000
231300       MOVE DISP-OPEN-MSG TO MSG-AREA                             23160000
231400       PERFORM 9000-WRITE-CICS                                    23170000
231500     END-IF.                                                      23180000
231600                                                                  23190000
231700     MOVE 0 TO EZRETC.                                            23200000
231800                                                                  23210000
231900***************************************************************** 23220000
232000* CONVERT-IP-ADDR                                               * 23230000
232100* THIS ROUTE WILL CONVERT THE TCP/IP ADDRESS TO A DISPLAYABLE   * 23240000
232200* FORMAT.                                                       * 23250000
232300*     INPUT = ACCEPT-IP-ADDR  - ADDRESS TO CONVERT              * 23260000
232400*     OUTPUT = HD-1, HD-2, HD-3 AND HD-4.                       * 23270000
232500***************************************************************** 23280000
232600 7040-CONVERT-IP-ADDR.                                            23290000
232700                                                                  23300000
232800     COMPUTE CIP-1 = (ACCEPT-IP-ADDR / 16777216).                 23310000
232900     COMPUTE CIP-4 = ACCEPT-IP-ADDR - (CIP-1 * 16777216).         23320000
233000     COMPUTE CIP-2 = CIP-4 / 65536.                               23330000
233100     COMPUTE CIP-4 = CIP-4 - (CIP-2 * 65536).                     23340000
233200     COMPUTE CIP-3 = CIP-4 / 256.                                 23350000
233300     COMPUTE CIP-4 = CIP-4 - (CIP-3 * 256).                       23360000
233400*                                                              *  23370000
233500* THE FOLLOWING "IF CIP-1 < 0" ADDED TO ALLOW FOR IP ADDRESSES *  23380000
233600* STARTING WITH 0. THRU 127.  (KOHLS NEW ADDRESSES ARE 10.42..)*  23390000
233700*                                 D.DREW 3/10/99               *  23400000
233800*                                                              *  23410000
233900     IF CIP-1 < 0 THEN                                            23420000
234000        COMPUTE CIP-1 = 255 + CIP-1                               23430000
234100        COMPUTE CIP-2 = 255 + CIP-2                               23440000
234200        COMPUTE CIP-3 = 255 + CIP-3                               23450000
234300        COMPUTE CIP-4 = 256 + CIP-4                               23460000
234400     END-IF.                                                      23470000
234500                                                                  23480000
234600************************************************************      23490000
234700*  DEAD-SOCKET                                             *      23500000
234800*  THIS ROUTE WILL CLOSE ALL SOCKETS THAT HAVE BEEN        *      23510000
234900*  INACTIVE FOR MORE THAN 5 MINUTES                        *      23520000
235000*  NOTE: TSTAMP IS IN UNITS OF 1 MINUTE.                   *      23530000
235100************************************************************      23540000
235200 7050-DEAD-SOCKET.                                                23550000
235300* A TRACE MESSAGE                                                 23560000
235400     IF DISP-MSGS > 0                                             23570000
235500       MOVE 'PERFORMING DEAD-SOCKET ROUTINE' TO MSG-AREA          23580000
235600       PERFORM 9000-WRITE-CICS                                    23590000
235700     END-IF.                                                      23600000
235800                                                                  23610000
235900     COMPUTE SSTAMP = TSTAMP - DEAD-TIMEOUT.                      23620000
236000                                                                  23630000
236100     PERFORM VARYING TSOCKET FROM 1 BY 1                          23640000
236200              UNTIL TSOCKET > MAX-SOCKETS-LESS1                   23650000
236300        IF TBL-ST-AVAIL(TSOCKET) = 'N' THEN                       23660000
236400           IF TBL-TSTAMP(TSOCKET) <= SSTAMP                       23670000
236500             AND TBL-TSTAMP(TSOCKET) NOT = 0                      23680000
236600              MOVE TSOCKET TO SEARCH-MSG-COUNT                    23690000
236700              MOVE SEARCH-MSG-ERR TO MSG-AREA                     23700000
236800              PERFORM 9000-WRITE-CICS                             23710000
236900              MOVE TSTAMP TO DEAD-S-2                             23720000
237000              MOVE TBL-TSTAMP(TSOCKET) TO DEAD-S-4                23730000
237100              MOVE DEAD-S TO MSG-AREA                             23740000
237200              PERFORM 9000-WRITE-CICS                             23750000
237300              MOVE TSOCKET TO SOCKNO                              23760000
237400              PERFORM 7060-CLOSE-SOCKET                           23770000
237500           END-IF                                                 23780000
237600        END-IF                                                    23790000
237700     END-PERFORM.                                                 23800000
237800                                                                  23810000
237900***************************************************************** 23820000
238000* CLOSE-SOCKET.                                                 * 23830000
238100*   CLOSE 'ACCEPT DESCRIPTOR'                                   * 23840000
238200***************************************************************** 23850000
238300 7060-CLOSE-SOCKET.                                               23860000
238400*                                                                 23870000
238500*  CLEAR THE READ AND EXCEPTION BIT MAPS FOR SELECT               23880000
238600*                                                                 23890000
238700     MOVE SOCKNO TO SOCKID.                                       23900000
238800                                                                  23910000
238900*    VALID SOCKETS ARE ONLY > 0                                   23920000
239000     IF SOCKID = 0 THEN                                           23930000
239100        MOVE '!SOCKID FOR RECV CLOSE = 0' TO MSG-AREA             23940000
239200        PERFORM 9000-WRITE-CICS                                   23950000
239300     ELSE                                                         23960000
239400       MOVE SELECT-RD-MASK TO BIT-MASK                            23970000
239500       PERFORM 7010-BIT-TO-CHAR                                   23980000
239600                                                                  23990000
239700*      MOVE CHAR-MASK TO MSG-AREA                                 24000000
239800*      PERFORM 9000-WRITE-CICS                                    24010000
239900*                                                                 24020000
240000*       NEED TO TURN OFF BIT FOR SELECT FOR THIS SOCKET           24030000
240100*                                                                 24040000
240200       COMPUTE WSCT = SOCKID + 1                                  24050000
240300       MOVE '0' TO CHAR-ENTRY(WSCT)                               24060000
240400                                                                  24070000
240500*      MOVE CHAR-MASK TO MSG-AREA                                 24080000
240600*      PERFORM 9000-WRITE-CICS                                    24090000
240700                                                                  24100000
240800       PERFORM 7000-CHAR-TO-BIT                                   24110000
240900       MOVE BIT-MASK TO SELECT-RD-MASK                            24120000
241000*      MOVE BIT-MASK TO SELECT-EX-MASK                            24130000
241100                                                                  24140000
241200       MOVE 0 TO ERRNO                                            24150000
241300       MOVE 0 TO RETCODE                                          24160000
241400                                                                  24170000
241500       CALL 'EZASOKET' USING CLOSE-CMD SOCKID                     24180000
241600             ERRNO RETCODE                                        24190000
241700                                                                  24200000
241800       IF RETCODE < 0 THEN                                        24210000
241900          MOVE ' CLOSE ERROR ON RECV SOCKET' TO MSG-AREA          24220000
242000          PERFORM 9000-WRITE-CICS                                 24230000
242100       END-IF                                                     24240000
242200                                                                  24250000
242300       MOVE SOCKID TO CLOS-SOCKT                                  24260000
242400       MOVE ERRNO TO CLOS-SOCKT-ERR                               24270000
242500       MOVE CLOS-ERR-MSG TO MSG-AREA                              24280000
242600       PERFORM 9000-WRITE-CICS                                    24290000
242700*                                                                 24300000
242800*         GET THE TCPIP OF THE MERCHANT                           24310000
242900*                                                                 24320000
243000       MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME                24330000
243100       PERFORM 7040-CONVERT-IP-ADDR                               24340000
243200                                                                  24350000
243300       MOVE SOCKNO TO DISP-TRAN-STORE                             24360000
243400       MOVE CIP-1 TO DIS-RT-1                                     24370000
243500       MOVE CIP-2 TO DIS-RT-2                                     24380000
243600       MOVE CIP-3 TO DIS-RT-3                                     24390000
243700       MOVE CIP-4 TO DIS-RT-4                                     24400000
243800       MOVE TBL-ST-RECV(SOCKNO) TO DISP-TRAN-NUMB                 24410000
243900       MOVE TBL-ST-SEND(SOCKNO) TO DISP-TRAN-NUMBS                24420000
244000       MOVE DISP-TRAN-COUNT TO MSG-AREA                           24430000
244100       PERFORM 9000-WRITE-CICS                                    24440000
244200                                                                  24450000
244300       MOVE 'Y' TO TBL-ST-AVAIL(SOCKNO)                           24460000
244400                                                                  24470000
244500*                                                             *   24480000
244600* RESET TBL-DATA-CNT WHEN CLOSING A SOCKET - NEW SOCKET USING *   24490000
244700*                                                             *   24500000
244800       MOVE 1 TO TBL-DATA-CNT(SOCKNO)                             24510000
244900       MOVE SPACES TO TBL-DATA(SOCKNO)                            24520000
      *                                                                 24530000
      * SEND NETCOOL MAJOR MESSAGE HERE FOR THE IP ADDRESS              24540000
      * OF THE SOCKET CONNECTION BEING CLOSED                           24550000
      *                                                                 24560000
             SET IS003-MAJOR-ALERT TO TRUE                              24570000
             SET IS003-PROBLEM-ALERT TO TRUE                            24580000
      *** CONSTRUCT NETCOOL MESSAGE                                     24590000
             STRING                                                     24600000
               'AUKCS519-'                 DELIMITED BY SIZE            24610001
               ' CONN '                    DELIMITED BY SIZE            24620000
               DISP-TRAN-COUNT             DELIMITED BY SIZE            24630000
                 INTO IS003-SUMMARY                                     24640000
      *      PERFORM 8000-POST-NETCOOL-ALERT                            24650035
245000                                                                  24660000
245100     END-IF.                                                      24670000
245200                                                                  24680000
245300****************************************************************  24690000
245400*   READ-HEADER-LENGTH                                         *  24700000
245500*  CONVERT THE 2 BYTE HEX HEADER LENGTH TO AN INTEGER AND      *  24710000
245600*  CHECK TO SEE IF IT IS A VALID VALUE (BETWEEN 1 AND 500).    *  24720000
245700*  THE HEADER LENGTH DOES NOT INCLUDE THE HEADER ITSELF.       *  24730000
245800*  IT HAS TO BE AT LEAST 1 BECAUSE YOU WOULDN'T SEND AN EMPTY  *  24740000
245900*  MESSAGE, AND IF ITS MORE THAN 500, THEN YOU PROBABLY HAVE   *  24750000
246000*  INVALID DATA IN THE HEADER POSITIONS.  IF YOU EXPECT        *  24760000
246100*  MESSAGES BIGGER THAN 500 BYTES, THEN CHANGE                 *  24770000
246200*  THE VALUE OF PC-MAX-MSG-LEN.                                *  24780000
246300****************************************************************  24790000
246400 7900-READ-HEADER-LENGTH.                                         24800000
246500     MOVE 'N' TO HEADER-ERROR.                                    24810000
246600     MOVE PV-CONVRT-MSGLEN-COMP TO PV-MSG-LEN-WOHDR.              24820000
246700     IF PV-MSG-LEN-WOHDR > PC-MAX-MSG-LEN                         24830000
246800       OR PV-MSG-LEN-WOHDR < PC-MIN-MSG-LEN                       24840000
246900        MOVE 'Y' TO HEADER-ERROR                                  24850000
247000     ELSE                                                         24860000
247100        COMPUTE PV-MSG-LEN-WHDR = PV-MSG-LEN-WOHDR + 2            24870000
247200     END-IF.                                                      24880000
247300                                                                  24890000
245300****************************************************************  24900000
245400*   POST-NETCOOL-ALERT                                         *  24910000
245500*  SEND A MESSAGE TO NETCOOL                                   *  24920000
246300****************************************************************  24930000
246400 8000-POST-NETCOOL-ALERT.                                         24940000
           SET IS003-CICS                                               24950000
               IS003-VERSION-1 TO TRUE.                                 24960000
           MOVE 'AU'               TO IS003-SYSTEM-ID.                  24970000
           IF PV-CICS-REGION = 'CICSPS'                                 24980000
             MOVE 'AUTO LAB'         TO IS003-AUTOMATION-LABEL          24990000
           ELSE                                                         25000000
             MOVE 'CICS TST'         TO IS003-AUTOMATION-LABEL          25010000
           END-IF.                                                      25020000
           CALL IS003-ALERT-PROGRAM                                     25030000
               USING DFHEIBLK                                           25040000
                     IS003-CICS-COMMAREA                                25050000
                     IS003-NETCOOL-ALERT.                               25060000
                                                                        25070000
           IF NOT IS003-OK                                              25080000
              STRING '!ERROR WRITING NETCOOL ALERT. '                   25090000
                     'NETCOOL RETURN CODE='                             25100000
                IS003-RETURN-CODE DELIMITED BY SIZE                     25110000
                INTO MSG-AREA                                           25120000
              END-STRING                                                25130000
              PERFORM 9000-WRITE-CICS                                   25140000
              STRING '!IS003-MESSAGE='                                  25150000
                IS003-MESSAGE DELIMITED BY SIZE                         25160000
                INTO MSG-AREA                                           25170000
              END-STRING                                                25180000
              PERFORM 9000-WRITE-CICS                                   25190000
      ** FOR TESTING PURPOSES ONLY                                      25200000
           ELSE                                                         25210000
              STRING '!NETCOOL RETURN CODE IS GOOD. '                   25220000
                     'NETCOOL RETURN CODE='                             25230000
                IS003-RETURN-CODE DELIMITED BY SIZE                     25240000
                INTO MSG-AREA                                           25250000
              END-STRING                                                25260000
              PERFORM 9000-WRITE-CICS                                   25270000
              STRING '!IS003-MESSAGE='                                  25280000
                IS003-MESSAGE DELIMITED BY SIZE                         25290000
                INTO MSG-AREA                                           25300000
              END-STRING                                                25310000
              PERFORM 9000-WRITE-CICS                                   25320000
           END-IF.                                                      25330000
      *** WRITE ALL NETCOOL MESSAGES TO THE CICS LOG                    25340000
      *** IF NOT IN PRODUCTION, ONLY WRITE NETCOOL MESSAGES             25350000
      *** TO THE CICS LOG, NOT TO NETCOOL                               25360000
           MOVE IS003-SUMMARY       TO PE-IS003-SUMMARY.                25370000
           MOVE PE-NETCOOL-ALERT-TO-BE-WRITTEN TO MSG-AREA.             25380000
           PERFORM 9000-WRITE-CICS.                                     25390000
      *                                                                 25400000
      * PERFORM A COMMIT TO GET NETCOOL ALERT WRITTEN.                  25410000
      *                                                                 25420000
           EXEC CICS                                                    25430000
               SYNCPOINT                                                25440000
           END-EXEC.                                                    25450000
                                                                        25460000
247400****************************************************************  25470000
247500*   WRITE-CICS                                                 *  25480000
247600*  THIS ROUTE WRITES OUT A LOG MESSAGE ON THE CICS OUTPUT      *  25490000
247700*  TRANSIENT DATA QUEUE.                                       *  25500000
247800*                                                              *  25510000
247900****************************************************************  25520000
248000 9000-WRITE-CICS.                                                 25530000
248100                                                                  25540000
248200     IF MSG-AREA(1:1) = '!' OR DISP-MSGS > 0                      25550000
248300        MOVE LENGTH OF TCPCICS-MSG-AREA TO CLENG                  25560000
248400        EXEC CICS ASKTIME ABSTIME(DSTAMP) NOHANDLE END-EXEC       25570000
248500        EXEC CICS FORMATTIME ABSTIME(DSTAMP) MMDDYY(MSGDATE)      25580000
248600             TIME(MSGTIME) DATESEP TIMESEP(':') NOHANDLE END-EXEC 25590000
248700        MOVE IP-LISTENER-TRAN TO MODULE                           25600000
248800        MOVE PV-HOLD-PORT TO MSG-PORT                             25610000
248900        EXEC CICS WRITEQ TD QUEUE('CSSL') FROM (TCPCICS-MSG-AREA) 25620000
249000             RESP(PV-RESPONSE) LENGTH(CLENG) END-EXEC             25630000
249100     END-IF.                                                      25640000
249200                                                                  25650000
249300     IF DISP-MSGS > 0 AND DISP-MSGS < 9999                        25660000
249400        SUBTRACT 1 FROM DISP-MSGS.                                25670000
249500     MOVE SPACES TO MSG-AREA.                                     25680000
249600                                                                  25690000
249700 EJECT                                                            25700000
249800*---------------------------------------------------------------* 25710000
249900*                                                               * 25720000
250000*  CONTROL IS GIVEN TO THE FOLLOWING ERROR ROUTINES BY 'HANDLES'* 25730000
250100*  ISSUED AT THE BEGINNING OF THE PROGRAM.                      * 25740000
250200*                                                               * 25750000
250300*---------------------------------------------------------------* 25760000
250400* N.B.  WE CAN NOT EXIT IF ERROR, WE MUST ONLY EXIT IF            25770000
250500*       THERE ARE NO SOCKETS IN THE TABLE TO SERVICE ! ! !        25780000
250600*       CHANGE THE LOGIC BELOW                                    25790000
250700                                                                  25800000
250800 9010-INVREQ-ERR-SEC.                                             25810000
250900     MOVE '!INTERFACE IS NOT ACTIVE' TO MSG-AREA.                 25820000
251000     PERFORM 9000-WRITE-CICS.                                     25830000
251100     PERFORM 9990-PGM-EXIT.                                       25840000
251200                                                                  25850000
251300 9020-IOERR-SEC.                                                  25860000
251400     MOVE '!IOERR OCCURS           ' TO MSG-AREA.                 25870000
251500     PERFORM 9000-WRITE-CICS.                                     25880000
251600     PERFORM 9990-PGM-EXIT.                                       25890000
251700                                                                  25900000
251800 9030-QZERO-SEC.                                                  25910000
251900     MOVE '!QZERO OCCURRS          ' TO MSG-AREA.                 25920000
252000     PERFORM 9000-WRITE-CICS.                                     25930000
252100     PERFORM 9990-PGM-EXIT.                                       25940000
252200                                                                  25950000
252300 9040-LENGERR-SEC.                                                25960000
252400     MOVE '!*IPSW* LENGTH ERROR READING TD QUEUE' TO MSG-AREA.    25970000
252500     PERFORM 9000-WRITE-CICS.                                     25980000
252600     MOVE '!' TO MSG-AREA.                                        25990000
252700     MOVE 'L =    ' TO FIELDXX.                                   26000000
252800     MOVE SAV-MSG-LEN     TO ERR-CODE.                            26010000
252900     MOVE ', RC = ' TO FIELDYY.                                   26020000
253000     MOVE PV-RC    TO DIS-RET-CODE.                               26030000
253100     MOVE '****' TO CALL-NO.                                      26040000
253200     PERFORM 9000-WRITE-CICS.                                     26050000
253300     PERFORM 9990-PGM-EXIT.                                       26060000
253400                                                                  26070000
253500 9050-NOSPACE-ERR-SEC.                                            26080000
253600     MOVE '!NOSPACE CONDITION      ' TO MSG-AREA.                 26090000
253700     PERFORM 9000-WRITE-CICS.                                     26100000
253800     PERFORM 9990-PGM-EXIT.                                       26110000
253900                                                                  26120000
254000 9060-QIDERR-SEC.                                                 26130000
254100     MOVE '!QIDERR  CONDITION      ' TO MSG-AREA.                 26140000
254200     PERFORM 9000-WRITE-CICS.                                     26150000
254300     PERFORM 9990-PGM-EXIT.                                       26160000
254400                                                                  26170000
254500 9070-ITEMERR-SEC.                                                26180000
254600     MOVE '!ITEMERR ERROR          ' TO MSG-AREA.                 26190000
254700     PERFORM 9000-WRITE-CICS.                                     26200000
254800     PERFORM 9990-PGM-EXIT.                                       26210000
254900                                                                  26220000
255000 9080-ENDDATA-SEC.                                                26230000
255100     MOVE '!RETRIEVE DATA CAN NT BE FOUND' TO MSG-AREA.           26240000
255200     PERFORM 9000-WRITE-CICS.                                     26250000
255300     PERFORM 9990-PGM-EXIT.                                       26260000
255400                                                                  26270000
255500 9090-TCP-TRUE-REQ.                                               26280000
255600     MOVE '!CAN NOT START SERVER..TRUE NOT ACTIVE' TO MSG-AREA.   26290000
255700     PERFORM 9000-WRITE-CICS.                                     26300000
255800     PERFORM 9990-PGM-EXIT.                                       26310000
255900                                                                  26320000
256000***************************************************************   26330000
256100* PGM-EXIT.                                                   *   26340000
256200*  THIS ROUTINE WILL OUTPUT A MESSAGE TO THE CICS LOG AND     *   26350000
256300*  TERMINATE THIS PROGRAM.                                    *   26360000
256400***************************************************************   26370000
256500 9990-PGM-EXIT.                                                   26380000
256600                                                                  26390000
256700     MOVE '!END OF THIS TRANSACTION' TO MSG-AREA.                 26400000
256800     PERFORM 9000-WRITE-CICS.                                     26410000
256900*                                                                 26420000
257000*       IF ERROR, CLOSE ALL OPEN SOCKETS                          26430000
257100*                                                                 26440000
257200     PERFORM VARYING SOCKNO FROM 1 BY 1                           26450000
257300                        UNTIL SOCKNO > MAX-SOCKETS-LESS1          26460000
257400        IF TBL-ST-AVAIL(SOCKNO) = 'N' THEN                        26470000
257500           PERFORM 7060-CLOSE-SOCKET                              26480000
257600        END-IF                                                    26490000
257700     END-PERFORM.                                                 26500000
257800*                                                                 26510000
257900*      CLOSE UP THE PORT                                          26520000
258000*                                                                 26530000
258100     MOVE 0 TO SOCKID.                                            26540000
258200     MOVE 0 TO ERRNO.                                             26550000
258300     MOVE 0 TO RETCODE.                                           26560000
258400     CALL 'EZASOKET' USING CLOSE-CMD SOCKID                       26570000
258500           ERRNO RETCODE.                                         26580000
258600                                                                  26590000
258700     IF STARTUP-AGAIN = 'Y' THEN                                  26600000
258800        EXEC CICS DELAY INTERVAL(05) END-EXEC                     26610000
258900        EXEC CICS START TRANSID(IP-LISTENER-TRAN)                 26620000
259000                           FROM(PV-HOLD-PORT)                     26630000
259100        END-EXEC                                                  26640000
259200     END-IF.                                                      26650000
259300                                                                  26660000
259400     EXEC CICS RETURN  END-EXEC.                                  26670000
259500 EJECT                                                            26680000
259600*                                                                 26690000
