000100******************************************************************00010000
000200 IDENTIFICATION DIVISION.                                         00020000
000300******************************************************************00030000
000400                                                                  00040000
000500 PROGRAM-ID.             DPKUT037.                                00050000
000600 AUTHOR.                 BRUCE JOHNSON / PLATINUM WISCONSIN.      00060000
000700 INSTALLATION.           KOHLS DEPARTMENT STORES.                 00070000
000800 DATE-WRITTEN.           1991-12-13.                              00080000
000900 DATE-COMPILED.                                                   00090000
001000                                                                  00100000
001100******************************************************************00110000
001200* THIS PGM WAS CREATED AS PART OF THE CHANGES REQUIRED WHEN      *00120000
001300* KOHL'S BEGAN USING MVS/ESA 4.1 - JES2 4.1 JCL ENHANCEMENTS.    *00130000
001400* (PROC WITHIN A PROC, INCLUDES, ETC.)                           *00140000
001500*                                                                *00150000
001600* PROGRAM PURPOSE:  TO CREATE A MODIFIED VERSION OF THE UNLOADED *00160000
001700*    'PKMO.PROCLIB' PDS WHICH CONTAINS JCL RECORDS MERGED FROM   *00170000
001800*    'SYS2.PROCLIB' AND 'PKMO.INCLLIB'.  THE MODIFIED, UNLOADED  *00180000
001900*    'PKMO.PROCLIB' FILE WILL THEN BE UPLOADED TO A PDS WHICH    *00190000
002000*    WILL THEN BE USED AS INPUT TO ASSEMBLER PROGRAM 'PROCXREF'. *00200000
002100*                                                                *00210000
002200* PROCESSING OVERVIEW:  THE UNLOADED (SEQUENTIAL) 'PKMO.PROCLIB' *00220000
002300*    FILE IS READ AND RECORDS ARE PROCESSED ACCORDING TO         *00230000
002400*    THEIR FUNCTION.                                             *00240000
002500*                                                                *00250000
002600*    './ ADD' RECORDS SIGNAL A NEW PDS MEMBER IS TO BE PROCESSED.*00260000
002700*    THESE ARE THE ONLY 'NON JCL' RECORDS IN THE UNLOADED FILE.  *00270000
002800*    THESE RECORDS ARE WRITTEN DIRECTLY TO THE OUTPUT FILE.      *00280000
002900*                                                                *00290000
003000*    JCL COMMENT RECORDS ARE NOT WRITTEN SINCE THEY WILL BE      *00300000
003100*    STRIPPED OUT BY LATER PROCESSING ANYWAY.                    *00310000
003200*                                                                *00320000
003300*    IF THE JCL RECORD EXECUTES A PROC, ALL SYMBOLICS FOR THAT   *00330000
003400*    PROC ARE WRITTEN TO A TABLE FOR LATER PROCESSING.  OVERRIDES*00340000
003500*    FOR THAT PROC ARE THEN WRITTEN TO A TABLE FOR LATER         *00350000
003600*    PROCESSING.  AFTER THIS, THE PROC ITSELF IS READ FROM       *00360000
003700*    'SYS2.PROCLIB' AFTER BEING DYNAMICALLY ALLOCATED BY A CALL  *00370000
003800*    TO 'DYNALC'.  THE 'SYS2.PROCLIB' RECORDS ARE THEN READ INTO *00380000
003900*    A TABLE AND STORED THERE FOR LATER PROCESSING.  EACH PROC   *00390000
004000*    IS READ ONLY ONCE, SUBSEQUENT REQUESTS FOR THE PROC WILL    *00400000
004100*    GET THE PROC FROM THE INTERNAL PROC TABLE.  THIS CUTS DOWN  *00410000
004200*    I/O SIGNIFICANTLY.  THE SAME TYPE OF LOGIC IS ALSO USED     *00420000
004300*    FOR 'INCLUDE' TYPE OF JCL RECORDS DESCRIBED NEXT.           *00430000
004400*                                                                *00440000
004500*    IF THE JCL RECORD IS AN 'INCLUDE' TYPE OF RECORD, 'PKMO.    *00450000
004600*    INCLLIB(MEMBERNAME)' IS DYNAMICALLY ALLOCATED VIA           *00460000
004700*    PROGRAM 'DYNALC'.  THE JCL RECORDS ARE THEN READ INTO THE   *00470000
004800*    INTERNAL 'INCLUDE' TABLE, AND AT THE SAME TIME ARE MERGED   *00480000
004900*    INTO THE UNLOADED 'PKMO.PROCLIB' FILE.                      *00490000
005000*                                                                *00500000
005100*    IF THE JCL RECORD TYPE IS NOT ONE OF THE ABOVE, IE, A DD    *00510000
005200*    STATEMENT, THE RECORD IS WRITTEN DIRECTLY TO THE OUTPUT     *00520000
005300*    FILE.                                                       *00530000
005400*                                                                *00540000
005500*    PROCESSING IS COMPLICATED BY THE FACT THAT SYMBOLICS HAVE   *00550000
005600*    TO BE RESOLVED AND THAT OVERRIDES MUST BE PLACED INTO THEIR *00560000
005700*    CORRECT STEP IN 'SYS2.PROCLIB'.  IN ADDITION, 'SYS2.PROCLIB'*00570000
005800*    JCL CAN ALSO CONTAIN 'INCLUDE' TYPE OF JCL RECORDS AND      *00580000
005900*    SYMBOLICS, BOTH OF WHICH NEED TO BE RESOLVED.               *00590000
006000*                                                                *00600000
006100*    LAST UPDATED  2/19/92 --  BRUCE JOHNSON  --  PLATINUM       *00610000
006200*       - CHANGED PROGRAM TO NOT ABEND WHEN A PROC IS NOT FOUND  *00620000
006300*         IN SYS2.PROCLIB AND WHEN AN  INCLUDE MEMBER IS NOT     *00630000
006400*         FOUND IN PKMO.INCLLIB.                                 *00640000
006500******************************************************************00650000
006600*                                                                *00660000
006700* INPUT FILES:  UNLOADED PKMO.PROCLIB DATASET                    *00670000
006800*               SYS2.PROCLIB PDS                                 *00680000
006900*               PKMO.INCLLIB PDS                                 *00690000
007000*                                                                *00700000
007100* OUTPUT FILES: MODIFIED UNLOADED PKMO.PROCLIB DATASET           *00710000
007200*               ALERTS TO NON-FATAL JCL ERRORS/INTEGRITY ERRORS  *00720000
007210*                                                                *00721000
007220* DB2 TABLES:   NONE                                             *00722000
007230*                                                                *00723000
007240* DATA BASES:   NONE                                             *00724000
007250*                                                                *00725000
007260******************************************************************00726000
007270                                                                  00727000
007280******************************************************************00728000
007290 ENVIRONMENT DIVISION.                                            00729000
007300******************************************************************00730000
007400                                                                  00740000
007500 CONFIGURATION SECTION.                                           00750000
007600                                                                  00760000
007700 SOURCE-COMPUTER.                        IBM-3090.                00770000
007800 OBJECT-COMPUTER.                        IBM-3090.                00780000
007900                                                                  00790000
008000 INPUT-OUTPUT SECTION.                                            00800000
008100                                                                  00810000
008200 FILE-CONTROL.                                                    00820000
008300                                                                  00830000
008400     SELECT                      PROCLIB-FILE                     00840000
008500                                 ASSIGN TO INP01.                 00850000
008600                                                                  00860000
008700     SELECT                      SYS2-PROCLIB-FILE                00870000
008800                                 ASSIGN TO INP02.                 00880000
008900                                                                  00890000
009000     SELECT                      INCLUDE-FILE                     00900000
009100                                 ASSIGN TO INP03.                 00910000
009200                                                                  00920000
009300     SELECT                      MODIFIED-PROCLIB-FILE            00930000
009400                                 ASSIGN TO OUT01.                 00940000
009500                                                                  00950000
009600     SELECT                      ALERT-FILE                       00960000
009700                                 ASSIGN TO OUT02.                 00970000
009710                                                                  00971003
009720     SELECT                      TRACKING-FILE                    00972003
009730                                 ASSIGN TO OUT03.                 00973003
009800                                                                  00980000
009900******************************************************************00990000
010000 DATA DIVISION.                                                   01000000
010100******************************************************************01010000
010200                                                                  01020000
010300 FILE SECTION.                                                    01030000
010400                                                                  01040000
010500 FD  PROCLIB-FILE                                                 01050000
010600     RECORDING MODE IS F                                          01060000
010700     LABEL RECORDS ARE STANDARD                                   01070000
010800     BLOCK CONTAINS 0 RECORDS                                     01080000
010900     RECORD CONTAINS 80 CHARACTERS                                01090000
011000     DATA RECORD IS PROCLIB-RECORD.                               01100000
011100                                                                  01110000
011200 01  PROCLIB-RECORD                      PIC X(80).               01120000
011300                                                                  01130000
011400 FD  SYS2-PROCLIB-FILE                                            01140000
011500     RECORDING MODE IS F                                          01150000
011600     LABEL RECORDS ARE STANDARD                                   01160000
011700     BLOCK CONTAINS 0 RECORDS                                     01170000
011800     RECORD CONTAINS 80 CHARACTERS                                01180000
011900     DATA RECORD IS SYS2-PROCLIB-REC.                             01190000
012000                                                                  01200000
012100 01  SYS2-PROCLIB-REC                    PIC X(80).               01210000
012200                                                                  01220000
012300 FD  INCLUDE-FILE                                                 01230000
012400     RECORDING MODE IS F                                          01240000
012500     LABEL RECORDS ARE STANDARD                                   01250000
012600     BLOCK CONTAINS 0 RECORDS                                     01260000
012700     RECORD CONTAINS 80 CHARACTERS                                01270000
012800     DATA RECORD IS INCLUDE-REC.                                  01280000
012900                                                                  01290000
013000 01  INCLUDE-REC                         PIC X(80).               01300000
013100                                                                  01310000
013200 FD  MODIFIED-PROCLIB-FILE                                        01320000
013300     RECORDING MODE IS F                                          01330000
013400     LABEL RECORDS ARE STANDARD                                   01340000
013500     BLOCK CONTAINS 0 RECORDS                                     01350000
013600     RECORD CONTAINS 80 CHARACTERS                                01360000
013700     DATA RECORD IS MODIFIED-PROCLIB-RECORD.                      01370000
013800                                                                  01380000
013900 01  MODIFIED-PROCLIB-RECORD             PIC X(80).               01390000
014000                                                                  01400000
014100 FD  ALERT-FILE                                                   01410000
014200     RECORDING MODE IS F                                          01420000
014300     LABEL RECORDS ARE STANDARD                                   01430000
014400     BLOCK CONTAINS 0 RECORDS                                     01440000
014410     RECORD CONTAINS 80 CHARACTERS                                01441000
014420     DATA RECORD IS ALERT-RECORD.                                 01442000
014430                                                                  01443000
014440 01  ALERT-RECORD                        PIC X(80).               01444000
014441                                                                  01444103
014442 FD  TRACKING-FILE                                                01444203
014443     RECORDING MODE IS F                                          01444303
014444     LABEL RECORDS ARE STANDARD                                   01444403
014445     BLOCK CONTAINS 0 RECORDS                                     01444503
014446     RECORD CONTAINS 80 CHARACTERS                                01444603
014447     DATA RECORD IS TRACKING-RECORD.                              01444703
014448                                                                  01444803
014449 01  TRACKING-RECORD                     PIC X(80).               01444903
014450                                                                  01445000
014460                                                                  01446000
014470******************************************************************01447000
014480 WORKING-STORAGE SECTION.                                         01448000
014490******************************************************************01449000
014500                                                                  01450000
014600******************************************************************01460000
014700*LAYOUT FOR THE PROCLIB LIBRARY FILE                              01470000
014800******************************************************************01480000
014900                                                                  01490000
015000 01  PKMO-PROCLIB-RECORD.                                         01500000
015100     05  PKMO-PROCLIB-FIRST-3-BYTES      PIC X(03)   VALUE SPACE. 01510000
015200         88  COMMENTS-RECORD                         VALUE '//*'. 01520000
015300         88  ADD-RECORD                              VALUE './ '. 01530000
015400     05  FILLER                          PIC X(77)   VALUE SPACE. 01540000
015500 01  PKMO-PROCLIB-RECORD-RED REDEFINES PKMO-PROCLIB-RECORD.       01550000
015600     05  PKMO-PROCLIB-LABEL              PIC X(10).               01560000
015700     05  FILLER                          PIC X(70).               01570000
015800 01  PKMO-PROCLIB-RECORD-RED1 REDEFINES PKMO-PROCLIB-RECORD.      01580000
015900     05  PKMO-PROCLIB-FIRST-72           PIC X(72).               01590000
016000     05  FILLER                          PIC X(08).               01600000
016100                                                                  01610000
016200******************************************************************01620000
016300*LAYOUT FOR THE SYS2 PROCLIB LIBRARY FILE                         01630000
016400******************************************************************01640000
016500                                                                  01650000
016600 01  SYS2-PROCLIB-RECORD.                                         01660000
016700     05  SYS2-PROCLIB-FIRST-3-BYTES      PIC X(03)   VALUE SPACE. 01670000
016800         88  SYS2-COMMENTS-RECORD                    VALUE '//*'. 01680000
016900     05  FILLER                          PIC X(77)   VALUE SPACE. 01690000
017000                                                                  01700000
017100******************************************************************01710000
017200*LAYOUT FOR THE INCLUDE LIBRARY FILE                              01720000
017300******************************************************************01730000
017400                                                                  01740000
017500 01  INCLUDE-RECORD.                                              01750000
017600     05  INCLUDE-PROCLIB-FIRST-3-BYTES   PIC X(03)   VALUE SPACE. 01760000
017700         88  INCLUDE-COMMENTS-RECORD                 VALUE '//*'. 01770000
017800     05  FILLER                          PIC X(77)   VALUE SPACE. 01780000
017900                                                                  01790000
018000******************************************************************01800000
018100*LAYOUT FOR THE MODIFIED PROCLIB FILE                             01810000
018200******************************************************************01820000
018300                                                                  01830000
018400 01  PKMO-PROCLIB-MOD-RECORD-OUT.                                 01840000
018500     05  PKMO-PROCLIB-MOD-RECORD         PIC X(80)   VALUE SPACE. 01850000
018600     EJECT                                                        01860000
018700******************************************************************01870000
018800* PS PROGRAM SWITCHES                                            *01880000
018900******************************************************************01890000
019000 01  PS-SWITCHES.                                                 01900000
019100     05  PS-END-OF-PROCLIB-FILE          PIC X(01)   VALUE 'N'.   01910000
019200         88  END-OF-PROCLIB-FILE                     VALUE 'Y'.   01920000
019300     05  PS-END-OF-SYS2-PROCLIB-FILE     PIC X(01)   VALUE 'N'.   01930000
019400         88  END-OF-SYS2-PROCLIB-FILE                VALUE 'Y'.   01940000
019500     05  PS-END-OF-INCLUDE-FILE          PIC X(01)   VALUE 'N'.   01950000
019600         88  END-OF-INCLUDE-FILE                     VALUE 'Y'.   01960000
019700     05  PS-PROC-FOUND                   PIC X(01)   VALUE 'N'.   01970000
019800         88  PROC-FOUND                              VALUE 'Y'.   01980000
019900     05  PS-PROGRAM-FOUND                PIC X(01)   VALUE 'N'.   01990000
020000         88  PROGRAM-FOUND                           VALUE 'Y'.   02000000
020100     05  PS-INCLUDE-FOUND                PIC X(01)   VALUE 'N'.   02010000
020200         88  INCLUDE-FOUND                           VALUE 'Y'.   02020000
020300     05  PS-ALL-SYMBOLICS-LOADED         PIC X(01)   VALUE 'N'.   02030000
020400         88  ALL-SYMBOLICS-LOADED                    VALUE 'Y'.   02040000
020500     05  PS-SYMBOLIC-ENTRY-LOADED        PIC X(01)   VALUE 'N'.   02050000
020600         88  SYMBOLIC-ENTRY-LOADED                   VALUE 'Y'.   02060000
020700     05  PS-ALL-SYMBOLICS-RESOLVED       PIC X(01)   VALUE 'N'.   02070000
020800         88  ALL-SYMBOLICS-RESOLVED                  VALUE 'Y'.   02080000
020900     05  PS-SYMBOLIC-FOUND               PIC X(01)   VALUE 'N'.   02090000
021000         88  SYMBOLIC-FOUND                          VALUE 'Y'.   02100000
021100     05  PS-AMPERSAND-FOUND              PIC X(01)   VALUE 'N'.   02110000
021200         88  AMPERSAND-FOUND                         VALUE 'Y'.   02120000
021300     05  PS-ALL-OVERRIDES-PROCESSED      PIC X(01)   VALUE 'N'.   02130000
021400         88  ALL-OVERRIDES-PROCESSED                 VALUE 'Y'.   02140000
021500     05  PS-ALL-OVERRIDES-MERGED         PIC X(01)   VALUE 'N'.   02150000
021600         88  ALL-OVERRIDES-MERGED                    VALUE 'Y'.   02160000
021700     05  PS-STEP-OVERRIDES-MERGED        PIC X(01)   VALUE 'N'.   02170000
021800         88  STEP-OVERRIDES-MERGED                   VALUE 'Y'.   02180000
021900     05  PS-FIRST-TIME-THRU              PIC X(01)   VALUE 'N'.   02190000
022000         88  FIRST-TIME-THRU                         VALUE 'Y'.   02200000
022100     05  PS-PROCESSING-SYS2-SYMBOLICS    PIC X(01)   VALUE 'N'.   02210000
022200         88  PROCESSING-SYS2-SYMBOLICS               VALUE 'Y'.   02220000
022300     05  PS-END-MARK-FOUND               PIC X(01).               02230000
022400         88  END-MARK-FOUND                                       02240000
022500         VALUES ARE ' ' QUOTE '.' '&' '=' '(' ')' ','.            02250000
022600     05  PS-PROCESSING-QUOTES            PIC X(01)   VALUE 'N'.   02260000
022700         88  PROCESSING-QUOTES                       VALUE 'Y'.   02270000
022800     05  PS-KEYWORD-FOUND                PIC X(01)   VALUE 'N'.   02280000
022900         88  KEYWORD-FOUND                           VALUE 'Y'.   02290000
023000                                                                  02300000
023100******************************************************************02310000
023200* PV PROGRAM VARIABLES                                           *02320000
023300******************************************************************02330000
023400 01  PV-PROGRAM-VARIABLES.                                        02340000
023500     05  PV-KEYWORD                       PIC X(25)   VALUE SPACE.02350000
023600     05  PV-KEYWORD-SAVE                  PIC X(25)   VALUE SPACE.02360000
023700     05  PV-KEYWORD-INDEX                 PIC S9(03)  VALUE +0    02370000
023800                                          COMP-3.                 02380000
023900     05  PV-WORK-INDEX                    PIC S9(03)  VALUE +0    02390000
024000                                          COMP-3.                 02400000
024100     05  PV-OVERRIDE-INDEX                PIC S9(03)  VALUE +0    02410000
024200                                          COMP-3.                 02420000
024300     05  PV-PROC-JCL-WORK-INDEX           PIC S9(03)  VALUE +0    02430000
024400                                          COMP-3.                 02440000
024500     05  PV-RECORD-INDEX                  PIC S9(03)  VALUE +0    02450000
024600                                          COMP-3.                 02460000
024700     05  PV-RECORD-SAVE-INDEX             PIC S9(03)  VALUE +0    02470000
024800                                          COMP-3.                 02480000
024900     05  PV-RECORD-INDEX-HOLD             PIC S9(03)  VALUE +0    02490000
025000                                          COMP-3.                 02500000
025100     05  PV-END-OF-SYMBOLIC-INDEX         PIC S9(03)  VALUE +0    02510000
025200                                          COMP-3.                 02520000
025300     05  PV-SYMBOLIC-WORK-INDEX           PIC S9(03)  VALUE +0    02530000
025400                                          COMP-3.                 02540000
025500     05  PV-SYMBOLIC-INDEX                PIC S9(03)  VALUE +0    02550000
025600                                          COMP-3.                 02560000
025700     05  PV-JCL-INDEX                     PIC S9(05)  VALUE +0    02570000
025800                                          COMP-3.                 02580000
025900     05  PV-PROC-JCL-NAME-SAVE           PIC X(08)   VALUE SPACE. 02590000
026000                                                                  02600000
026100     05  PV-RECORD-LABEL-SAVE            PIC X(10)   VALUE SPACE. 02610000
026200                                                                  02620000
026300     05  PV-PROCLIB-LABEL-SAVE           PIC X(10)   VALUE SPACE. 02630000
026400                                                                  02640000
026500     05  PV-INCLUDE-NAME-SAVE            PIC X(08)   VALUE SPACE. 02650000
026600                                                                  02660000
026700     05  PV-STEPNAME                     PIC X(10)   VALUE SPACE. 02670000
026800                                                                  02680000
026900     05  PV-ADD-RECORD                   PIC X(80)   VALUE SPACE. 02690000
026901     05  FILLER                          REDEFINES PV-ADD-RECORD. 02690100
026902         10  FILLER                      PIC X(13).               02690200
026903         10  PV-ADD-RECORD-MEMBER-NAME   PIC X(8).                02690300
026904         10  FILLER                      PIC X(59).               02690400
026905     05  PV-DISPLAY-TABLE-USED           PIC ZZZZ9   VALUE SPACE. 02690500
026906     05  PV-DISPLAY-TABLE-MAX            PIC ZZZZ9   VALUE SPACE. 02690600
026907                                                                  02690700
026908 01  MT-MAXIMUM-TABLE-USE-COUNTS.                                 02690800
026909     05  MT-KEYWORD-COUNT                PIC S9(5)   VALUE ZEROS. 02690900
026910     05  MT-SYMBOLIC-COUNT               PIC S9(5)   VALUE ZEROS. 02691000
026920     05  MT-SYMBOLIC-WORK-COUNT          PIC S9(5)   VALUE ZEROS. 02692000
026930     05  MT-PROC-JCL-COUNT               PIC S9(5)   VALUE ZEROS. 02693000
026940     05  MT-PROC-JCL-WORK-COUNT          PIC S9(5)   VALUE ZEROS. 02694000
026950     05  MT-INCLUDE-COUNT                PIC S9(5)   VALUE ZEROS. 02695000
026960     05  MT-OVERRIDE-COUNT               PIC S9(5)   VALUE ZEROS. 02696000
026970                                                                  02697000
026980******************************************************************02698000
026990*  PARAMETER LIST FOR THE DYNAMIC ALLOCATION ROUTINE.             02699000
027000******************************************************************02700000
027001     COPY DPWS023.                                                02700100
027002                                                                  02700200
027003******************************************************************02700300
027004* TB PROGRAM TABLES.                                              02700400
027005******************************************************************02700500
027006 01  TB-PROGRAM-TABLES.                                           02700600
027007     05  TB-KEYWORD-TABLE.                                        02700700
027008         10  TB-KEYWORD-ENTRY            OCCURS                   02700800
027009                                         25                       02700900
027010                                         TIMES.                   02701000
027020             15  TB-KEYWORD-BYTE         PIC X(01)   VALUE SPACE. 02702000
027030     05  TB-KEYWORD REDEFINES TB-KEYWORD-TABLE                    02703000
027040                                         PIC X(25).               02704000
027050     05  TB-RECORD-TABLE.                                         02705000
027060         10  TB-RECORD-ENTRY             OCCURS 80 TIMES.         02706000
027070             15  TB-RECORD-BYTE          PIC X(01)   VALUE SPACE. 02707000
027080     05  TB-RECORD  REDEFINES TB-RECORD-TABLE                     02708000
027090                                          PIC X(80).              02709000
027100     05  TB-RECORD-RED REDEFINES TB-RECORD-TABLE.                 02710000
027200         10  TB-RECORD-LABEL              PIC X(10).              02720000
027300         10  FILLER                       PIC X(70).              02730000
027400* ALL THE SYMBOLICS FROM THE 'EXEC PROCNAME' STEPS IN EACH PROC   02740000
027500* ARE STORED HERE.  UP TO 100 SYMBOLICS PER PROC, UP TO 70 BYTES  02750000
027600* PER SYMBOLIC.                                                   02760000
027700     05  TB-SYMBOLIC-TABLE.                                       02770000
027800         10  TB-SYMBOLIC-ENTRY           OCCURS                   02780000
027900                                         100                      02790000
028000                                         TIMES.                   02800000
028100             15  TB-SYMBOLIC-NAME        PIC X(70)  VALUE SPACE.  02810000
028200             15  TB-SYMBOLIC-NAME-RED REDEFINES TB-SYMBOLIC-NAME. 02820000
028300                 20  TB-SYMBOLIC-NAME-ENTRY OCCURS                02830000
028400                                         70                       02840000
028500                                         TIMES.                   02850000
028600                     25  TB-SYMBOLIC-BYTE PIC X(01).              02860000
028700                                                                  02870000
028800     05  TB-SYMBOLIC-WORK-TABLE.                                  02880000
028900         10  TB-SYMBOLIC-WORK-BYTE       OCCURS                   02890000
029000                                         70                       02900000
029100                                         TIMES                    02910000
029200                                         PIC X(01).               02920000
029300     05  TB-SYMBOLIC-WORK REDEFINES TB-SYMBOLIC-WORK-TABLE        02930000
029400                                         PIC X(70).               02940000
029500     05  TB-PROC-JCL-TABLE.                                       02950000
029600         10  TB-PROC-JCL-ENTRY           OCCURS                   02960000
029700                                         3000                     02970000
029800                                         TIMES                    02980000
029900             INDEXED BY PV-PROC-JCL-INDEX.                        02990000
030000             15  TB-PROC-JCL-MEMBER-NAME PIC X(08)   VALUE SPACE. 03000000
030100             15  TB-PROC-JCL-RECORD      PIC X(80)   VALUE SPACE. 03010000
030200                                                                  03020000
030300     05  TB-PROC-JCL-WORK-TABLE.                                  03030000
030400         10  TB-PROC-JCL-WORK-ENTRY      OCCURS                   03040000
030500                                         3000                     03050000
030600                                         TIMES.                   03060000
030700             15  TB-PROC-JCL-WORK-RECORD PIC X(80)   VALUE SPACE. 03070000
030800                                                                  03080000
030900     05  TB-INCLUDE-TABLE.                                        03090000
031000         10  TB-INCLUDE-ENTRY            OCCURS                   03100000
031100                                         1000                     03110000
031200                                         TIMES                    03120000
031300             INDEXED BY PV-INCLUDE-INDEX.                         03130000
031400             15  TB-INCLUDE-MEMBER-NAME  PIC X(08)   VALUE SPACE. 03140000
031500             15  TB-INCLUDE-RECORD       PIC X(80)   VALUE SPACE. 03150000
031600                                                                  03160000
031700     05  TB-OVERRIDE-TABLE.                                       03170000
031800         10  TB-OVERRIDE-ENTRY           OCCURS                   03180000
031900                                         1000                     03190000
032000                                         TIMES.                   03200000
032100             15  TB-OVERRIDE-STEPNAME    PIC X(10)   VALUE SPACE. 03210000
032200             15  TB-OVERRIDE-RECORD      PIC X(80)   VALUE SPACE. 03220000
032300                                                                  03230000
032400     05  TB-RECORD-SAVE-TABLE.                                    03240000
032500         10  TB-RECORD-SAVE-ENTRY        OCCURS 80 TIMES.         03250000
032600             15  TB-RECORD-SAVE-BYTE     PIC X(01)   VALUE SPACE. 03260000
032700                                                                  03270000
032800******************************************************************03280000
032900* PC PROGRAM CONSTANTS                                           *03290000
033000******************************************************************03300000
033100 01  PC-PROGRAM-CONSTANTS.                                        03310000
033200     05  PC-CURRENT-PROGRAM-NAME          PIC X(08)               03320000
033300         VALUE 'DPKUT037'.                                        03330000
033400     05  PC-MAX-OVERRIDE                  PIC S9(04)  VALUE +1000 03340000
033500                                          COMP.                   03350000
033600     05  PC-MAX-SYMBOLIC                  PIC S9(04)  VALUE +100  03360000
033700                                          COMP.                   03370000
033800     05  PC-MAX-SYMBOLIC-NAME             PIC S9(04)  VALUE +70   03380000
033900                                          COMP.                   03390000
034000     05  PC-MAX-PROC-JCL                  PIC S9(04)  VALUE +3000 03400000
034100                                          COMP.                   03410000
034200     05  PC-MAX-PROC-JCL-WORK             PIC S9(04)  VALUE +3000 03420000
034300                                          COMP.                   03430000
034400     05  PC-MAX-INCLUDE                   PIC S9(04)  VALUE +1000 03440000
034500                                          COMP.                   03450000
034600     05  PC-MAX-KEYWORD                   PIC S9(04)  VALUE +25   03460000
034700                                          COMP.                   03470000
034800     05  PC-EXEC                          PIC X(04)               03480000
034900         VALUE 'EXEC'.                                            03490000
035000     05  PC-PROC                          PIC X(04)               03500000
035100         VALUE 'PROC'.                                            03510000
035200     05  PC-PROC-EQUAL                    PIC X(05)               03520000
035300         VALUE 'PROC='.                                           03530000
035400     05  PC-INCLUDE                       PIC X(07)               03540000
035500         VALUE 'INCLUDE'.                                         03550000
035600     05  PC-COMMA                         PIC X(01)               03560000
035700         VALUE ','.                                               03570000
035800     05  PC-QUOTE                         PIC X(01)               03580000
035900         VALUE QUOTE.                                             03590000
036000     05  PC-PERIOD                        PIC X(01)               03600000
036100         VALUE '.'.                                               03610000
036200     05  PC-SLASH                         PIC X(01)               03620000
036300         VALUE '/'.                                               03630000
036400     05  PC-EQUAL                         PIC X(01)               03640000
036500         VALUE '='.                                               03650000
036600     05  PC-AMPERSAND                     PIC X(01)               03660000
036700         VALUE '&'.                                               03670000
036800     05  PC-SPACE                         PIC X(01)               03680000
036900         VALUE ' '.                                               03690000
037000     05  PC-END-OF-JCL-RECORDS.                                   03700000
037100         10  FILLER                       PIC X(02)               03710000
037200             VALUE '//'.                                          03720000
037300         10  FILLER                       PIC X(70)               03730000
037400             VALUE SPACE.                                         03740000
037500     05  PC-END-OF-JCL-COLUMN             PIC 9(02)               03750000
037600             VALUE 71.                                            03760000
037700     05  PC-JCL-CONTINUE-COLUMN           PIC 9(02)               03770000
037800             VALUE 72.                                            03780000
037900     05  PC-JCL-COLUMN-4                  PIC 9(02)               03790000
038000             VALUE 4.                                             03800000
038100 01  ABEND-CODE                           PIC S9(04)  VALUE +0    03810000
038200                                          COMP SYNC.              03820000
038300 EJECT                                                            03830000
038400 LINKAGE SECTION.                                                 03840000
038500                                                                  03850000
038600                                                                  03860000
038700******************************************************************03870000
038800 PROCEDURE DIVISION.                                              03880000
038900******************************************************************03890000
039000*                                                                 03900000
039100******************************************************************03910000
039200*0000-MAINLINE     - HIGHEST LEVEL CONTROL ROUTINE.              *03920000
039300******************************************************************03930000
039400 0000-MAINLINE.                                                   03940000
039500                                                                  03950000
039600     PERFORM                     1000-PRE-PROCESSING.             03960000
039700                                                                  03970000
039800     PERFORM                     2000-PROCESS-FILE                03980000
039900         UNTIL                   END-OF-PROCLIB-FILE.             03990000
040000                                                                  04000000
040100     PERFORM                     9000-EOJ-PROCESSING.             04010000
040200                                                                  04020000
040300     STOP RUN.                                                    04030000
040400     EJECT                                                        04040000
040500******************************************************************04050000
040600* 1000-PRE-PROCESSING.                                            04060000
040700* ==> PROCESSES:                                                  04070000
040800*   - OPENS THE FILES.                                            04080000
040900*   - PERFORMS PRIMING READ.                                      04090000
041000*     PERFORMED BY : 0000-MAINLINE.                               04100000
041100******************************************************************04110000
041200 1000-PRE-PROCESSING.                                             04120000
041300                                                                  04130000
041400     OPEN INPUT                  PROCLIB-FILE                     04140000
041500          OUTPUT                 MODIFIED-PROCLIB-FILE            04150000
041600                                 ALERT-FILE                       04160003
041610                                 TRACKING-FILE.                   04161003
041700                                                                  04170000
041800     PERFORM                     8000-READ-PROCLIB-FILE.          04180000
041900                                                                  04190000
042000     IF  END-OF-PROCLIB-FILE                                      04200000
042100         DISPLAY '*** ABEND ***'                                  04210000
042200         DISPLAY '*** PARAGRAPH 1000- ***'                        04220000
042300         DISPLAY '*** NO RECORDS IN PROCLIB FILE ***'             04230000
042400         MOVE                    +4002 TO ABEND-CODE              04240000
042500         CALL                   'ILBOABN0' USING ABEND-CODE       04250000
042600     END-IF.                                                      04260000
042700                                                                  04270000
042800     EJECT                                                        04280000
042900******************************************************************04290000
043000* 2000-PROCESS-FILE.                                             *04300000
043100* ==> PROCESSES:                                                 *04310000
043200*   - FIRST DETERMINES IF THE RECORD READ IS A './' ADD RECORD   *04320000
043300*     IF YES, THEN THE RECORD IS WRITTEN OUT.                    *04330000
043400*   - THE RECORD IS BYPASSED (NOT WRITTEN) IF IT'S A COMMENT REC.*04340000
043500*   - IF THE RECORD IS NOT AN 'ADD' OR COMMENTS RECORD,          *04350000
043600*     THEN SEARCHES ARE PERFORMED TO IDENTIFY KEY JCL            *04360000
043700*     WORDS ('EXEC' AND 'INCLUDE').  IF FOUND, PROCESSING        *04370000
043800*     CONTINUES.  IF NOT FOUND, THE RECORD IS WRITTEN AND THE    *04380000
043900*     NEXT RECORD IS READ.                                       *04390000
044000* ==> PERFORMED BY :                                             *04400000
044100*   - 0000-MAINLINE.                                             *04410000
044200******************************************************************04420000
044300 2000-PROCESS-FILE.                                               04430000
044400                                                                  04440000
044500     IF  ADD-RECORD                                               04450000
044600         MOVE PKMO-PROCLIB-RECORD TO PKMO-PROCLIB-MOD-RECORD      04460000
044700                                 PV-ADD-RECORD                    04470000
044701         INITIALIZE TRACKING-RECORD                               04470103
044702         STRING PC-CURRENT-PROGRAM-NAME          DELIMITED BY SIZE04470203
044703                ' - START PROCESSING PROC '      DELIMITED BY SIZE04470303
044712                PV-ADD-RECORD-MEMBER-NAME        DELIMITED BY SIZE04471203
044713             INTO TRACKING-RECORD                                 04471303
044715         WRITE TRACKING-RECORD                                    04471503
044800         PERFORM                 8100-WRITE-PROCLIB-RECORD        04480000
044900         PERFORM                 8000-READ-PROCLIB-FILE           04490000
045000     ELSE                                                         04500000
045100* COMMENT RECORDS ARE NOT WRITTEN OUT                             04510000
045200         IF  COMMENTS-RECORD                                      04520000
045300             PERFORM             8000-READ-PROCLIB-FILE           04530000
045400         ELSE                                                     04540000
045500             MOVE 'N'            TO PS-PROC-FOUND                 04550000
045600             PERFORM             2100-SEARCH-FOR-EXEC             04560000
045700             IF  PROC-FOUND                                       04570000
045800                 MOVE +1         TO PV-OVERRIDE-INDEX             04580000
045900                 MOVE SPACE      TO TB-OVERRIDE-TABLE             04590000
046000                                 PV-STEPNAME                      04600000
046100                 MOVE 'N'        TO PS-ALL-OVERRIDES-PROCESSED    04610000
046200                 PERFORM         3000-LOAD-OVERRIDE-TABLE         04620000
046300                     UNTIL       ALL-OVERRIDES-PROCESSED          04630000
046400                 PERFORM         4000-MERGE-PROC-JCL              04640000
046500             ELSE                                                 04650000
046600                 MOVE 'N'        TO PS-INCLUDE-FOUND              04660000
046700                 PERFORM         2200-SEARCH-FOR-INCLUDE          04670000
046800                 IF  INCLUDE-FOUND                                04680000
046900                     MOVE TB-KEYWORD                              04690000
047000                                 TO PV-INCLUDE-NAME-SAVE          04700000
047100                     PERFORM     5000-MERGE-INCLUDE-JCL           04710000
047200                     PERFORM     8000-READ-PROCLIB-FILE           04720000
047300                 ELSE                                             04730000
047400                     MOVE PKMO-PROCLIB-RECORD                     04740000
047500                                 TO PKMO-PROCLIB-MOD-RECORD       04750000
047600                     PERFORM     8100-WRITE-PROCLIB-RECORD        04760000
047700                     PERFORM     8000-READ-PROCLIB-FILE           04770000
047800                 END-IF                                           04780000
047900             END-IF                                               04790000
048000         END-IF                                                   04800000
048100     END-IF.                                                      04810000
048200     EJECT                                                        04820000
048300******************************************************************04830000
048400* 2100-SEARCH-FOR-EXEC.                                          *04840000
048500* ==> PROCESSES:                                                 *04850000
048600*   - SCANS THE RECORD LOOKING FOR THE KEYWORD 'EXEC'.           *04860000
048700*     IF 'EXEC' IS FOUND, CONTINUES THE SCAN LOOKING FOR PROCNAME*04870000
048800*   - IF PROCNAME IS FOUND, PERFORMS PROCESSING TO EXTRACT ANY   *04880000
048900*     SYMBOLICS THAT MAY BE ASSOCIATED WITH THIS PROC.           *04890000
049000* ==> PERFORMED BY :                                             *04900000
049100*   - 2000-PROCESS-FILE.                                         *04910000
049200******************************************************************04920000
049300 2100-SEARCH-FOR-EXEC.                                            04930000
049400                                                                  04940000
049500     MOVE PKMO-PROCLIB-RECORD    TO TB-RECORD.                    04950000
049600     MOVE PC-EXEC                TO PV-KEYWORD.                   04960000
049700                                                                  04970000
049800     PERFORM                     6000-SCAN-FOR-KEYWORD.           04980000
049900                                                                  04990000
050000     IF KEYWORD-FOUND                                             05000000
050100* BUMP PASSED SPACES BETWEEN 'EXEC' AND PROGRAM NAME OR PROC NAME 05010000
050200         PERFORM                                                  05020000
050300             VARYING             PV-RECORD-INDEX                  05030000
050400             FROM                PV-RECORD-INDEX BY 1             05040000
050500             UNTIL               TB-RECORD-BYTE(PV-RECORD-INDEX)  05050000
050600             NOT =               SPACE                            05060000
050700         END-PERFORM                                              05070000
050800* WE'RE NOW AT THE BEGINNING OF 'PGM=', 'PROGRAM=', 'PROC='       05080000
050900* OR THE PROCNAME.                                                05090000
051000         MOVE 'N'                TO PS-PROC-FOUND                 05100000
051100         MOVE 'N'                TO PS-PROGRAM-FOUND              05110000
051200         MOVE SPACE              TO TB-KEYWORD                    05120000
051300         MOVE +0                 TO PV-KEYWORD-INDEX              05130000
051400         PERFORM                 2110-SCAN-FOR-PROC-NAME          05140000
051500             VARYING             PV-RECORD-INDEX                  05150000
051600             FROM                PV-RECORD-INDEX BY 1             05160000
051700             UNTIL               ((PV-RECORD-INDEX >              05170000
051800                                 PC-END-OF-JCL-COLUMN)            05180000
051900             OR                  (PROC-FOUND)                     05190000
052000             OR                  (PROGRAM-FOUND))                 05200000
052100         IF  PROC-FOUND                                           05210000
052200             MOVE PV-KEYWORD-SAVE                                 05220000
052300                                 TO PV-PROCLIB-LABEL-SAVE         05230000
052400             MOVE TB-KEYWORD     TO PV-PROC-JCL-NAME-SAVE         05240000
052500             MOVE SPACE          TO TB-SYMBOLIC-TABLE             05250000
052600             MOVE +1             TO PV-SYMBOLIC-INDEX             05260000
052700             IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) = SPACE)       05270000
052800               AND (TB-RECORD-BYTE(PV-RECORD-INDEX - 1) = SPACE)  05280000
052900                 AND             (PV-RECORD-INDEX NOT >           05290000
053000                                 PC-END-OF-JCL-COLUMN))           05300000
053100                 CONTINUE                                         05310000
053200             ELSE                                                 05320000
053300                 MOVE 'N'        TO PS-ALL-SYMBOLICS-LOADED       05330000
053400                 PERFORM         2120-LOAD-SYMBOLIC-TABLE         05340000
053500                     UNTIL       ALL-SYMBOLICS-LOADED             05350000
053600             END-IF                                               05360000
053700         END-IF                                                   05370000
053800     END-IF.                                                      05380000
053900                                                                  05390000
054000     EJECT                                                        05400000
054100                                                                  05410000
054200******************************************************************05420000
054300*2110-SCAN-FOR-PROC-NAME.                                        *05430000
054400* ==> PROCESSES:                                                 *05440000
054500*   - PERFORMS THE LOGIC TO PULL PROCNAME FROM THE JCL RECORD.   *05450000
054600* ==> PERFORMED BY :                                             *05460000
054700*   - 2100-SEARCH-FOR-EXEC                                       *05470000
054800******************************************************************05480000
054900 2110-SCAN-FOR-PROC-NAME.                                         05490000
055000                                                                  05500000
055100     IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) = SPACE)               05510000
055200         OR (TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-COMMA))         05520000
055300         SET PROC-FOUND          TO TRUE                          05530000
055400     ELSE                                                         05540000
055500         ADD +1                  TO PV-KEYWORD-INDEX              05550000
055600         MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                     05560000
055700             TO TB-KEYWORD-BYTE(PV-KEYWORD-INDEX)                 05570000
055800         IF  PV-RECORD-INDEX = PC-END-OF-JCL-COLUMN               05580000
055900             SET PROC-FOUND      TO TRUE                          05590000
056000         END-IF                                                   05600000
056100     END-IF.                                                      05610000
056200                                                                  05620000
056300     IF  TB-KEYWORD = PC-PROC-EQUAL                               05630000
056400* IF 'PROC=' IS FOUND, RESET KEYWORD INDEX TO CAPTURE THE PROCNAME05640000
056500         MOVE SPACE              TO TB-KEYWORD                    05650000
056600         MOVE +0                 TO PV-KEYWORD-INDEX              05660000
056700     ELSE                                                         05670000
056800         IF  TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-EQUAL           05680000
056900             SET  PROGRAM-FOUND  TO TRUE                          05690000
057000        END-IF                                                    05700000
057100     END-IF.                                                      05710000
057200                                                                  05720000
057300     IF  PV-KEYWORD-INDEX > PC-MAX-KEYWORD                        05730000
057400         DISPLAY '*** ABEND ***'                                  05740000
057500         DISPLAY '*** PARAGRAPH 2110- ***'                        05750000
057600         DISPLAY '*** MAX ENTRIES EXCEEDED IN '                   05760000
057700         DISPLAY '*** TB-KEYWORD-TABLE.'                          05770000
057800         DISPLAY '*** RESET PC-MAX-KEYWORD.'                      05780000
057900         MOVE                    +4002 TO ABEND-CODE              05790000
058000         CALL                   'ILBOABN0' USING ABEND-CODE       05800000
058100     END-IF.                                                      05810000
058200     IF PV-KEYWORD-INDEX > MT-KEYWORD-COUNT                       05820000
058300         MOVE PV-KEYWORD-INDEX TO MT-KEYWORD-COUNT                05830000
058400     END-IF.                                                      05840000
058500     EJECT                                                        05850000
058600                                                                  05860000
058700******************************************************************05870000
058800*2120-LOAD-SYMBOLIC-TABLE.                                       *05880000
058900* ==> PROCESSES:                                                 *05890000
059000*   - PERFORMS THE PROCESSING TO EXTRACT SYMBOLICS FROM THE JCL  *05900000
059100*     RECORD AND LOAD THEM INTO A TABLE FOR RESOLVING LATER.     *05910000
059200* ==> PERFORMED BY :                                             *05920000
059300*   - 2100-SEARCH-FOR-EXEC                                       *05930000
059400******************************************************************05940000
059500 2120-LOAD-SYMBOLIC-TABLE.                                        05950000
059600                                                                  05960000
059700     MOVE SPACE                  TO TB-SYMBOLIC-WORK.             05970000
059800     MOVE 1                      TO PV-SYMBOLIC-WORK-INDEX.       05980000
059900     MOVE 'N'                    TO PS-SYMBOLIC-ENTRY-LOADED.     05990000
060000                                                                  06000000
060100     IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) = SPACE AND            06010000
060200         TB-RECORD-BYTE(PV-RECORD-INDEX - 1) = PC-COMMA)  OR      06020000
060300         (PV-RECORD-INDEX        = PC-JCL-CONTINUE-COLUMN AND     06030000
060400         TB-RECORD-BYTE(PC-END-OF-JCL-COLUMN) = PC-COMMA))        06040000
060500* MORE SYMBOLIC RECORDS TO FOLLOW                                 06050000
060600         PERFORM                 2130-GET-NEXT-RECORD             06060000
060700* POSITION INDEX TO THE BEGINNING OF THE SYMBOLIC.                06070000
060800         MOVE PC-JCL-COLUMN-4    TO PV-RECORD-INDEX               06080000
060900         PERFORM                                                  06090000
061000             VARYING             PV-RECORD-INDEX                  06100000
061100             FROM                PV-RECORD-INDEX BY 1             06110000
061200             UNTIL               TB-RECORD-BYTE(PV-RECORD-INDEX)  06120000
061300             NOT =               SPACE                            06130000
061400         END-PERFORM                                              06140000
061500     ELSE                                                         06150000
061600         IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) NOT = SPACE AND    06160000
061700             TB-RECORD-BYTE(PV-RECORD-INDEX - 1) = PC-COMMA))     06170000
061800* ANOTHER SYMBOLIC ON THE SAME RECORD.                            06180000
061900             CONTINUE                                             06190000
062000         ELSE                                                     06200000
062100             SET ALL-SYMBOLICS-LOADED                             06210000
062200                                 TO TRUE                          06220000
062300         END-IF                                                   06230000
062400     END-IF.                                                      06240000
062500                                                                  06250000
062600     IF  ALL-SYMBOLICS-LOADED                                     06260000
062700         CONTINUE                                                 06270000
062800     ELSE                                                         06280000
062900         PERFORM                 2140-LOAD-SYMBOLIC-ENTRY         06290000
063000             VARYING             PV-RECORD-INDEX                  06300000
063100             FROM                PV-RECORD-INDEX BY 1             06310000
063200             UNTIL               (SYMBOLIC-ENTRY-LOADED           06320000
063300             OR                  PV-RECORD-INDEX >                06330000
063400                                 PC-JCL-CONTINUE-COLUMN)          06340000
063500             MOVE TB-SYMBOLIC-WORK                                06350000
063600                 TO TB-SYMBOLIC-NAME(PV-SYMBOLIC-INDEX)           06360000
063700             ADD 1               TO PV-SYMBOLIC-INDEX             06370000
063800     END-IF.                                                      06380000
063900                                                                  06390000
064000     IF  PV-SYMBOLIC-INDEX > PC-MAX-SYMBOLIC                      06400000
064100         DISPLAY '*** ABEND ***'                                  06410000
064200         DISPLAY '*** PARAGRAPH 2120- ***'                        06420000
064300         DISPLAY '*** MAX ENTRIES EXCEEDED IN '                   06430000
064400         DISPLAY '*** TB-SYMBOLIC-TABLE.'                         06440000
064500         DISPLAY '*** RESET PC-MAX-SYMBOLIC.'                     06450000
064600         MOVE                    +4002 TO ABEND-CODE              06460000
064700         CALL                   'ILBOABN0' USING ABEND-CODE       06470000
064800     END-IF.                                                      06480000
064900     IF PV-SYMBOLIC-INDEX > MT-SYMBOLIC-COUNT                     06490000
065000         MOVE PV-SYMBOLIC-INDEX TO MT-SYMBOLIC-COUNT              06500000
065100     END-IF.                                                      06510000
065200                                                                  06520000
065300     EJECT                                                        06530000
065400                                                                  06540000
065500******************************************************************06550000
065600*2130-GET-NEXT-RECORD.                                           *06560000
065700* ==> PROCESSES:                                                 *06570000
065800*   - DETERMINES WHETHER RECORD SHOULD BE READ FROM THE          *06580000
065900*     PKMO.PROCLIB EXTRACT FILE OR FROM THE SYS2.PROCLIB JCL     *06590000
066000*     TABLE.                                                     *06600000
066100* ==> PERFORMED BY :                                             *06610000
066200*   - 2120-LOAD-SYMBOLIC-TABLE.                                  *06620000
066300******************************************************************06630000
066400 2130-GET-NEXT-RECORD.                                            06640000
066500                                                                  06650000
066600     IF  PROCESSING-SYS2-SYMBOLICS                                06660000
066700         SET PV-PROC-JCL-INDEX   UP BY +1                         06670000
066800         MOVE TB-PROC-JCL-RECORD(PV-PROC-JCL-INDEX)               06680000
066900                                 TO TB-RECORD                     06690000
067000     ELSE                                                         06700000
067100         PERFORM                 8000-READ-PROCLIB-FILE           06710000
067200* COMMENT RECORDS ARE NOT WRITTEN OUT                             06720000
067300         IF  COMMENTS-RECORD                                      06730000
067400             PERFORM             8000-READ-PROCLIB-FILE           06740000
067500                 UNTIL           (NOT COMMENTS-RECORD             06750000
067600                 OR              END-OF-PROCLIB-FILE)             06760000
067700         END-IF                                                   06770000
067800         MOVE PKMO-PROCLIB-RECORD TO TB-RECORD                    06780000
067900     END-IF.                                                      06790000
068000                                                                  06800000
068100     EJECT                                                        06810000
068200******************************************************************06820000
068300*2140-LOAD-SYMBOLIC-ENTRY.                                       *06830000
068400* ==> PROCESSES:                                                 *06840000
068500*   - CHECKS THE VALUE IN THE CURRENT BYTE TO DETERMINE HOW TO   *06850000
068600*     PROCESS THE SYMBOLIC(S).                                   *06860000
068700*   - NOTE: QUOTES SURROUNDING THE SYMBOLIC ARE NOT MOVED TO THE *06870000
068800*     SAVE AREA.                                                 *06880000
068900*   - EXAMPLE:  THE FOLLOWING 2 SYMBOLICS                        *06890000
069000*     //S010    EXEC DB2IMST,SYSID='FS.DB',MEMB='@TEST'          *06900000
069100*               WILL BE STORED ON THE SYMBOLIC TABLE AS          *06910000
069200*     SYSID=FS.DB                                                *06920000
069300*     MEMB=@TEST                                                 *06930000
069400* ==> PERFORMED BY :                                             *06940000
069500*   - 2120-LOAD-SYMBOLIC-TABLE.                                  *06950000
069600******************************************************************06960000
069700 2140-LOAD-SYMBOLIC-ENTRY.                                        06970000
069800                                                                  06980000
069900     IF  TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-QUOTE               06990000
070000         IF  PROCESSING-QUOTES                                    07000000
070100             IF  TB-RECORD-BYTE(PV-RECORD-INDEX + 1) = PC-QUOTE   07010000
070200                 MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)             07020000
070300                 TO TB-SYMBOLIC-WORK-BYTE(PV-SYMBOLIC-WORK-INDEX) 07030000
070400                 ADD 1           TO PV-SYMBOLIC-WORK-INDEX        07040000
070500             ELSE                                                 07050000
070600                 IF  TB-RECORD-BYTE(PV-RECORD-INDEX - 1)          07060000
070700                                 = PC-QUOTE                       07070000
070800                      IF  TB-RECORD-BYTE(PV-RECORD-INDEX + 1)     07080000
070900                                 = SPACE   OR                     07090000
071000                          TB-RECORD-BYTE(PV-RECORD-INDEX + 1)     07100000
071100                                 = PC-COMMA                       07110000
071200                          MOVE 'N' TO PS-PROCESSING-QUOTES        07120000
071300                      ELSE                                        07130000
071400                          CONTINUE                                07140000
071500                 ELSE                                             07150000
071600                     MOVE 'N' TO PS-PROCESSING-QUOTES             07160000
071700                 END-IF                                           07170000
071800             END-IF                                               07180000
071900         ELSE                                                     07190000
072000             SET PROCESSING-QUOTES TO TRUE                        07200000
072100         END-IF                                                   07210000
072200     ELSE                                                         07220000
072300         IF  PROCESSING-QUOTES                                    07230000
072400             MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                 07240000
072500                 TO TB-SYMBOLIC-WORK-BYTE(PV-SYMBOLIC-WORK-INDEX) 07250000
072600             ADD 1               TO PV-SYMBOLIC-WORK-INDEX        07260000
072700         ELSE                                                     07270000
072800             IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) = SPACE)       07280000
072900                 OR (TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-COMMA)  07290000
073000                 OR (PV-RECORD-INDEX > PC-END-OF-JCL-COLUMN))     07300000
073100                 SET SYMBOLIC-ENTRY-LOADED                        07310000
073200                                 TO TRUE                          07320000
073300* MOVE HIGH-VALUES TO INDICATE THE END OF THE SYMBOLIC IN THE TABL07330000
073400                 MOVE HIGH-VALUES                                 07340000
073500                 TO TB-SYMBOLIC-WORK-BYTE(PV-SYMBOLIC-WORK-INDEX) 07350000
073600             ELSE                                                 07360000
073700                 MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)             07370000
073800                                 TO TB-SYMBOLIC-WORK-BYTE         07380000
073900                                 (PV-SYMBOLIC-WORK-INDEX)         07390000
074000                 ADD 1           TO PV-SYMBOLIC-WORK-INDEX        07400000
074100             END-IF                                               07410000
074200         END-IF                                                   07420000
074300     END-IF.                                                      07430000
074400                                                                  07440000
074500     IF  PV-SYMBOLIC-WORK-INDEX > PC-MAX-SYMBOLIC-NAME            07450000
074600         DISPLAY '*** ABEND ***'                                  07460000
074700         DISPLAY '*** PARAGRAPH 2140- ***'                        07470000
074800         DISPLAY '*** MAX ENTRIES EXCEEDED IN '                   07480000
074900         DISPLAY '*** TB-SYMBOLIC-WORK-TABLE.'                    07490000
075000         DISPLAY '*** RESET PC-MAX-SYMBOLIC-NAME.'                07500000
075100         MOVE                    +4002 TO ABEND-CODE              07510000
075200         CALL                   'ILBOABN0' USING ABEND-CODE       07520000
075300     END-IF.                                                      07530000
075400     IF PV-SYMBOLIC-WORK-INDEX > MT-SYMBOLIC-WORK-COUNT           07540000
075500         MOVE PV-SYMBOLIC-WORK-INDEX TO MT-SYMBOLIC-WORK-COUNT    07550000
075600     END-IF.                                                      07560000
075700     EJECT                                                        07570000
075800                                                                  07580000
075900******************************************************************07590000
076000*2200-SEARCH-FOR-INCLUDE.                                        *07600000
076100* ==> PROCESSES:                                                 *07610000
076200*   - SEARCHES THE JCL RECORD LOOKING FOR 'INCLUDE MEMBER=' AND, *07620000
076300*     IF FOUND, EXTRACTS MEMBER NAME.                            *07630000
076400* ==> PERFORMED BY :                                             *07640000
076500*   - 2000-PROCESS-FILE.                                         *07650000
076600*   - 4400-FORMAT-WRITE-PROC-JCL-REC.                            *07660000
076700******************************************************************07670000
076800 2200-SEARCH-FOR-INCLUDE.                                         07680000
076900                                                                  07690000
077000     MOVE PC-INCLUDE             TO PV-KEYWORD.                   07700000
077100                                                                  07710000
077200     PERFORM                     6000-SCAN-FOR-KEYWORD.           07720000
077300                                                                  07730000
077400     IF KEYWORD-FOUND                                             07740000
077500* BUMP AHEAD TO THE EQUAL SIGN IN 'MEMBER='.                      07750000
077600         PERFORM                                                  07760000
077700             VARYING             PV-RECORD-INDEX                  07770000
077800             FROM                PV-RECORD-INDEX BY 1             07780000
077900             UNTIL               TB-RECORD-BYTE(PV-RECORD-INDEX)  07790000
078000                                 = PC-EQUAL                       07800000
078100         END-PERFORM                                              07810000
078200* BUMP PASSED THE '=' SIGN TO THE BEGINNING OF THE INCLUDE NAME.  07820000
078300         ADD +1                  TO PV-RECORD-INDEX               07830000
078400         MOVE SPACE              TO TB-KEYWORD-TABLE              07840000
078500         MOVE +1                 TO PV-KEYWORD-INDEX              07850000
078600         PERFORM                 2210-SCAN-FOR-INCLUDE-NAME       07860000
078700             VARYING             PV-RECORD-INDEX                  07870000
078800             FROM                PV-RECORD-INDEX BY 1             07880000
078900             UNTIL               ((PV-RECORD-INDEX >              07890000
079000                                 PC-END-OF-JCL-COLUMN)            07900000
079100             OR                  (INCLUDE-FOUND))                 07910000
079200     END-IF.                                                      07920000
079300     EJECT                                                        07930000
079400******************************************************************07940000
079500*2210-SCAN-FOR-INCLUDE-NAME.                                     *07950000
079600* ==> PROCESSES:                                                 *07960000
079700*   - CAPTURES THE INCLUDE MEMBER NAME.                          *07970000
079800* ==> PERFORMED BY :                                             *07980000
079900*   - 2200-SEARCH-FOR-INCLUDE.                                   *07990000
080000******************************************************************08000000
080100 2210-SCAN-FOR-INCLUDE-NAME.                                      08010000
080200                                                                  08020000
080300     IF  (TB-RECORD-BYTE(PV-RECORD-INDEX) = SPACE)                08030000
080400         SET INCLUDE-FOUND       TO TRUE                          08040000
080500     ELSE                                                         08050000
080600         MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                     08060000
080700             TO TB-KEYWORD-BYTE(PV-KEYWORD-INDEX)                 08070000
080800         ADD +1                  TO PV-KEYWORD-INDEX              08080000
080900     END-IF.                                                      08090000
081000                                                                  08100000
081100     IF  PV-KEYWORD-INDEX > PC-MAX-KEYWORD                        08110000
081200         DISPLAY '*** ABEND ***'                                  08120000
081300         DISPLAY '*** PARAGRAPH 2210- ***'                        08130000
081400         DISPLAY '*** MAX ENTRIES EXCEEDED IN '                   08140000
081500         DISPLAY '*** TB-KEYWORD-TABLE.'                          08150000
081600         DISPLAY '*** RESET PC-MAX-KEYWORD.'                      08160000
081700         MOVE                    +4002 TO ABEND-CODE              08170000
081800         CALL                   'ILBOABN0' USING ABEND-CODE       08180000
081900     END-IF.                                                      08190000
082000     IF PV-KEYWORD-INDEX > MT-KEYWORD-COUNT                       08200000
082100         MOVE PV-KEYWORD-INDEX TO MT-KEYWORD-COUNT                08210000
082200     END-IF.                                                      08220000
082300     EJECT                                                        08230000
082400******************************************************************08240000
082500*3000-LOAD-OVERRIDE-TABLE.                                       *08250000
082600* ==> PROCESSES:                                                 *08260000
082700*   - PERFORMED AFTER THE SYMBOLICS HAVE BEEN LOADED TO THE      *08270000
082800*     SYMBOLIC TABLE FOR THE PROC STATEMENT.                     *08280000
082900*   - THIS PARAGRAPH READS THRU THE UNLOADED PKMO.PROCLIB RECORDS*08290000
083000*     UNTIL ONE OF THE FOLLOWING CONDITIONS IS MET:              *08300000
083100*       -  THE NEXT ' EXEC ' RECORD IS READ, OR                  *08310000
083200*       -  AN END OF JCL RECORD IS READ, OR                      *08320000
083300*       -  THE NEXT ./ADD RECORD IS READ, OR                     *08330000
083400*       -  EOF                                                   *08340000
083500*     THE PURPOSE IS TO SAVE ALL THE OVERRIDES FOR THIS          *08350000
083600*     PARTICULAR PROC.  THE OVERRIDES WILL BE MERGED INTO THE    *08360000
083700*     MAIN PROC IN PARAGRAPH 4000.                               *08370000
083800*   - TO MINIMIZE PROGRAM COMPLEXITY, COMMENT RECORDS ARE NOT    *08380000
083900*     LOADED TO THE TABLE.                                       *08390000
084000* ==> PERFORMED BY :                                             *08400000
084100*   - 2000-PROCESS-FILE.                                         *08410000
084200******************************************************************08420000
084300 3000-LOAD-OVERRIDE-TABLE.                                        08430000
084400                                                                  08440000
084500     PERFORM                     8000-READ-PROCLIB-FILE.          08450000
084600                                                                  08460000
084700     IF  (ADD-RECORD OR                                           08470000
084800         PKMO-PROCLIB-FIRST-72 = PC-END-OF-JCL-RECORDS OR         08480000
084900         END-OF-PROCLIB-FILE)                                     08490000
085000         SET ALL-OVERRIDES-PROCESSED                              08500000
085100                             TO TRUE                              08510000
085200     ELSE                                                         08520000
085300         IF  COMMENTS-RECORD                                      08530000
085400             CONTINUE                                             08540000
085500         ELSE                                                     08550000
085600             MOVE PKMO-PROCLIB-RECORD                             08560000
085700                                 TO TB-RECORD                     08570000
085800             MOVE PC-EXEC        TO PV-KEYWORD                    08580000
085900             PERFORM             6000-SCAN-FOR-KEYWORD            08590000
086000             IF  KEYWORD-FOUND                                    08600000
086100                 SET ALL-OVERRIDES-PROCESSED                      08610000
086200                                 TO TRUE                          08620000
086300             ELSE                                                 08630000
086400                 PERFORM         3100-PROCESS-OVERRIDE            08640000
086500                 ADD +1          TO PV-OVERRIDE-INDEX             08650000
086600             END-IF                                               08660000
086700         END-IF                                                   08670000
086800     END-IF.                                                      08680000
086900                                                                  08690000
087000     IF  PV-OVERRIDE-INDEX > PC-MAX-OVERRIDE                      08700000
087100         DISPLAY '*** ABEND ***'                                  08710000
087200         DISPLAY '*** PARAGRAPH 3000- ***'                        08720000
087300         DISPLAY '*** MAX ENTRIES EXCEEDED IN TB-OVERRIDE-TABLE.' 08730000
087400         DISPLAY '*** RESET PC-MAX-OVERRIDE.'                     08740000
087500         MOVE                    +4002 TO ABEND-CODE              08750000
087600         CALL                   'ILBOABN0' USING ABEND-CODE       08760000
087700     END-IF.                                                      08770000
087800     IF PV-OVERRIDE-INDEX > MT-OVERRIDE-COUNT                     08780000
087900         MOVE PV-OVERRIDE-INDEX TO MT-OVERRIDE-COUNT              08790000
088000     END-IF.                                                      08800000
088100                                                                  08810000
088200     EJECT                                                        08820000
088300******************************************************************08830000
088400*3100-PROCESS-OVERRIDE.                                          *08840000
088500* ==> PROCESSES:                                                 *08850000
088600*   - FIRST DETERMINES IF THE OVERRIDE RECORD HAS A STEPNAME     *08860000
088700*     ASSOCIATED WITH IT,                                        *08870000
088800*     IE, //STEP1.INP01 (STEP1 IS THE STEPNAME).  IF YES, THE    *08880000
088900*     STEPNAME IS STRIPPED OUT OF THE JCL AND MOVED TO A SAVE    *08890000
089000*     AREA.                                                      *08900000
089100*   - THEN THE JCL IS MOVED MOVED FROM THE WORK AREA TO THE      *08910000
089200*     OVERRIDE TABLE ALONG WITH THE SAVED STEPNAME.              *08920000
089300*   - NOTE: IF NO STEPNAME IS PRESENT, THE RECORD WILL BE MERGED *08930000
089400*     FOLLOWING THE FIRST STEP IN THE 'SYS2.PROCLIB' MEMBER.     *08940000
089500* ==> PERFORMED BY :                                             *08950000
089600*   - 3000-LOAD-OVERRIDE-TABLE.                                  *08960000
089700******************************************************************08970000
089800                                                                  08980000
089900 3100-PROCESS-OVERRIDE.                                           08990000
090000                                                                  09000000
090100     MOVE PKMO-PROCLIB-RECORD    TO TB-RECORD.                    09010000
090200                                                                  09020000
090300     MOVE SPACE                  TO TB-KEYWORD                    09030000
090400                                 TB-RECORD-SAVE-TABLE.            09040000
090500     MOVE +1                     TO PV-KEYWORD-INDEX.             09050000
090600                                                                  09060000
090700     PERFORM                     VARYING PV-RECORD-INDEX          09070000
090800                                 FROM 1 BY 1 UNTIL                09080000
090900                                 (PV-RECORD-INDEX > 11  OR        09090000
091000                                 TB-RECORD-BYTE(PV-RECORD-INDEX)  09100000
091100                                 = PC-PERIOD)                     09110000
091200         MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                     09120000
091300             TO TB-KEYWORD-BYTE(PV-KEYWORD-INDEX)                 09130000
091400         ADD +1 TO               PV-KEYWORD-INDEX                 09140000
091500     END-PERFORM.                                                 09150000
091600                                                                  09160000
091700     IF  TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-PERIOD              09170000
091800         MOVE TB-KEYWORD         TO PV-STEPNAME                   09180000
091900         ADD +1                  TO PV-RECORD-INDEX               09190000
092000         MOVE PC-SLASH           TO TB-RECORD-SAVE-BYTE(1)        09200000
092100                                 TB-RECORD-SAVE-BYTE(2)           09210000
092200         MOVE +3                 TO PV-RECORD-SAVE-INDEX          09220000
092300         PERFORM                 VARYING PV-RECORD-INDEX          09230000
092400                                 FROM PV-RECORD-INDEX BY 1        09240000
092500                                 UNTIL PV-RECORD-INDEX >          09250000
092600                                 PC-END-OF-JCL-COLUMN             09260000
092700             MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                 09270000
092800                                 TO TB-RECORD-SAVE-BYTE           09280000
092900                                 (PV-RECORD-SAVE-INDEX)           09290000
093000             ADD +1              TO PV-RECORD-SAVE-INDEX          09300000
093100         END-PERFORM                                              09310000
093200         MOVE TB-RECORD-SAVE-TABLE                                09320000
093300                                 TO TB-OVERRIDE-RECORD            09330000
093400                                 (PV-OVERRIDE-INDEX)              09340000
093500     ELSE                                                         09350000
093600         MOVE TB-RECORD          TO TB-OVERRIDE-RECORD            09360000
093700                                 (PV-OVERRIDE-INDEX)              09370000
093800     END-IF.                                                      09380000
093900                                                                  09390000
094000     MOVE PV-STEPNAME            TO TB-OVERRIDE-STEPNAME          09400000
094100                                 (PV-OVERRIDE-INDEX).             09410000
094200                                                                  09420000
094300     EJECT                                                        09430000
094400******************************************************************09440000
094500*4000-MERGE-PROC-JCL.                                            *09450000
094600* ==> PROCESSES:                                                 *09460000
094700*   - DETERMINES WHETHER THE SYS2.PROCLIB JCL TO BE MERGED HAS   *09470000
094800*     ALREADY BEEN LOADED INTO A TABLE IN MEMORY.  IF YES,       *09480000
094900*     PROCESSING CONTINUES.  IF NO, THE JCL IS READ IN AND       *09490000
095000*     LOADED INTO THE TABLE.                                     *09500000
095100*   - LOADS SYMBOLICS, IF PRESENT, TO THE SYMBOLIC TABLE.        *09510000
095200*   - MERGES STEP OVERRIDES INTO THE SYS2.PROCLIB JCL.           *09520000
095300*   - WRITES THE MERGED JCL TO THE PKMO.PROCLIB EXTRACT FILE.    *09530000
095400* ==> PERFORMED BY :                                             *09540000
095500*   - 2000-PROCESS-FILE.                                         *09550000
095600******************************************************************09560000
095700                                                                  09570000
095800 4000-MERGE-PROC-JCL.                                             09580000
095900                                                                  09590000
096000     SET PV-PROC-JCL-INDEX       TO 1.                            09600000
096100                                                                  09610000
096200     SEARCH                      TB-PROC-JCL-ENTRY                09620000
096300         AT END                                                   09630000
096400             DISPLAY '*** ABEND ***'                              09640000
096500             DISPLAY '*** PARAGRAPH 4000- ***'                    09650000
096600             DISPLAY '*** MAX ENTRIES FOR PROC JCL TABLE REACHED' 09660000
096700             SET PV-JCL-INDEX    TO PV-PROC-JCL-INDEX             09670000
096800             DISPLAY '*** PV-PROC-JCL-INDEX = ' PV-JCL-INDEX      09680000
096900             MOVE                +4002 TO ABEND-CODE              09690000
097000             CALL                'ILBOABN0' USING ABEND-CODE      09700000
097100          WHEN                   (PV-PROC-JCL-NAME-SAVE =         09710000
097200                                 TB-PROC-JCL-MEMBER-NAME          09720000
097300                                 (PV-PROC-JCL-INDEX))             09730000
097400             CONTINUE                                             09740000
097500          WHEN                   (TB-PROC-JCL-MEMBER-NAME         09750000
097600                                 (PV-PROC-JCL-INDEX) = SPACE)     09760000
097700              PERFORM            4100-READ-AND-LOAD-PROC-JCL      09770000
097800     END-SEARCH.                                                  09780000
097900                                                                  09790000
098000     IF TB-PROC-JCL-MEMBER-NAME (PV-PROC-JCL-INDEX) NOT = SPACE   09800000
098100         PERFORM                     4200-LOAD-SYS2-SYMBOLICS     09810000
098200                                                                  09820000
098300         MOVE 'N'                TO PS-ALL-OVERRIDES-MERGED       09830000
098400         MOVE 'Y'                TO PS-FIRST-TIME-THRU            09840000
098500         MOVE +1                 TO PV-PROC-JCL-WORK-INDEX        09850000
098510         MOVE SPACE              TO TB-PROC-JCL-WORK-TABLE        09851000
098520         SET PV-PROC-JCL-INDEX   UP BY +1                         09852000
098530                                                                  09853000
098540         PERFORM                 4300-MERGE-OVERRIDES             09854000
098550             UNTIL               ALL-OVERRIDES-MERGED             09855000
098560                                                                  09856000
098570         PERFORM                 4400-FORMAT-WRITE-PROC-JCL-REC   09857000
098580             VARYING             PV-PROC-JCL-WORK-INDEX           09858000
098590             FROM                1 BY 1                           09859000
098600             UNTIL               ((TB-PROC-JCL-WORK-RECORD        09860000
098700                                 (PV-PROC-JCL-WORK-INDEX)         09870000
098800                                 = SPACE)                         09880000
098900             OR                  (PV-PROC-JCL-WORK-INDEX >        09890000
099000                                 PC-MAX-PROC-JCL-WORK))           09900000
099100     END-IF.                                                      09910000
099200                                                                  09920000
099300     EJECT                                                        09930000
099400******************************************************************09940000
099500*4100-READ-AND-LOAD-PROC-JCL                                     *09950000
099600* ==> PROCESSES:                                                 *09960000
099700*   - SETS UP AND ISSUES THE CALL TO ASSEMBLER ROUTINE 'DYNALC.  *09970000
099800*     DYNALC DYNAMICALLY ALLOCATES THE FILE TO BE USED AS        *09980000
099900*     INPUT.  EACH TIME A NEW SYS2.PROCLIB MEMBER IS TO BE       *09990000
100000*     MERGED INTO THE PKMO.PROCLIB EXTRACT FILE, THIS ROUTINE    *10000000
100100*     WILL ALLOCATE THE FILE, OPEN, READ THE RECORDS, AND CLOSE  *10010000
100200*     THE FILE.                                                  *10020000
100300* ==> PERFORMED BY :                                             *10030000
100400*   - 4000-MERGE-PROC-JCL.                                       *10040000
100500******************************************************************10050000
100600                                                                  10060000
100700 4100-READ-AND-LOAD-PROC-JCL.                                     10070000
100800                                                                  10080000
100900     MOVE 'INP02'                TO DP023-DDNAME.                 10090000
101000     MOVE 'SYS2.PROCLIB'         TO DP023-DSNAME.                 10100000
101100     SET DP023-DISP-SHARE        TO TRUE.                         10110000
101200     MOVE PV-PROC-JCL-NAME-SAVE  TO DP023-MEMBER-NAME.            10120000
101300     SET DP023-MEMDISP-READ      TO TRUE.                         10130000
101400                                                                  10140000
101500     SET DP023-DISABLE-DISPLAY-ABEND TO TRUE.                     10150000
101600     PERFORM                     DP023-0000-DYNALC.               10160000
101700                                                                  10170000
101800     IF  DP023-LASTRC = ZERO                                      10180000
101900         OPEN INPUT              SYS2-PROCLIB-FILE                10190000
102000         MOVE 'N' TO             PS-END-OF-SYS2-PROCLIB-FILE      10200000
102100         PERFORM                 8200-READ-SYS2-PROCLIB-FILE      10210000
102200     ELSE                                                         10220000
102300         INITIALIZE RETURN-CODE                                   10230000
102400         DISPLAY '*** PARA 4100 - INVALID RC FROM DYNALC = '      10240000
102500                   DP023-LASTRC                                   10250000
102600         INITIALIZE ALERT-RECORD                                  10260000
102700         STRING PC-CURRENT-PROGRAM-NAME          DELIMITED BY SIZE10270000
102800                ' - '                            DELIMITED BY SIZE10280000
102900                FUNCTION CURRENT-DATE (1:4)      DELIMITED BY SIZE10290000
103000                '-'                              DELIMITED BY SIZE10300000
103100                FUNCTION CURRENT-DATE (5:2)      DELIMITED BY SIZE10310000
103200                '-'                              DELIMITED BY SIZE10320000
103300                FUNCTION CURRENT-DATE (7:2)      DELIMITED BY SIZE10330000
103400                ' '                              DELIMITED BY SIZE10340000
103500                FUNCTION CURRENT-DATE (9:2)      DELIMITED BY SIZE10350000
103600                ':'                              DELIMITED BY SIZE10360000
103700                FUNCTION CURRENT-DATE (11:2)     DELIMITED BY SIZE10370000
103800             INTO ALERT-RECORD                                    10380000
103900         DISPLAY ALERT-RECORD                                     10390000
104000         WRITE ALERT-RECORD                                       10400000
104100         INITIALIZE ALERT-RECORD                                  10410000
104200         STRING 'PKMO.PROCLIB MBR = '            DELIMITED BY SIZE10420000
104300                PV-ADD-RECORD                    DELIMITED BY SIZE10430000
104400                ':  EXECUTED PROC '              DELIMITED BY SIZE10440000
104500                DP023-MEMBER-NAME                DELIMITED BY SIZE10450000
104600                ' NOT FOUND IN SYS2.PROCLIB'     DELIMITED BY SIZE10460000
104700             INTO ALERT-RECORD                                    10470000
104800         DISPLAY ALERT-RECORD                                     10480000
104900         WRITE ALERT-RECORD                                       10490000
105000         INITIALIZE ALERT-RECORD                                  10500000
105100         DISPLAY ALERT-RECORD                                     10510000
105200         WRITE ALERT-RECORD                                       10520000
105300         IF DP023-LASTRC NOT = DP023-RC-MEMBER-DOESNT-EXIST       10530000
105400             MOVE                +4002 TO ABEND-CODE              10540000
105500             DISPLAY '** ABEND = ' ABEND-CODE                     10550000
105600             CALL                'ILBOABN0' USING ABEND-CODE      10560000
105700         ELSE                                                     10570000
105800             SET END-OF-SYS2-PROCLIB-FILE TO TRUE                 10580000
105810         END-IF                                                   10581000
105820     END-IF.                                                      10582000
105830                                                                  10583000
105831     IF  END-OF-SYS2-PROCLIB-FILE                                 10583100
105832         IF DP023-LASTRC = ZERO                                   10583200
105833             INITIALIZE ALERT-RECORD                              10583300
105834             STRING PC-CURRENT-PROGRAM-NAME      DELIMITED BY SIZE10583400
105835                    ' - '                        DELIMITED BY SIZE10583500
105836                    FUNCTION CURRENT-DATE (1:4)  DELIMITED BY SIZE10583600
105837                    '-'                          DELIMITED BY SIZE10583700
105838                    FUNCTION CURRENT-DATE (5:2)  DELIMITED BY SIZE10583800
105839                    '-'                          DELIMITED BY SIZE10583900
105840                    FUNCTION CURRENT-DATE (7:2)  DELIMITED BY SIZE10584000
105850                    ' '                          DELIMITED BY SIZE10585000
105860                    FUNCTION CURRENT-DATE (9:2)  DELIMITED BY SIZE10586000
105870                    ':'                          DELIMITED BY SIZE10587000
105880                    FUNCTION CURRENT-DATE (11:2) DELIMITED BY SIZE10588000
105890                 INTO ALERT-RECORD                                10589000
105900             DISPLAY ALERT-RECORD                                 10590000
106000             WRITE ALERT-RECORD                                   10600000
106100             INITIALIZE ALERT-RECORD                              10610000
106200             STRING 'PKMO.PROCLIB MBR = '        DELIMITED BY SIZE10620000
106300                    PV-ADD-RECORD                DELIMITED BY SIZE10630000
106400                    ':  EXECUTED PROC '          DELIMITED BY SIZE10640000
106500                    DP023-MEMBER-NAME            DELIMITED BY SIZE10650000
106600                    ' NO RCDS IN SYS2.PROCLIB'   DELIMITED BY SIZE10660000
106700                 INTO ALERT-RECORD                                10670000
106800             DISPLAY ALERT-RECORD                                 10680000
106900             WRITE ALERT-RECORD                                   10690000
106910             INITIALIZE ALERT-RECORD                              10691000
106920             DISPLAY ALERT-RECORD                                 10692000
106930             WRITE ALERT-RECORD                                   10693000
106940         END-IF                                                   10694000
106950*        DISPLAY '*** ABEND ***'                                  10695000
106960*        MOVE                    +4002 TO ABEND-CODE              10696000
106970*        CALL                   'ILBOABN0' USING ABEND-CODE       10697000
106980     ELSE                                                         10698000
106990* SAVE THE CURRENT POSITION IN THE SYS2.PROCLIB TABLE.            10699000
106991         SET PV-JCL-INDEX        TO PV-PROC-JCL-INDEX             10699100
106992         PERFORM                 4110-LOAD-SYS2-PROCLIB-JCL-TAB   10699200
106993             UNTIL               END-OF-SYS2-PROCLIB-FILE         10699300
106994* SET THE INDEX BACK TO THE FIRST ENTRY OF THIS JCL.              10699400
106995         SET PV-PROC-JCL-INDEX   TO PV-JCL-INDEX                  10699500
106996     END-IF.                                                      10699600
106997                                                                  10699700
106998     IF DP023-LASTRC = ZERO                                       10699800
106999         CLOSE                   SYS2-PROCLIB-FILE                10699900
107000     END-IF.                                                      10700000
107100     EJECT                                                        10710000
107200                                                                  10720000
107300******************************************************************10730000
107400*4110-LOAD-SYS2.PROCLIB-JCL-TAB.                                 *10740000
107500* ==> PROCESSES:                                                 *10750000
107600*   - MOVES THE RECORD FROM THE SYS2.PROCLIB INPUT FILE TO THE   *10760000
107700*     TABLE.                                                     *10770000
107800*   - COMMENT RECORDS ARE NOT LOADED.                            *10780000
107900* ==> PERFORMED BY :                                             *10790000
108000*   - 4100-READ-AND-LOAD-PROC-JCL.                               *10800000
108100******************************************************************10810000
108200                                                                  10820000
108300 4110-LOAD-SYS2-PROCLIB-JCL-TAB.                                  10830000
108400                                                                  10840000
108500     IF  SYS2-COMMENTS-RECORD                                     10850000
108600         CONTINUE                                                 10860000
108700     ELSE                                                         10870000
108800         MOVE DP023-MEMBER-NAME  TO TB-PROC-JCL-MEMBER-NAME       10880000
108900                                 (PV-PROC-JCL-INDEX)              10890000
109000         MOVE SYS2-PROCLIB-RECORD                                 10900000
109100                                 TO TB-PROC-JCL-RECORD            10910000
109200                                 (PV-PROC-JCL-INDEX)              10920000
109300         SET PV-PROC-JCL-INDEX   UP BY 1                          10930000
109400         IF  PV-PROC-JCL-INDEX > PC-MAX-PROC-JCL                  10940000
109500             DISPLAY '*** ABEND ***'                              10950000
109600             DISPLAY '*** PARAGRAPH 4110- ***'                    10960000
109700             DISPLAY '*** MAX ENTRIES EXCEEDED IN PROC JCL TABLE' 10970000
109800             DISPLAY '*** RESET PC-MAX-PROC-JCL.'                 10980000
109900             MOVE                    +4002 TO ABEND-CODE          10990000
110000             CALL                   'ILBOABN0' USING ABEND-CODE   11000000
110100         END-IF                                                   11010000
110200         IF  PV-PROC-JCL-INDEX > MT-PROC-JCL-COUNT                11020000
110300             SET MT-PROC-JCL-COUNT TO PV-PROC-JCL-INDEX           11030000
110400         END-IF                                                   11040000
110500     END-IF.                                                      11050000
110600                                                                  11060000
110700     PERFORM                     8200-READ-SYS2-PROCLIB-FILE.     11070000
110800                                                                  11080000
110900     EJECT                                                        11090000
111000******************************************************************11100000
111100*4200-LOAD-SYS2-SYMBOLICS.                                       *11110000
111200* ==> PROCESSES:                                                 *11120000
111300*   - THIS PARAGRAPH LOADS THE SYMBOLICS FROM THE SYS2.PROCLIB   *11130000
111400*     MEMBER TO THE SYMBOLIC TABLE.                              *11140000
111500* ==> PERFORMED BY :                                             *11150000
111600*   - 4000-MERGE-PROC-JCL.                                       *11160000
111700******************************************************************11170000
111800                                                                  11180000
111900 4200-LOAD-SYS2-SYMBOLICS.                                        11190000
112000                                                                  11200000
112100     MOVE TB-PROC-JCL-RECORD(PV-PROC-JCL-INDEX)                   11210000
112200                                 TO TB-RECORD.                    11220000
112300     MOVE PC-PROC                TO PV-KEYWORD.                   11230000
112400                                                                  11240000
112500     PERFORM                     6000-SCAN-FOR-KEYWORD.           11250000
112600                                                                  11260000
112700     IF  KEYWORD-FOUND                                            11270000
112800* BUMP PASSED SPACES BETWEEN PROC AND SYMBOLIC.                   11280000
112900         PERFORM                                                  11290000
113000             VARYING             PV-RECORD-INDEX                  11300000
113100             FROM                PV-RECORD-INDEX BY 1             11310000
113200             UNTIL               ((TB-RECORD-BYTE(PV-RECORD-INDEX)11320000
113300             NOT =               SPACE)                           11330000
113400             OR                  (PV-RECORD-INDEX >               11340000
113500                                 PC-END-OF-JCL-COLUMN))           11350000
113600         END-PERFORM                                              11360000
113700         IF  PV-RECORD-INDEX > PC-END-OF-JCL-COLUMN               11370000
113800             CONTINUE                                             11380000
113900* WE'RE NOW AT THE BEGINNING OF THE SYMBOLIC. MOVE A COMMA INTO TH11390000
114000* BYTE BEFORE THE SYMBOLIC SO THE SYMBOLIC WILL BE PROCESSED      11400000
114100* CORRECTLY IN PARAGRAPH 2120-.                                   11410000
114200         ELSE                                                     11420000
114300             MOVE PC-COMMA       TO TB-RECORD-BYTE                11430000
114400                                 (PV-RECORD-INDEX - 1)            11440000
114500             SET PROCESSING-SYS2-SYMBOLICS                        11450000
114600                                 TO TRUE                          11460000
114700             MOVE 'N'            TO PS-ALL-SYMBOLICS-LOADED       11470000
114800             PERFORM             2120-LOAD-SYMBOLIC-TABLE         11480000
114900                 UNTIL           ALL-SYMBOLICS-LOADED             11490000
115000             MOVE 'N'            TO PS-PROCESSING-SYS2-SYMBOLICS  11500000
115100         END-IF                                                   11510000
115200     END-IF.                                                      11520000
115300     EJECT                                                        11530000
115400******************************************************************11540000
115500*4300-MERGE-OVERRIDES.                                           *11550000
115600* ==> PROCESSES:                                                 *11560000
115700*   - MOVES THE JCL RECORD TO A WORK AREA FOR PROCESSING.        *11570000
115800*   - THEN DETERMINES IF THE JCL RECORD CONTAINS ' EXEC '.  IF   *11580000
115900*     YES AND IT'S FIRST TIME THRU, PROCESSING CONTINUES.  IF    *11590000
116000*     YES AND IT'S NOT FIRST TIME THRU, THE OVERRIDES FOR THE    *11600000
116100*     PREVIOUS STEP ARE MOVED TO THE NEW TABLE.                  *11610000
116200*   - IF IT IS NOT AN ' EXEC ' RECORD, THE JCL RECORD IS MOVED   *11620000
116300*     TO THE NEW TABLE.                                          *11630000
116400*   - PROCESSING CONTINUES UNTIL ALL OVERRIDE JCL FROM           *11640000
116500*     TB-OVERRIDE-TABLE AND ALL SYS2.PROCLIB JCL FROM            *11650000
116600*     TB-PROC-JCL-TABLE HAS BEEN MOVED(MERGED) INTO THE          *11660000
116700*     TB-PROC-JCL-WORK-TABLE.                                    *11670000
116800*   - TB-PROC-JCL-WORK-TABLE JCL WILL THEN BE WRITTEN TO OUTPUT  *11680000
116900*     ONCE ALL 'INCLUDES' HAVE BEEN RESOLVED IN PARAGRAPH 4300.  *11690000
117000*   - NOTE THAT THE LABEL FROM THE PKMO.PROCLIB ' EXEC ' STEP    *11700000
117100*     OVERLAYS THE LABEL FOR ITS CORRESPONDING STEP(S) IN THE    *11710000
117200*     SYS2.PROCLIB MEMBER.                                       *11720000
117300* ==> PERFORMED BY :                                             *11730000
117400*   - 4000-MERGE-PROC-JCL.                                       *11740000
117500******************************************************************11750000
117600                                                                  11760000
117700 4300-MERGE-OVERRIDES.                                            11770000
117800                                                                  11780000
117900     MOVE TB-PROC-JCL-RECORD(PV-PROC-JCL-INDEX)                   11790000
118000                                 TO TB-RECORD.                    11800000
118100     MOVE +1                     TO PV-RECORD-INDEX.              11810000
118200     MOVE PC-EXEC                TO PV-KEYWORD.                   11820000
118300                                                                  11830000
118400     PERFORM                     6000-SCAN-FOR-KEYWORD.           11840000
118500                                                                  11850000
118600     IF  KEYWORD-FOUND                                            11860000
118700         IF  FIRST-TIME-THRU                                      11870000
118800             MOVE TB-RECORD-LABEL                                 11880000
118900                                 TO PV-RECORD-LABEL-SAVE          11890000
119000             MOVE PV-PROCLIB-LABEL-SAVE                           11900000
119100                                 TO TB-RECORD-LABEL               11910000
119200             MOVE 'N'            TO PS-FIRST-TIME-THRU            11920000
119300* FILL IN THE OVERRIDDEN STEP NAME FOR DEFAULTS ON THE OVERRIDE   11930000
119400* TABLE NOW THAT WE HAVE THE STEPNAME IN SYS2.PROCLIB.  THIS      11940000
119500* INSURES THAT WHEN NO STEPNAME OVERRIDE IS PRESENT, THE OVERRIDE 11950000
119600* WILL BE INSERTED INTO THE FIRST STEP OF THE PROC IN SYS2.PROCLIB11960000
119700             PERFORM                                              11970000
119800                 VARYING         PV-OVERRIDE-INDEX FROM           11980000
119900                                 1 BY 1                           11990000
120000                                 UNTIL TB-OVERRIDE-RECORD         12000000
120100                                 (PV-OVERRIDE-INDEX) = SPACE      12010000
120200                 IF  TB-OVERRIDE-STEPNAME(PV-OVERRIDE-INDEX)      12020000
120300                                 = SPACE                          12030000
120400                     MOVE PV-RECORD-LABEL-SAVE TO                 12040000
120500                         TB-OVERRIDE-STEPNAME(PV-OVERRIDE-INDEX)  12050000
120600                 END-IF                                           12060000
120700             END-PERFORM                                          12070000
120800         ELSE                                                     12080000
120900             MOVE 'N'            TO PS-STEP-OVERRIDES-MERGED      12090000
121000             PERFORM             4310-MERGE-STEP-OVERRIDES        12100000
121100                 VARYING         PV-OVERRIDE-INDEX FROM           12110000
121200                                 1 BY 1                           12120000
121300                                 UNTIL STEP-OVERRIDES-MERGED      12130000
121400             MOVE TB-RECORD-LABEL                                 12140000
121500                                 TO PV-RECORD-LABEL-SAVE          12150000
121600             IF TB-RECORD-LABEL NOT = '//DB2IMSG '                12160000
121700                MOVE PV-PROCLIB-LABEL-SAVE                        12170000
121800                                 TO TB-RECORD-LABEL               12180000
121900             END-IF                                               12190000
122000         END-IF                                                   12200000
122100     END-IF.                                                      12210000
122200                                                                  12220000
122300     MOVE TB-RECORD              TO TB-PROC-JCL-WORK-RECORD       12230000
122400                                 (PV-PROC-JCL-WORK-INDEX).        12240000
122500     ADD +1                      TO PV-PROC-JCL-WORK-INDEX.       12250000
122600                                                                  12260000
122700     SET PV-PROC-JCL-INDEX       UP BY +1.                        12270000
122800                                                                  12280000
122900     IF  ((PV-PROC-JCL-NAME-SAVE NOT =                            12290000
123000                                 TB-PROC-JCL-MEMBER-NAME          12300000
123100                                 (PV-PROC-JCL-INDEX))             12310000
123200         OR                      (TB-PROC-JCL-MEMBER-NAME         12320000
123300                                 (PV-PROC-JCL-INDEX) = SPACE))    12330000
123400         MOVE 'N'                TO PS-STEP-OVERRIDES-MERGED      12340000
123500         PERFORM                 4310-MERGE-STEP-OVERRIDES        12350000
123600             VARYING             PV-OVERRIDE-INDEX FROM           12360000
123700                                 1 BY 1                           12370000
123800                                 UNTIL STEP-OVERRIDES-MERGED      12380000
123900         SET ALL-OVERRIDES-MERGED                                 12390000
124000                                 TO TRUE                          12400000
124100     END-IF.                                                      12410000
124200     EJECT                                                        12420000
124300******************************************************************12430000
124400*4310-MERGE-STEP-OVERRIDES.                                      *12440000
124500* ==> PROCESSES:                                                 *12450000
124600*   - MERGES THE OVERRIDES FOR EACH STEP IN SYS2.PROCLIB.        *12460000
124700* ==> PERFORMED BY :                                             *12470000
124800*   - 4300-MERGE-OVERRIDES.                                      *12480000
124900******************************************************************12490000
125000                                                                  12500000
125100 4310-MERGE-STEP-OVERRIDES.                                       12510000
125200                                                                  12520000
125300     IF  TB-OVERRIDE-RECORD(PV-OVERRIDE-INDEX) = SPACE            12530000
125400         SET STEP-OVERRIDES-MERGED                                12540000
125500                                 TO TRUE                          12550000
125600     ELSE                                                         12560000
125700         IF  TB-OVERRIDE-STEPNAME(PV-OVERRIDE-INDEX)              12570000
125800                                 = PV-RECORD-LABEL-SAVE           12580000
125900             MOVE TB-OVERRIDE-RECORD(PV-OVERRIDE-INDEX)           12590000
126000                                 TO TB-PROC-JCL-WORK-RECORD       12600000
126100                                 (PV-PROC-JCL-WORK-INDEX)         12610000
126200             ADD +1              TO PV-PROC-JCL-WORK-INDEX        12620000
126300         END-IF                                                   12630000
126400     END-IF.                                                      12640000
126500                                                                  12650000
126600     IF  PV-PROC-JCL-WORK-INDEX > PC-MAX-PROC-JCL-WORK            12660000
126700         DISPLAY '*** ABEND ***'                                  12670000
126800         DISPLAY '*** PARAGRAPH 4310- ***'                        12680000
126900         DISPLAY '*** MAX ENTRIES EXCEEDED IN '                   12690000
127000         DISPLAY '*** TB-PROC-JCL-WORK-TABLE. '                   12700000
127100         DISPLAY '*** RESET PC-MAX-PROC-JCL-WORK.'                12710000
127200         MOVE                    +4002 TO ABEND-CODE              12720000
127300         CALL                   'ILBOABN0' USING ABEND-CODE       12730000
127400     END-IF.                                                      12740000
127500     IF PV-PROC-JCL-WORK-INDEX > MT-PROC-JCL-WORK-COUNT           12750000
127600         MOVE PV-PROC-JCL-WORK-INDEX TO MT-PROC-JCL-WORK-COUNT    12760000
127700     END-IF.                                                      12770000
127800     EJECT                                                        12780000
127900******************************************************************12790000
128000*4400-FORMAT-WRITE-PROC-JCL-REC.                                 *12800000
128100* ==> PROCESSES:                                                 *12810000
128200*   - MOVES EACH JCL RECORD FROM THE SYS2.PROCLIB WORK TABLE TO  *12820000
128210*     A WORK AREA TO DETERMINE WHAT TYPE OF PROCESSING SHOULD    *12821000
128220*     OCCUR.                                                     *12822000
128230*   - A SCAN IS PERFORMED TO IDENTIFY ANY SYMBOLICS ON THE RECORD*12823000
128240*     IF A SYMBOLIC IS FOUND, IE, AN AMPERSAND, THEN THE         *12824000
128250*     SYMBOLIC IS RESOLVED.                                      *12825000
128260*   - AFTER ALL SYMBOLICS ARE RESOLVED, SEARCH-FOR-INCLUDE       *12826000
128270*     PROCESSING IS PERFORMED TO DETERMINE IF THE RECORD IS AN   *12827000
128280*     INCLUDE AND EXPAND IF IT IS SO, OTHERWISE, THE RECORD IS   *12828000
128290*     WRITTEN TO OUTPUT.                                         *12829000
128300* ==> PERFORMED BY :                                             *12830000
128400*   - 4000-MERGE-PROC-JCL.                                       *12840000
128500******************************************************************12850000
128600                                                                  12860000
128700 4400-FORMAT-WRITE-PROC-JCL-REC.                                  12870000
128800                                                                  12880000
128900     MOVE TB-PROC-JCL-WORK-RECORD(PV-PROC-JCL-WORK-INDEX)         12890000
129000                                 TO TB-RECORD.                    12900000
129100     MOVE 1                      TO PV-RECORD-INDEX.              12910000
129200     MOVE 'N'                    TO PS-AMPERSAND-FOUND.           12920000
129300                                                                  12930000
129400     PERFORM                     4410-SCAN-FOR-AMPERSAND          12940000
129500         UNTIL                   ((AMPERSAND-FOUND)               12950000
129600         OR                      (PV-RECORD-INDEX >               12960000
129700                                 PC-END-OF-JCL-COLUMN)).          12970000
129800                                                                  12980000
129900     IF  AMPERSAND-FOUND                                          12990000
130000         MOVE 'N'                TO PS-ALL-SYMBOLICS-RESOLVED     13000000
130100         PERFORM                 4420-RESOLVE-SYMBOLICS           13010000
130200             UNTIL               ALL-SYMBOLICS-RESOLVED           13020000
130300     END-IF.                                                      13030000
130400                                                                  13040000
130500* IF THIS IS AN 'INCLUDE' RECORD, PERFORM INCLUDE PROCESSING.     13050000
130600* NOTE THAT THE INCLUDE RECORD ITSELF IS NOT WRITTEN TO THE       13060000
130700* OUTPUT FILE.                                                    13070000
130800     MOVE 'N'                    TO PS-INCLUDE-FOUND.             13080000
130900                                                                  13090000
131000     PERFORM                     2200-SEARCH-FOR-INCLUDE.         13100000
131100                                                                  13110000
131200     IF INCLUDE-FOUND                                             13120000
131300         MOVE TB-KEYWORD         TO PV-INCLUDE-NAME-SAVE          13130000
131400         PERFORM                 5000-MERGE-INCLUDE-JCL           13140000
131500     ELSE                                                         13150000
131600         MOVE TB-RECORD          TO PKMO-PROCLIB-MOD-RECORD       13160000
131700         PERFORM                 8100-WRITE-PROCLIB-RECORD        13170000
131800     END-IF.                                                      13180000
131900     EJECT                                                        13190000
132000******************************************************************13200000
132100*4410-SCAN-FOR-AMPERSAND.                                        *13210000
132200* ==> PROCESSES:                                                 *13220000
132300*   - SCANS THE RECORD LOOKING FOR AN '&'.                       *13230000
132400* ==> PERFORMED BY :                                             *13240000
132500*   - 4400-FORMAT-WRITE-PROC-JCL-REC.                            *13250000
132600*   - 4420-RESOLVE-SYMBOLICS.                                    *13260000
132700******************************************************************13270000
132800                                                                  13280000
132900 4410-SCAN-FOR-AMPERSAND.                                         13290000
133000                                                                  13300000
133100     IF  ((TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-AMPERSAND)        13310000
133200         AND                                                      13320000
133300         (TB-RECORD-BYTE(PV-RECORD-INDEX - 1) NOT = PC-AMPERSAND) 13330000
133400         AND                                                      13340000
133500        (TB-RECORD-BYTE(PV-RECORD-INDEX + 1) NOT = PC-AMPERSAND)) 13350000
133600         SET AMPERSAND-FOUND     TO TRUE                          13360000
133700     ELSE                                                         13370000
133800         ADD 1                   TO PV-RECORD-INDEX               13380000
133900     END-IF.                                                      13390000
134000     EJECT                                                        13400000
134100******************************************************************13410000
134200*4420-RESOLVE-SYMBOLICS.                                         *13420000
134300* ==> PROCESSES:                                                 *13430000
134400*   - MOVES THE SYMBOLIC VALUES FROM THE SAVE SYMBOLIC TABLE TO  *13440000
134500*     THE JCL RECORD.  THE RECORD IS WRITTEN ONCE ALL SYMBOLICS  *13450000
134600*     HAVE BEEN RESOLVED FOR THAT RECORD.                        *13460000
134700* ==> PERFORMED BY :                                             *13470000
134800*   - 4400-FORMAT-WRITE-PROC-JCL-REC.                            *13480000
134900******************************************************************13490000
135000                                                                  13500000
135100 4420-RESOLVE-SYMBOLICS.                                          13510000
135200                                                                  13520000
135300* SAVE CURRENT POSITION IN THE RECORD.                            13530000
135400     MOVE PV-RECORD-INDEX        TO PV-RECORD-INDEX-HOLD.         13540000
135500* BUMP PASSED THE AMPERSAND.                                      13550000
135600     ADD 1                       TO PV-RECORD-INDEX.              13560000
135700     MOVE SPACE                  TO TB-SYMBOLIC-WORK.             13570000
135800     MOVE 1                      TO PV-SYMBOLIC-WORK-INDEX.       13580000
135900                                                                  13590000
136000* CAPTURE THE SYMBOLIC.                                           13600000
136100     MOVE HIGH-VALUES TO         PS-END-MARK-FOUND.               13610000
136200     PERFORM                     WITH TEST AFTER                  13620000
136300         VARYING                 PV-RECORD-INDEX                  13630000
136400         FROM                    PV-RECORD-INDEX BY 1             13640000
136500         UNTIL                   (END-MARK-FOUND                  13650000
136600         OR                      PV-RECORD-INDEX >                13660000
136700                                 PC-END-OF-JCL-COLUMN)            13670000
136800             MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                 13680000
136900                                 TO PS-END-MARK-FOUND             13690000
137000             IF  END-MARK-FOUND                                   13700000
137100                 CONTINUE                                         13710000
137200             ELSE                                                 13720000
137300                 MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)             13730000
137400                 TO TB-SYMBOLIC-WORK-BYTE(PV-SYMBOLIC-WORK-INDEX) 13740000
137500                 ADD 1           TO PV-SYMBOLIC-WORK-INDEX        13750000
137600             END-IF                                               13760000
137700     END-PERFORM.                                                 13770000
137800                                                                  13780000
137900* SAVE THE REMAINING BYTES. THESE BYTES                           13790000
138000* WILL BE MOVED BACK INTO THE RECORD ONCE THE SYMBOLIC HAS BEEN   13800000
138100* REPLACED BY ITS VALUE.  IF THE END-MARK IS A PERIOD, BUMP       13810000
138200* PASSED IT.                                                      13820000
138300                                                                  13830000
138400     IF TB-RECORD-BYTE(PV-RECORD-INDEX) = PC-PERIOD               13840000
138500         ADD 1                   TO PV-RECORD-INDEX               13850000
138600     END-IF.                                                      13860000
138700                                                                  13870000
138800     MOVE PV-RECORD-INDEX        TO PV-END-OF-SYMBOLIC-INDEX.     13880000
138900                                                                  13890000
139000     MOVE SPACE                  TO TB-RECORD-SAVE-TABLE.         13900000
139100     MOVE 1                      TO PV-RECORD-SAVE-INDEX.         13910000
139200                                                                  13920000
139300     PERFORM                                                      13930000
139400         VARYING                 PV-RECORD-INDEX                  13940000
139500         FROM                    PV-RECORD-INDEX BY 1             13950000
139600         UNTIL                   (PV-RECORD-INDEX >               13960000
139700                                 PC-END-OF-JCL-COLUMN)            13970000
139800             MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                 13980000
139900                 TO TB-RECORD-SAVE-BYTE(PV-RECORD-SAVE-INDEX)     13990000
140000             ADD 1               TO PV-RECORD-SAVE-INDEX          14000000
140100     END-PERFORM.                                                 14010000
140200                                                                  14020000
140300* GET THE SYMBOLIC VALUE ON THE SYMBOLIC TABLE.                   14030000
140400                                                                  14040000
140500     MOVE 'N'                    TO PS-SYMBOLIC-FOUND.            14050000
140600     MOVE 1                      TO PV-SYMBOLIC-INDEX             14060000
140700                                    PV-SYMBOLIC-WORK-INDEX.       14070000
140800                                                                  14080000
140900     PERFORM                     4430-SYMBOLIC-LOOKUP             14090000
141000         UNTIL                   ((SYMBOLIC-FOUND)                14100000
141100         OR                      (TB-SYMBOLIC-BYTE                14110000
141200                                (PV-SYMBOLIC-INDEX, 1) = SPACE)). 14120000
141300                                                                  14130000
141400* BUMP PASSED THE '=' SIGN IN THE ENTRY ON THE SYMBOLIC TABLE.    14140000
141500     ADD 1                       TO PV-SYMBOLIC-WORK-INDEX.       14150000
141600* REPOSITION THE INDEX ON THE RECORD.                             14160000
141700     MOVE PV-RECORD-INDEX-HOLD   TO PV-RECORD-INDEX.              14170000
141800* MOVE THE SYMBOLIC VALUE FROM THE TABLE TO JCL RECORD.           14180000
141900     IF  SYMBOLIC-FOUND                                           14190000
142000         PERFORM                                                  14200000
142100             VARYING             PV-SYMBOLIC-WORK-INDEX           14210000
142200             FROM                PV-SYMBOLIC-WORK-INDEX BY 1      14220000
142300             UNTIL (TB-SYMBOLIC-BYTE                              14230000
142400                 (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX) =    14240000
142500                                 HIGH-VALUES)                     14250000
142600                 MOVE TB-SYMBOLIC-BYTE                            14260000
142700                 (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX) TO   14270000
142800                 TB-RECORD-BYTE(PV-RECORD-INDEX)                  14280000
142900                 ADD 1           TO PV-RECORD-INDEX               14290000
143000         END-PERFORM                                              14300000
143100     ELSE                                                         14310000
143200*                                                                 14320000
143300*  LEAVE THE SYMBOLIC INTACT FOR PROCXREF TO RESOLVE.  THE        14330000
143400*  RESOLUTION OF SYMBOLICS SHOULD BE RESTRICTED TO THE SYSTEM     14340000
143500*  PROC, NOT THE OVERRIDE DD'S, SINCE THOSE SYMBOLICS SHOULD BE   14350000
143600*  RESOLVED FROM THE CALLING PROC/JOB.                            14360000
143700*                                                                 14370000
143800         MOVE PV-END-OF-SYMBOLIC-INDEX TO PV-RECORD-INDEX         14380000
143900     END-IF.                                                      14390000
144000                                                                  14400000
144100* MOVE THE REMAINING SAVED BYTES BACK TO THE RECORD AND           14410000
144200* SAVE CURRENT POSITION IN THE RECORD.                            14420000
144300     MOVE 1                      TO PV-RECORD-SAVE-INDEX.         14430000
144400     MOVE PV-RECORD-INDEX        TO PV-RECORD-INDEX-HOLD.         14440000
144500     PERFORM                                                      14450000
144600         VARYING                 PV-RECORD-INDEX                  14460000
144601         FROM                    PV-RECORD-INDEX BY 1             14460100
144602         UNTIL                   (PV-RECORD-INDEX >               14460200
144603                                 PC-END-OF-JCL-COLUMN)            14460300
144604             MOVE TB-RECORD-SAVE-BYTE(PV-RECORD-SAVE-INDEX)       14460400
144605                 TO TB-RECORD-BYTE(PV-RECORD-INDEX)               14460500
144606             ADD 1               TO PV-RECORD-SAVE-INDEX          14460600
144607     END-PERFORM.                                                 14460700
144608                                                                  14460800
144609* SCAN THE REMAINING BYTES TO FIND ANYMORE AMPERSANDS.            14460900
144610     MOVE PV-RECORD-INDEX-HOLD   TO PV-RECORD-INDEX               14461000
144620     MOVE 'N'                    TO PS-AMPERSAND-FOUND.           14462000
144630                                                                  14463000
144640     PERFORM                     4410-SCAN-FOR-AMPERSAND          14464000
144650         UNTIL                   ((AMPERSAND-FOUND)               14465000
144660         OR                      (PV-RECORD-INDEX >               14466000
144670                                 PC-END-OF-JCL-COLUMN)).          14467000
144680                                                                  14468000
144690     IF  AMPERSAND-FOUND                                          14469000
144700         CONTINUE                                                 14470000
144800     ELSE                                                         14480000
144900         SET ALL-SYMBOLICS-RESOLVED                               14490000
145000                                 TO TRUE                          14500000
145100     END-IF.                                                      14510000
145200     EJECT                                                        14520000
145300******************************************************************14530000
145400*4430-SYMBOLIC-LOOKUP.                                           *14540000
145500* ==> PROCESSES:                                                 *14550000
145600*   - SEARCHES THE SYMBOLIC TABLE.  THE KEY IS THE SYMBOLIC      *14560000
145700*     ITSELF.  THE SEARCH WILL STOP WHEN THE '=' SIGN IS FOUND.  *14570000
145800*     SAMPLE SYMBOLIC ENTRIES:                                   *14580000
145900*         PROG=FSKRP011                                          *14590000
146000*         SYSID=FS                                               *14600000
146100*         PSB=FSKUT031                                           *14610000
146200*     FOR EXAMPLE, IF THE SYMBOLIC IS 'PSB' THE TABLE WILL BE    *14620000
146300*     SEARCHED UNTIL 'PSB=' IS FOUND.  THE VALUE OF THE SYMBOLIC,*14630000
146400*     IE, FSKUT031, WILL BE MOVED TO THE JCL IN LATER PROCESSING.*14640000
146500* ==> PERFORMED BY :                                             *14650000
146600*   - 4420-RESOLVE-SYMBOLICS.                                    *14660000
146700******************************************************************14670000
146800                                                                  14680000
146900 4430-SYMBOLIC-LOOKUP.                                            14690000
147000                                                                  14700000
147100     IF  (TB-SYMBOLIC-WORK-BYTE(PV-SYMBOLIC-WORK-INDEX) =         14710000
147200             TB-SYMBOLIC-BYTE                                     14720000
147300             (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX))         14730000
147400         ADD 1                   TO PV-SYMBOLIC-WORK-INDEX        14740000
147500         IF  (TB-SYMBOLIC-BYTE                                    14750000
147600                 (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX) =    14760000
147700                 PC-EQUAL)                                        14770000
147800* SKIP SYMBOLIC IF IT HAS NO VALUE ASSOCIATED WITH IT.            14780000
147900             IF  (TB-SYMBOLIC-BYTE                                14790000
148000                 (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX + 1)  14800000
148100                     = HIGH-VALUES)                               14810000
148200                 ADD 1           TO PV-SYMBOLIC-INDEX             14820000
148300                 MOVE 1          TO PV-SYMBOLIC-WORK-INDEX        14830000
148400             ELSE                                                 14840000
148500                 SET SYMBOLIC-FOUND TO TRUE                       14850000
148600             END-IF                                               14860000
148700         END-IF                                                   14870000
148800     ELSE                                                         14880000
148900         ADD 1                   TO PV-SYMBOLIC-INDEX             14890000
149000         MOVE 1                  TO PV-SYMBOLIC-WORK-INDEX        14900000
149100*        IF  (TB-SYMBOLIC-BYTE                                    14910000
149200*            (PV-SYMBOLIC-INDEX, PV-SYMBOLIC-WORK-INDEX) = SPACE) 14920000
149300*            DISPLAY ' '                                          14930000
149400*            DISPLAY '*** WARNING ***'                            14940000
149500*            DISPLAY '*** PARAGRAPH 4430- ***'                    14950000
149600*            DISPLAY '*** NO VALUE FOUND FOR SYMBOLIC ===> '      14960000
149700*                         TB-SYMBOLIC-WORK                        14970000
149800*            DISPLAY '*** PKMO.PROCLIB MEMBER = '                 14980000
149900*                         PV-ADD-RECORD                           14990000
150000*            DISPLAY '*** SYS2.PROCLIB MEMBER = '                 15000000
150100*                         PV-PROC-JCL-NAME-SAVE                   15010000
150200*            DISPLAY '*** STEPNAME            = '                 15020000
150300*                         PV-PROCLIB-LABEL-SAVE                   15030000
150400*        END-IF                                                   15040000
150500     END-IF.                                                      15050000
150600     EJECT                                                        15060000
150700                                                                  15070000
150800******************************************************************15080000
150900*5000-MERGE-INCLUDE-JCL.                                         *15090000
151000* ==> PROCESSES:                                                 *15100000
151100*   - DETERMINES WHETHER THE PKMO.INCLLIB JCL TO BE MERGED HAS   *15110000
151200*     ALREADY BEEN LOADED INTO A TABLE IN MEMORY.  IF YES,       *15120000
151300*     PROCESSING CONTINUES.  IF NO, THE JCL IS READ IN AND       *15130000
151400*     LOADED INTO THE INCLUDE TABLE.                             *15140000
151500*   - THEN PERFORMS THE PROCESSING TO MERGE THE INCLUDE          *15150000
151600*     JCL INTO THE PKMO.PROCLIB EXTRACT FILE.                    *15160000
151700* ==> PERFORMED BY :                                             *15170000
151800*   - 2000-PROCESS-FILE.                                         *15180000
151900*   - 4400-FORMAT-WRITE-PROC-JCL-REC.                            *15190000
152000******************************************************************15200000
152100                                                                  15210000
152200 5000-MERGE-INCLUDE-JCL.                                          15220000
152300                                                                  15230000
152400* SEARCH THE INCLUDE TABLE TO SEE IF THE JCL HAS BEEN PREVIOUSLY  15240000
152500* LOADED.  IF NOT, GET THE JCL FROM THE INCLUDE LIBRARY.          15250000
152600                                                                  15260000
152700     SET PV-INCLUDE-INDEX        TO 1.                            15270000
152800                                                                  15280000
152900     IF PV-INCLUDE-NAME-SAVE NOT = 'SYSOUT'                       15290000
153000         DISPLAY '5000- PARAGRAPH FOR '  PV-INCLUDE-NAME-SAVE     15300000
153100         DISPLAY '   PROC = ' PV-ADD-RECORD                       15310000
153200     END-IF.                                                      15320000
153300                                                                  15330000
153400     SEARCH                      TB-INCLUDE-ENTRY                 15340000
153500                                                                  15350000
153600          AT END                                                  15360000
153700              DISPLAY '*** ABEND ***'                             15370000
153800              DISPLAY '*** PARAGRAPH 5000- ***'                   15380000
153900              DISPLAY '*** MAX ENTRIES FOR INCLUDE TABLE REACHED' 15390000
154000              SET PV-JCL-INDEX   TO PV-INCLUDE-INDEX              15400000
154100              DISPLAY '*** PV-INCLUDE-INDEX = '                   15410000
154200                                 PV-JCL-INDEX                     15420000
154300              MOVE               +4002 TO ABEND-CODE              15430000
154400              CALL               'ILBOABN0' USING ABEND-CODE      15440000
154500                                                                  15450000
154600          WHEN                   (PV-INCLUDE-NAME-SAVE =          15460000
154700                                 TB-INCLUDE-MEMBER-NAME           15470000
154800                                 (PV-INCLUDE-INDEX))              15480000
154900             SET PV-JCL-INDEX    TO PV-INCLUDE-INDEX              15490000
155000             PERFORM             5200-FORMAT-WRITE-INCLUDE-REC    15500000
155100                 VARYING         PV-JCL-INDEX                     15510000
155200                 FROM            PV-JCL-INDEX BY 1                15520000
155300                 UNTIL           ((PV-INCLUDE-NAME-SAVE NOT =     15530000
155400                                 TB-INCLUDE-MEMBER-NAME           15540000
155500                                 (PV-JCL-INDEX))                  15550000
155600                 OR              (TB-INCLUDE-MEMBER-NAME          15560000
155700                                 (PV-JCL-INDEX) = SPACE))         15570000
155800                                                                  15580000
155900          WHEN                   (TB-INCLUDE-MEMBER-NAME          15590000
156000                                 (PV-INCLUDE-INDEX) = SPACE)      15600000
156100              PERFORM            5100-GET-INCLUDE-JCL             15610000
156200     END-SEARCH.                                                  15620000
156300     EJECT                                                        15630000
156400******************************************************************15640000
156500*5100-GET-INCLUDE-JCL.                                           *15650000
156600* ==> PROCESSES:                                                 *15660000
156700*   - SETS UP AND ISSUES THE CALL TO ASSEMBLER ROUTINE 'DYNALC.  *15670000
156800*     DYNALC DYNAMICALLY ALLOCATES THE FILE TO BE USED AS        *15680000
156900*     INPUT.  EACH TIME A NEW PIMO.INCLLIB MEMBER IS TO BE       *15690000
157000*     MERGED INTO THE PKMO.PROCLIB EXTRACT FILE, THIS ROUTINE    *15700000
157100*     WILL ALLOCATE THE FILE, OPEN, READ THE RECORDS, AND CLOSE  *15710000
157200*     THE FILE.                                                  *15720000
157300* ==> PERFORMED BY :                                             *15730000
157400*   - 5000-MERGE-INCLUDE-JCL.                                    *15740000
157500******************************************************************15750000
157600                                                                  15760000
157700 5100-GET-INCLUDE-JCL.                                            15770000
157800                                                                  15780000
157900     MOVE 'INP03'                TO DP023-DDNAME.                 15790000
158000     MOVE 'PKMO.INCLLIB'         TO DP023-DSNAME.                 15800000
158100     SET DP023-DISP-SHARE        TO TRUE.                         15810000
158200     MOVE PV-INCLUDE-NAME-SAVE   TO DP023-MEMBER-NAME.            15820000
158300     SET DP023-MEMDISP-READ      TO TRUE.                         15830000
158400                                                                  15840000
158500     SET DP023-DISABLE-DISPLAY-ABEND TO TRUE.                     15850000
158600     PERFORM                     DP023-0000-DYNALC.               15860000
158700                                                                  15870000
158800     IF  DP023-LASTRC = ZERO                                      15880000
158900         MOVE 'N' TO             PS-END-OF-INCLUDE-FILE           15890000
159000         OPEN INPUT              INCLUDE-FILE                     15900000
159100         PERFORM                 8300-READ-INCLUDE-FILE           15910000
159200     ELSE                                                         15920000
159300         INITIALIZE RETURN-CODE                                   15930000
159400         DISPLAY '*** PARA 5100 - INVALID RC FROM DYNALC = '      15940000
159500                   DP023-LASTRC                                   15950000
159600         DISPLAY '*** CURRENT JCL RECORD = ' TB-RECORD            15960000
159700         INITIALIZE ALERT-RECORD                                  15970000
159800         STRING PC-CURRENT-PROGRAM-NAME          DELIMITED BY SIZE15980000
159900                ' - '                            DELIMITED BY SIZE15990000
160000                FUNCTION CURRENT-DATE (1:4)      DELIMITED BY SIZE16000000
160100                '-'                              DELIMITED BY SIZE16010000
160200                FUNCTION CURRENT-DATE (5:2)      DELIMITED BY SIZE16020000
160300                '-'                              DELIMITED BY SIZE16030000
160400                FUNCTION CURRENT-DATE (7:2)      DELIMITED BY SIZE16040000
160500                ' '                              DELIMITED BY SIZE16050000
160600                FUNCTION CURRENT-DATE (9:2)      DELIMITED BY SIZE16060000
160700                ':'                              DELIMITED BY SIZE16070000
160800                FUNCTION CURRENT-DATE (11:2)     DELIMITED BY SIZE16080000
160900             INTO ALERT-RECORD                                    16090000
161000         DISPLAY ALERT-RECORD                                     16100000
161100         WRITE ALERT-RECORD                                       16110000
161110         INITIALIZE ALERT-RECORD                                  16111000
161120         STRING 'PKMO.PROCLIB MBR = '            DELIMITED BY SIZE16112000
161130                PV-ADD-RECORD                    DELIMITED BY SIZE16113000
161140                ':  INCLUDE MEMBER '             DELIMITED BY SIZE16114000
161150                DP023-MEMBER-NAME                DELIMITED BY SIZE16115000
161160                ' NOT FOUND IN PKMO.INCLLIB'     DELIMITED BY SIZE16116000
161170             INTO ALERT-RECORD                                    16117000
161180         DISPLAY ALERT-RECORD                                     16118000
161190         WRITE ALERT-RECORD                                       16119000
161200         INITIALIZE ALERT-RECORD                                  16120000
161201         DISPLAY ALERT-RECORD                                     16120100
161202         WRITE ALERT-RECORD                                       16120200
161203         IF DP023-LASTRC NOT = DP023-RC-MEMBER-DOESNT-EXIST       16120300
161204             MOVE                +4002 TO ABEND-CODE              16120400
161205             DISPLAY '** ABEND = ' ABEND-CODE                     16120500
161206             CALL                'ILBOABN0' USING ABEND-CODE      16120600
161207         ELSE                                                     16120700
161208             SET END-OF-INCLUDE-FILE TO TRUE                      16120800
161209         END-IF                                                   16120900
161210     END-IF.                                                      16121000
161211                                                                  16121100
161212     IF  END-OF-INCLUDE-FILE                                      16121200
161213         IF DP023-LASTRC = ZERO                                   16121300
161214             INITIALIZE ALERT-RECORD                              16121400
161215             STRING PC-CURRENT-PROGRAM-NAME      DELIMITED BY SIZE16121500
161216                    ' - '                        DELIMITED BY SIZE16121600
161217                    FUNCTION CURRENT-DATE (1:4)  DELIMITED BY SIZE16121700
161218                    '-'                          DELIMITED BY SIZE16121800
161219                    FUNCTION CURRENT-DATE (5:2)  DELIMITED BY SIZE16121900
161220                    '-'                          DELIMITED BY SIZE16122000
161230                    FUNCTION CURRENT-DATE (7:2)  DELIMITED BY SIZE16123000
161240                    ' '                          DELIMITED BY SIZE16124000
161250                    FUNCTION CURRENT-DATE (9:2)  DELIMITED BY SIZE16125000
161260                    ':'                          DELIMITED BY SIZE16126000
161270                    FUNCTION CURRENT-DATE (11:2) DELIMITED BY SIZE16127000
161280                 INTO ALERT-RECORD                                16128000
161290             DISPLAY ALERT-RECORD                                 16129000
161300             WRITE ALERT-RECORD                                   16130000
161400             INITIALIZE ALERT-RECORD                              16140000
161500             STRING 'PKMO.PROCLIB MBR = '        DELIMITED BY SIZE16150000
161600                    PV-ADD-RECORD                DELIMITED BY SIZE16160000
161700                    ':  EXECUTED PROC '          DELIMITED BY SIZE16170000
161800                    DP023-MEMBER-NAME            DELIMITED BY SIZE16180000
161900                    ' NO RCDS IN PKMO.INCLLIB'   DELIMITED BY SIZE16190000
162000                 INTO ALERT-RECORD                                16200000
162100             DISPLAY ALERT-RECORD                                 16210000
162200             WRITE ALERT-RECORD                                   16220000
162300             INITIALIZE ALERT-RECORD                              16230000
162400             DISPLAY ALERT-RECORD                                 16240000
162500             WRITE ALERT-RECORD                                   16250000
162600         END-IF                                                   16260000
162700*        DISPLAY '*** ABEND ***'                                  16270000
162800*        MOVE                    +4002 TO ABEND-CODE              16280000
162900*        CALL                   'ILBOABN0' USING ABEND-CODE       16290000
163000     ELSE                                                         16300000
163100         PERFORM                 5110-LOAD-INCLUDE-JCL-TABLE      16310000
163101             UNTIL               END-OF-INCLUDE-FILE              16310100
163102     END-IF.                                                      16310200
163103                                                                  16310300
163104     IF DP023-LASTRC = ZERO                                       16310400
163105         CLOSE                   INCLUDE-FILE                     16310500
163106     END-IF.                                                      16310600
163107     EJECT                                                        16310700
163108                                                                  16310800
163109******************************************************************16310900
163110*5110-LOAD-INCLUDE-JCL-TABLE.                                    *16311000
163120* ==> PROCESSES:                                                 *16312000
163130*   - MOVE THE INCLUDE JCL RECORD FROM THE FILE TO THE INCLUDE   *16313000
163140*     TABLE AND, AT THE SAME TIME, WRITES THE INCLUDE JCL TO     *16314000
163150*     OUTPUT.                                                    *16315000
163160*   - COMMENT RECORDS ARE NOT WRITTEN OUT.                       *16316000
163170* ==> PERFORMED BY :                                             *16317000
163180*   - 5100-GET-INCLUDE-JCL.                                      *16318000
163190******************************************************************16319000
163200                                                                  16320000
163300 5110-LOAD-INCLUDE-JCL-TABLE.                                     16330000
163400                                                                  16340000
163500     IF  INCLUDE-COMMENTS-RECORD                                  16350000
163600         CONTINUE                                                 16360000
163700     ELSE                                                         16370000
163800         MOVE DP023-MEMBER-NAME  TO TB-INCLUDE-MEMBER-NAME        16380000
163900                                 (PV-INCLUDE-INDEX)               16390000
164000         MOVE INCLUDE-RECORD     TO TB-INCLUDE-RECORD             16400000
164100                                 (PV-INCLUDE-INDEX)               16410000
164200         SET PV-JCL-INDEX        TO PV-INCLUDE-INDEX              16420000
164300         PERFORM                 5200-FORMAT-WRITE-INCLUDE-REC    16430000
164400         SET PV-INCLUDE-INDEX    UP BY 1                          16440000
164500     END-IF.                                                      16450000
164600                                                                  16460000
164700     IF  PV-INCLUDE-INDEX > PC-MAX-INCLUDE                        16470000
164800         DISPLAY '*** ABEND ***'                                  16480000
164900         DISPLAY '*** PARAGRAPH 5110- ***'                        16490000
165000         DISPLAY '*** MAX ENTRIES EXCEEDED IN INCLUDE TABLE'      16500000
165100         DISPLAY '*** RESET PC-MAX-INCLUDE.'                      16510000
165200         MOVE                    +4002 TO ABEND-CODE              16520000
165300         CALL                   'ILBOABN0' USING ABEND-CODE       16530000
165400     END-IF.                                                      16540000
165500     IF  PV-INCLUDE-INDEX > MT-INCLUDE-COUNT                      16550000
165600         SET MT-INCLUDE-COUNT TO PV-INCLUDE-INDEX                 16560000
165700     END-IF.                                                      16570000
165800                                                                  16580000
165900     PERFORM                     8300-READ-INCLUDE-FILE.          16590000
166000                                                                  16600000
166100     EJECT                                                        16610000
166200                                                                  16620000
166210******************************************************************16621000
166220*5200-FORMAT-WRITE-INCLUDE-JCL.                                  *16622000
166230* ==> PROCESSES:                                                 *16623000
166240*   - MOVE THE INCLUDE JCL RECORD FROM THE TABLE TO THE OUTPUT   *16624000
166250*     RECORD AND WRITE.                                          *16625000
166260* ==> PERFORMED BY :                                             *16626000
166270*   - 5000-MERGE-INCLUDE-JCL.                                    *16627000
166280*   - 5110-LOAD-INCLUDE-JCL-TABLE.                               *16628000
166290******************************************************************16629000
166300                                                                  16630000
166400 5200-FORMAT-WRITE-INCLUDE-REC.                                   16640000
166500                                                                  16650000
166600     MOVE TB-INCLUDE-RECORD(PV-JCL-INDEX)                         16660000
166700                                 TO PKMO-PROCLIB-MOD-RECORD.      16670000
166800                                                                  16680000
166900     PERFORM                     8100-WRITE-PROCLIB-RECORD.       16690000
167000                                                                  16700000
167100     EJECT                                                        16710000
167200******************************************************************16720000
167300*6000-SCAN-FOR-KEYWORD.                                          *16730000
167400* ==> PROCESSES:                                                 *16740000
167500*   - SCANS FOR THE VALUE CONTAINED IN 'PV-KEYWORD'.             *16750000
167600*   - ALSO SAVES THE LABEL(DDNAME) OF THE JCL STATEMENT.         *16760000
167700* ==> PERFORMED BY :                                             *16770000
167800*   - 2100-SEARCH-FOR-EXEC                                       *16780000
167900******************************************************************16790000
168000 6000-SCAN-FOR-KEYWORD.                                           16800000
168100                                                                  16810000
168200     MOVE 'N'                    TO PS-KEYWORD-FOUND.             16820000
168300     MOVE SPACE                  TO TB-KEYWORD-TABLE.             16830000
168400     MOVE +1                     TO PV-KEYWORD-INDEX.             16840000
168500                                                                  16850000
168600* POSITION INDEX TO THE FIRST BLANK CHARACTER ON THE JCL RECORD   16860000
168700* AND SAVE THE CHARACTERS WHICH ARE THE LABEL(DDNAME) OF THE REC. 16870000
168800                                                                  16880000
168900     PERFORM                                                      16890000
169000         VARYING                 PV-RECORD-INDEX                  16900000
169100         FROM                    1 BY 1                           16910000
169200         UNTIL                   (TB-RECORD-BYTE(PV-RECORD-INDEX) 16920000
169300                                 = SPACE                          16930000
169400         OR                      PV-KEYWORD-INDEX >               16940000
169500                                 PC-MAX-KEYWORD)                  16950000
169600         MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                     16960000
169700                                 TO TB-KEYWORD-BYTE               16970000
169800                                 (PV-KEYWORD-INDEX)               16980000
169900         ADD +1                  TO PV-KEYWORD-INDEX              16990000
170000     END-PERFORM.                                                 17000000
170100                                                                  17010000
170200     MOVE TB-KEYWORD             TO PV-KEYWORD-SAVE.              17020000
170300                                                                  17030000
170400* POSITION INDEX TO THE NEXT NON-BLANK CHARACTER.                 17040000
170500     PERFORM                                                      17050000
170600         VARYING                 PV-RECORD-INDEX                  17060000
170700         FROM                    PV-RECORD-INDEX BY 1             17070000
170800         UNTIL                   TB-RECORD-BYTE(PV-RECORD-INDEX)  17080000
170900                                 NOT = SPACE                      17090000
171000     END-PERFORM.                                                 17100000
171100                                                                  17110000
171200     MOVE SPACE                  TO TB-KEYWORD-TABLE.             17120000
171300     MOVE +1                     TO PV-KEYWORD-INDEX.             17130000
171400                                                                  17140000
171500* CAPTURE THE NEXT WORD.                                          17150000
171600     PERFORM                                                      17160000
171700         VARYING                 PV-RECORD-INDEX                  17170000
171800         FROM                    PV-RECORD-INDEX BY 1             17180000
171900         UNTIL                  ((TB-RECORD-BYTE(PV-RECORD-INDEX) 17190000
172000                                 = SPACE)                         17200000
172100         OR                      (PV-KEYWORD-INDEX >              17210000
172200                                 PC-MAX-KEYWORD))                 17220000
172300         MOVE TB-RECORD-BYTE(PV-RECORD-INDEX)                     17230000
172400                                 TO TB-KEYWORD-BYTE               17240000
172500                                 (PV-KEYWORD-INDEX)               17250000
172600         ADD +1                  TO PV-KEYWORD-INDEX              17260000
172700     END-PERFORM.                                                 17270000
172800                                                                  17280000
172900     IF  TB-KEYWORD = PV-KEYWORD                                  17290000
173000         SET KEYWORD-FOUND       TO TRUE                          17300000
173100     END-IF.                                                      17310000
173200     EJECT                                                        17320000
173300                                                                  17330000
173400******************************************************************17340000
173500*8000-READ-PROCLIB-FILE.                                         *17350000
173600* ==> PROCESSES:                                                 *17360000
173700*   - READS THE PKMO.PROCLIB EXTRACT FILE.                       *17370000
173800* ==> PERFORMED BY :                                             *17380000
173900*   - NUMEROUS PARAGRAPHS.                                       *17390000
174000******************************************************************17400000
174100 8000-READ-PROCLIB-FILE.                                          17410000
174200                                                                  17420000
174300     READ                        PROCLIB-FILE                     17430000
174400         INTO                    PKMO-PROCLIB-RECORD              17440000
174500         AT END                                                   17450000
174600             SET END-OF-PROCLIB-FILE                              17460000
174700                                 TO TRUE.                         17470000
174800                                                                  17480000
174900******************************************************************17490000
175000*8100-WRITE-PROCLIB-FILE.                                        *17500000
175100* ==> PROCESSES:                                                 *17510000
175200*   - WRITES THE PROCLIB RECORD TO OUTPUT.                       *17520000
175300* ==> PERFORMED BY :                                             *17530000
175400*   - NUMEROUS PARAGRAPHS.                                       *17540000
175500******************************************************************17550000
175600 8100-WRITE-PROCLIB-RECORD.                                       17560000
175700                                                                  17570000
175800     WRITE                       MODIFIED-PROCLIB-RECORD          17580000
175900         FROM                    PKMO-PROCLIB-MOD-RECORD-OUT.     17590000
176000                                                                  17600000
176100******************************************************************17610000
176200*8200-READ-SYS2-PROCLIB-FILE.                                    *17620000
176300* ==> PROCESSES:                                                 *17630000
176400*   - READS THE SYS2.PROCLIB MEMBER.                             *17640000
176500* ==> PERFORMED BY :                                             *17650000
176600*   - 4100-READ-AND-LOAD-PROC-JCL.                               *17660000
176700*   - 4110-LOAD-SYS2-PROCLIB-JCL-TAB.                            *17670000
176800******************************************************************17680000
176900 8200-READ-SYS2-PROCLIB-FILE.                                     17690000
177000                                                                  17700000
177100     READ                        SYS2-PROCLIB-FILE                17710000
177200         INTO                    SYS2-PROCLIB-RECORD              17720000
177300         AT END                                                   17730000
177400             SET END-OF-SYS2-PROCLIB-FILE                         17740000
177500                                 TO TRUE.                         17750000
177600                                                                  17760000
177700******************************************************************17770000
177800*8300-READ-INCLUDE-FILE.                                         *17780000
177900* ==> PROCESSES:                                                 *17790000
178000*   - READS THE PKMO.INCLLIB MEMBER.                             *17800000
178100* ==> PERFORMED BY :                                             *17810000
178200*   - 5100-GET-INCLUDE-JCL.                                      *17820000
178300*   - 5110-LOAD-INCLUDE-JCL-TABLE.                               *17830000
178400******************************************************************17840000
178500 8300-READ-INCLUDE-FILE.                                          17850000
178600                                                                  17860000
178700     READ                        INCLUDE-FILE                     17870000
178800         INTO                    INCLUDE-RECORD                   17880000
178900         AT END                                                   17890000
179000             SET END-OF-INCLUDE-FILE                              17900000
179100                                 TO TRUE.                         17910000
179200     EJECT                                                        17920000
179300******************************************************************17930000
179400*9000-EOJ-PROCESSING.                                            *17940000
179500* ==> PROCESSES:                                                 *17950000
179600*   - PERFORMS WRAPUP PROCESSING.                                *17960000
179700* ==> PERFORMED BY :                                             *17970000
179800*   - 0000-MAINLINE.                                             *17980000
179900******************************************************************17990000
180000 9000-EOJ-PROCESSING.                                             18000000
180100                                                                  18010000
180200     DISPLAY ' '.                                                 18020000
180300     DISPLAY PC-CURRENT-PROGRAM-NAME ' - INTERNAL TABLE USAGE'.   18030000
180400     DISPLAY ' '.                                                 18040000
180500                                                                  18050000
180600     SUBTRACT +1 FROM MT-KEYWORD-COUNT.                           18060000
180700     MOVE MT-KEYWORD-COUNT TO PV-DISPLAY-TABLE-USED.              18070000
180800     MOVE PC-MAX-KEYWORD TO  PV-DISPLAY-TABLE-MAX.                18080000
180900     DISPLAY PC-CURRENT-PROGRAM-NAME ' - KEYWORD TABLE'.          18090000
181000     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18100000
181100               PV-DISPLAY-TABLE-USED  '  MAX: '                   18110000
181200               PV-DISPLAY-TABLE-MAX.                              18120000
181300                                                                  18130000
181400     SUBTRACT +1 FROM MT-SYMBOLIC-COUNT.                          18140000
181401     MOVE MT-SYMBOLIC-COUNT TO PV-DISPLAY-TABLE-USED.             18140100
181402     MOVE PC-MAX-SYMBOLIC TO  PV-DISPLAY-TABLE-MAX.               18140200
181403     DISPLAY PC-CURRENT-PROGRAM-NAME ' - SYMBOLIC TABLE'.         18140300
181404     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18140400
181405               PV-DISPLAY-TABLE-USED  '  MAX: '                   18140500
181406               PV-DISPLAY-TABLE-MAX.                              18140600
181407                                                                  18140700
181408     SUBTRACT +1 FROM MT-SYMBOLIC-WORK-COUNT.                     18140800
181409     MOVE MT-SYMBOLIC-WORK-COUNT TO PV-DISPLAY-TABLE-USED.        18140900
181410     MOVE PC-MAX-SYMBOLIC-NAME TO  PV-DISPLAY-TABLE-MAX.          18141000
181411     DISPLAY PC-CURRENT-PROGRAM-NAME ' - SYMBOLIC WORK TABLE'.    18141100
181412     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18141200
181413               PV-DISPLAY-TABLE-USED  '  MAX: '                   18141300
181414               PV-DISPLAY-TABLE-MAX.                              18141400
181415                                                                  18141500
181416     SUBTRACT +1 FROM MT-PROC-JCL-COUNT.                          18141600
181417     MOVE MT-PROC-JCL-COUNT TO PV-DISPLAY-TABLE-USED.             18141700
181418     MOVE PC-MAX-PROC-JCL TO  PV-DISPLAY-TABLE-MAX.               18141800
181419     DISPLAY PC-CURRENT-PROGRAM-NAME ' - PROC-JCL TABLE'.         18141900
181420     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18142000
181430               PV-DISPLAY-TABLE-USED  '  MAX: '                   18143000
181431               PV-DISPLAY-TABLE-MAX.                              18143100
181432                                                                  18143200
181433     SUBTRACT +1 FROM MT-PROC-JCL-WORK-COUNT.                     18143300
181434     MOVE MT-PROC-JCL-WORK-COUNT TO PV-DISPLAY-TABLE-USED.        18143400
181435     MOVE PC-MAX-PROC-JCL-WORK TO  PV-DISPLAY-TABLE-MAX.          18143500
181436     DISPLAY PC-CURRENT-PROGRAM-NAME ' - PROC-JCL WORK TABLE'.    18143600
181437     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18143700
181438               PV-DISPLAY-TABLE-USED  '  MAX: '                   18143800
181439               PV-DISPLAY-TABLE-MAX.                              18143900
181440                                                                  18144000
181441     SUBTRACT +1 FROM MT-INCLUDE-COUNT.                           18144100
181442     MOVE MT-INCLUDE-COUNT TO PV-DISPLAY-TABLE-USED.              18144200
181443     MOVE PC-MAX-INCLUDE TO  PV-DISPLAY-TABLE-MAX.                18144300
181444     DISPLAY PC-CURRENT-PROGRAM-NAME ' - INCLUDE TABLE'.          18144400
181445     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18144500
181446               PV-DISPLAY-TABLE-USED  '  MAX: '                   18144600
181447               PV-DISPLAY-TABLE-MAX.                              18144700
181448                                                                  18144800
181449     SUBTRACT +1 FROM MT-OVERRIDE-COUNT.                          18144900
181450     MOVE MT-OVERRIDE-COUNT TO PV-DISPLAY-TABLE-USED.             18145000
181451     MOVE PC-MAX-OVERRIDE TO  PV-DISPLAY-TABLE-MAX.               18145100
181452     DISPLAY PC-CURRENT-PROGRAM-NAME ' - OVERRIDE TABLE'.         18145200
181453     DISPLAY PC-CURRENT-PROGRAM-NAME ' -      USED: '             18145300
181454               PV-DISPLAY-TABLE-USED  '  MAX: '                   18145400
181455               PV-DISPLAY-TABLE-MAX.                              18145500
181456                                                                  18145600
181457     CLOSE                       PROCLIB-FILE                     18145700
181458                                 MODIFIED-PROCLIB-FILE            18145800
181459                                 ALERT-FILE                       18145903
181460                                 TRACKING-FILE.                   18146003
181461                                                                  18146103
181470******************************************************************18147000
181480*  PROCEDURE DIVISION CALL FOR THE DYNAMIC ALLOCATION ROUTINE.    18148000
181490******************************************************************18149000
181500     COPY DPPD023.                                                18150000
