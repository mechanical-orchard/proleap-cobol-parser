000100******************************************************************00010099
000200 IDENTIFICATION DIVISION.                                         00020099
000300******************************************************************00030099
000400                                                                  00040099
000500 PROGRAM-ID.   AUKCS500.                                          00050099
000600 AUTHOR.       BRAD GROCHOWSKI TKMA557.                           00060099
000700 INSTALLATION. KOHLS DEPARTMENT STORES.                           00070099
000800 DATE-WRITTEN.              05-28-2003.                           00080099
000900 DATE-COMPILED.                                                   00090099
001000                                                                  00100099
001100******************************************************************00110099
001200*          CICS PROGRAM - AUKCS500 - A500                        *00120099
001300*                                                                *00130099
001400*         AJB TO MAINFRAME TCP/IP LISTENER                       *00140099
001500*                                                                *00150099
001600* THIS TRANSACTION WILL ESTABLISH TCP/IP CONNECTIONS TO THE AJB  *00160099
001700* SERVERS, RECEIVE MESSAGES AND PASS THEM TO CICS AUTHORIZATION  *00170099
001800* PROGRAMS, DEPENDING ON THE MESSAGE TYPE.                       *00180099
001900*                                                                *00190099
002000* - THIS PROGRAM WAS WRITTEN USING DPKCS300 AS A GUIDE           *00200099
002100*                                                                *00210099
002110* NOTE: This program must be compiled with "CICS SOCKETS PGM"    *00211099
002120*       option set to "Y".                                       *00212099
002200*--------------------------------------------------------------- *00220099
002300* DISPLAY MESSAGES CAN BE TURNED ON BY STARTING PROGRAM A501.    *00230099
002400* SEE PROGRAM DOC FOR AUKCS501 FOR MORE INFO.                    *00240099
002500*                                                                *00250099
002600* DISP-MSGS VARIABLE - IF 9999 = DISPLAY ALL MSGS                *00260099
002700*                      IF 0 =    DISPLAY ERROR MSGS ONLY "!"     *00270099
002800*                      IF < 9999 = DISPLAY NEXT # OF MESSAGES    *00280099
002900*--------------------------------------------------------------- *00290099
003000* THIS PROGRAM IS SETUP TO HANDLE A MAXIMUM OF 100  SOCKETS.     *00300099
003100* BECAUSE THE WAY TCP/IP HANDLES SOCKETS, SOME COULD BE 'DEAD'   *00310099
003200* AND THAT IS WHY THIS PROGRAM CAN HANDLE MORE THAN NECESSARY.   *00320099
003300* ANY DEAD SOCKETS THAT HAVE NOT HAD ANY TRAFFIC IN THE LAST     *00330099
003400* 12 HOURS (720 MINUTES) WILL BE CLOSED. SINCE THE CONNECTIONS   *00340099
003500* TO THE AJB SERVERS WILL STAY OPEN CONSTANTLY, AND ARE MONITORED*00350099
003600* IN NETCOOL WHENEVER THEY DROP, THE INTERVAL IS LONG.           *00360099
003700* THE TIMEOUT CAN BE CHANGED IN 1 MINUTE INTERVALS.              *00370099
003800*                                                                *00380099
003900* THE FOLLOWING VARIABLES NEED TO BE CHANGED IF YOU CHANGE THE   *00390099
004000* NUMBER OF SOCKETS THAT THIS SOCKET SERVER SUPPORTS.  THESE     *00400099
004100* VARIABLES ARE:                                                 *00410099
004200*                                                                *00420099
004300*  NOTE: 2000 SOCKETS IS THE MAXIMUM THAT CAN BE HANDLED BY      *00430099
004400*        ANY 1 MAINFRAME LISTENER. IF YOU NEED MORE THAN THAT,   *00440099
004500*        THEN RUN 2 LISTENERS.                                   *00450099
004600*                                                   CURRENT      *00460099
004700*                                                                *00470099
004800*    SOCKETS                                          100        *00480099
004900*    CHAR-STRING                                      100        *00490099
005000*    CHAR-STRING1                                     100        *00500099
005100*    CHAR-ENTRY-TABLE                                 100        *00510099
005200*    SELECT-NUMFDS                                    100        *00520099
005300*    BIT-MASK-LENGTH                                  100        *00530099
005400*                                                                *00540099
005500*                      (ROUND DOWN ON DIVIDES)       CURRENT     *00550099
005600*    BIT-ARRAY         - ((sockets/32)+1))*4           16        *00560099
005700*    SELECT-RD-MASK    - ((sockets/32)+1))*4           16        *00570099
005800*    SELECT-WR-MASK    - ((sockets/32)+1))*4           16        *00580099
005900*    SELECT-EX-MASK    - ((sockets/32)+1))*4           16        *00590099
006000*    SELECT-RR-MASK    - ((sockets/32)+1))*4           16        *00600099
006100*    SELECT-RW-MASK    - ((sockets/32)+1))*4           16        *00610099
006200*    SELECT-RE-MASK    - ((sockets/32)+1))*4           16        *00620099
006300*                                                                *00630099
006400* ALSO SEE NOTE IN THE LINKAGE SECTION FOR INCREASING THE SIZE   *00640099
006500* OF THE SOCKET TABLE.  Statement is below:                      *00650099
006600*                                                                *00660099
006700*    05 TCPSOCKETN-TABLE-ELEMENT OCCURS 100  TIMES.              *00670099
006800*                                                                *00680099
006900* WHEN PARSING MESSAGES, THE MAXIMUM MESSAGE LENGTH IS 500.      *00690099
007000* IF YOU WILL BE USING MESSAGES LARGER THAN 500 BYTES, CHANGE    *00700099
007100* THE CONSTANT "PC-MAX-MSG-LEN" TO YOUR NEW MESSAGE LENGTH.      *00710099
007200* USED IN 7900-READ-HEADER-LENGTH.                               *00720099
007210*                                                                *00721099
007220* For a complete guide to TCP/IP Socket programming for CICS, see*00722099
007221* the following IBM BOOK (available on IBM Bookmanager CD):      *00722199
007230* OS/390 SecureWay Communications Server                         *00723099
007232* IP CICS Sockets Guide Version 2 Release 8                      *00723299
007240* Document Number SC31-8518-01  File Number S390-50              *00724099
007300******************************************************************00730099
007400******************************************************************00740099
007500                                                                  00750099
007600******************************************************************00760099
007700 ENVIRONMENT DIVISION.                                            00770099
007800******************************************************************00780099
007900                                                                  00790099
008000******************************************************************00800099
008100 DATA DIVISION.                                                   00810099
008200******************************************************************00820099
008300                                                                  00830099
008400 WORKING-STORAGE SECTION.                                         00840099
008500 01  PV-PROGRAM-VARIABLES.                                        00850099
008600     05  STARTUP-AGAIN         PIC X    VALUE 'N'.                00860099
008700     05  DEAD-TIMEOUT          PIC 9(16) COMP VALUE 720.          00870099
008800     05  PORTADDR              PIC 9(4) VALUE 0.                  00880099
008900     05  PV-HOLD-PORT          PIC 9(4) VALUE 0.                  00890099
009000     05  RECORD-TO-READ        PIC 9(4) COMP VALUE 2.             00900099
009100     05  GWPTR                 PIC S9(8) COMP.                    00910099
009200     05  TSTAMP                PIC 9(16) COMP.                    00920099
009300     05  TSTAMP-SWQ            PIC 9(16) COMP VALUE 0.            00930099
009400     05  TSTAMP-DEAD           PIC 9(16) COMP VALUE 0.            00940099
009500     05  DSTAMP                PIC 9(16) COMP.                    00950099
009600     05  SSTAMP                PIC 9(16) COMP.                    00960099
009700     05  PV-RESPONSE           PIC 9(9) BINARY.                   00970099
009800     05  PV-RC                 PIC 9(4) BINARY VALUE 0.           00980099
009900     05  WSCT                  PIC S9(8) BINARY VALUE 0.          00990099
010000     05  TSOCKET               PIC S9(8) BINARY.                  01000099
010100     05  SAV-MSG-LEN           PIC S9(4) COMP.                    01010099
010200     05  SOCKNO                PIC S9(8) BINARY.                  01020099
010300     05  SAV-SOCKNO            PIC S9(8) BINARY.                  01030099
010400     05  SOCKET-DESCRIPTOR     PIC 9(4) BINARY VALUE 0.           01040099
010500     05  SOCKID                PIC 9(4) BINARY.                   01050099
010600     05  ERRNO                 PIC 9(8) BINARY.                   01060099
010700     05  RETCODE               PIC S9(8) BINARY.                  01070099
010800     05  PV-REC-PACKET-LEN     PIC S9(8) BINARY.                  01080099
010900     05  RTSQ-LEN              PIC S9(4) BINARY VALUE 0.          01090099
011000     05  PV-CONVERT-LEN        PIC 9(8) BINARY VALUE 0.           01100099
011100     05  RECV-FLAG             PIC 9(8) BINARY VALUE 0.           01110099
011200     05  CLENG                 PIC 9(4) BINARY.                   01120099
011300     05  OCTET                 PIC 9(3).                          01130099
011400     05  DSPLY8                PIC X(8).                          01140099
011500     05  CICS-DAT-LEN          PIC 9(4) BINARY VALUE 0.           01150099
011600     05  DCOUNT                PIC 9(8) BINARY.                   01160099
011700     05  MATCHING-NUMB         PIC 9(8) BINARY VALUE 1.           01170099
011800     05  TCPIP-CICS-QUEUE      PIC X(1)    VALUE SPACE.           01180099
011900     05  TSQ-WRITE-COUNT       PIC 9(8).                          01190099
012000     05  TSQ-TOTAL-RECORDS     PIC 9(8).                          01200099
012100     05  TSQ-READ-COUNT        PIC 9(8).                          01210099
012200     05  CIP-1                 PIC S9(8) BINARY.                  01220099
012300     05  CIP-2                 PIC S9(8) BINARY.                  01230099
012400     05  CIP-3                 PIC S9(8) BINARY.                  01240099
012500     05  CIP-4                 PIC S9(8) BINARY.                  01250099
012600     05  WS-RECEIVE            PIC X(30).                         01260099
012700     05  HEADER-ERROR          PIC X     VALUE 'N'.               01270099
012800     05  MSG-PARSER            PIC X(9000) VALUE SPACES.          01280099
012900     05  PV-CONVRT-MSGLEN-HEX  PIC X(2).                          01290099
013000     05  PV-CONVRT-MSGLEN-COMP REDEFINES PV-CONVRT-MSGLEN-HEX     01300099
013100                               PIC 9(4) COMP.                     01310099
013200     05  PV-CONVRT-MSGLEN-INT  PIC 9(4).                          01320099
013300     05  SW-END-OF-PACKET      PIC X     VALUE 'N'.               01330099
013400     05  PRSR-CT               PIC 9(4)  VALUE ZERO.              01340099
013500     05  PRSR-CT-1             PIC 9(4)  VALUE ZERO.              01350099
013600     05  PV-PRTL-MSG-LEN       PIC S9(4) COMP.                    01360099
013700     05  PV-TO-PARSE-LEN       PIC 9(4)  VALUE ZERO.              01370099
013800     05  PV-MSG-LEN-WOHDR      PIC 9(5)  VALUE ZERO.              01380099
013900     05  PV-MSG-LEN-WHDR       PIC 9(5)  VALUE ZERO.              01390099
014000     05  WS-NEWLEN             PIC 9(5)  VALUE ZERO.              01400099
014100                                                                  01410099
014200 01  PC-PROGRAM-CONSTANTS.                                        01420099
014300     05  IP-LISTENER-TRAN      PIC X(4) VALUE 'A500'.             01430099
014400     05  SOCKETS               PIC 9(8) COMP VALUE 100.           01440099
014500     05  MAX-SOCKETS-LESS1     PIC 9(8) COMP VALUE 99.            01450099
014600     05  FULL-TIMEOUT-T720     PIC 9(16) COMP VALUE 720.          01460099
014700     05  FULL-TIMEOUT-T30      PIC 9(16) COMP VALUE 30.           01470099
014800     05  FULL-TIMEOUT-T2       PIC 9(16) COMP VALUE 2.            01480099
014900     05  BITMASK-TOKEN         PIC X(16) VALUE 'TCPIPBITMASKCOBL'.01490099
015000     05  TOEBCDIC-TOKEN        PIC X(16) VALUE 'TCPIPTOEBCDICXLT'.01500099
015100     05  TOASCII-TOKEN         PIC X(16) VALUE 'TCPIPTOASCIIXLAT'.01510099
015200     05  USED-COUNTER          PIC S9(8) BINARY VALUE 100.        01520099
015300     05  INIT-LOW              PIC X VALUE LOW-VALUES.            01530099
015400     05  TCP-BUF-SIZE          PIC 9(8) BINARY VALUE 4108.        01540099
015500     05  PC-MAX-MSG-LEN        PIC 9(5) VALUE 500.                01550099
015600     05  PC-MIN-MSG-LEN        PIC 9(5) VALUE 2.                  01560099
015700                                                                  01570099
015800 01  DS-DISPLAY-MESSAGES.                                         01580099
015900     05  DISP-MSGS             PIC S9(8) COMP VALUE 0025.         01590099
016000                                                                  01600099
016100* THESE VARIABLES ARE IN COMMENTED-OUT CODE.                      01610099
016200 01  MISC-VARIABLES.                                              01620099
016300     05  RECV-COUNT            PIC 9(8) BINARY VALUE 0.           01630099
016400     05  SEND-COUNT            PIC 9(8) BINARY VALUE 0.           01640099
016500     05  STARTT                PIC 9(16) COMP.                    01650099
016600     05  DISP-MAX              PIC 9(4).                          01660099
016700                                                                  01670099
016800 01  TCPIPPRQ.                                                    01680099
016900     05 FILLER                  PIC X(7)    VALUE 'AUTCPPR'.      01690099
017000     05 TCPIPPRQ-ONE            PIC X(1)    VALUE SPACE.          01700099
017100                                                                  01710099
017200 01  TCPIPSWQ.                                                    01720099
017300     05 FILLER                  PIC X(7)    VALUE 'AUTCPSW'.      01730099
017400     05 TCPIPSWQ-ONE            PIC X(1)    VALUE SPACE.          01740099
017500                                                                  01750099
017600 01  PV-SYSTEM-ID.                                                01760099
017700     05  PV-CICS-REGION         PIC  X(06)  VALUE SPACE.          01770099
017800     05  FILLER                 PIC  X(02)  VALUE SPACE.          01780099
017900                                                                  01790099
018000 01  TTIME-1.                                                     01800099
018100     05 TTIME                   PIC 9(8).                         01810099
018200 01  TTIME-2 REDEFINES TTIME-1.                                   01820099
018300     05 HH                      PIC 9(2).                         01830099
018400     05 FILLER                  PIC X.                            01840099
018500     05 MM                      PIC 9(2).                         01850099
018600     05 FILLER                  PIC X.                            01860099
018700     05 SS                      PIC 9(2).                         01870099
018800                                                                  01880099
018900 01  FCNTL-PARMS.                                                 01890099
019000     02  FCNTL-COMMAND      PIC 9(8) COMP.                        01900099
019100     02  FCNTL-ARG          PIC 9(8) COMP.                        01910099
019200     02  FCNTL-ERR          PIC 9(8) COMP.                        01920099
019300     02  FCNTL-RET          PIC 9(8) COMP.                        01930099
019400                                                                  01940099
019500 01  TCPIP-API-PARMS.                                             01950099
019600     02  INTAIDNT               PIC X(8) VALUE 'IUCVAPI '.        01960099
019700     02  INTAMAXS               PIC 9(4) COMP VALUE 251.          01970099
019800     02  INTASUBT.                                                01980099
019900         05 SUBTASKNO           PIC X(7) VALUE LOW-VALUES.        01990099
020000         05 SUBT-CHAR           PIC X VALUE 'S'.                  02000099
020100     02  MAX-SOCK-NUM           PIC 9(8) COMP VALUE 0.            02010099
020200                                                                  02020099
020300     02  SELRETC                PIC S9(8) COMP.                   02030099
020400     02  EZRETC                 PIC S9(8) COMP.                   02040099
020500     02  EZERRNO                PIC S9(8) COMP.                   02050099
020600                                                                  02060099
020700     02  SOCKAFIN               PIC 9(8) COMP VALUE 2.            02070099
020800     02  SOCKTYPE               PIC 9(8) COMP VALUE 1.            02080099
020900     02  SOCKPCOL               PIC 9(8) COMP VALUE 0.            02090099
021000                                                                  02100099
021100     02  SSOLEN                 PIC 9(8) COMP VALUE 4.            02110099
021200     02  SSOOPTNM               PIC 9(8) COMP VALUE 4.            02120099
021300     02  SSOOPVAL               PIC X(4) VALUE '1   '.            02130099
021400     02  SSOREUSE               PIC 9(8) COMP VALUE 4.            02140099
021500                                                                  02150099
021600     02  BINDNAME.                                                02160099
021700         05  BINDAFIN           PIC 9(4) COMP.                    02170099
021800         05  BINDPORT           PIC 9(4) COMP.                    02180099
021900         05  BINDIPAD           PIC 9(8) COMP.                    02190099
022000         05  BINDZERO           PIC 9(16) COMP.                   02200099
022100                                                                  02210099
022200     02  LISTBCKL               PIC 9(8) COMP VALUE 40.           02220099
022300***   CHANGE TO MATCH (OR LESS THAN) SOMAXCONN IN ********        02230099
022400***   IN TCPIP.PROFILE                            ********        02240099
022500                                                                  02250099
022600     02  ACCEPT-NAME.                                             02260099
022700         03  ACCEPT-AF-INET     PIC 9(4) COMP.                    02270099
022800         03  ACCEPT-PORT        PIC 9(4) COMP.                    02280099
022900         03  ACCEPT-IP-ADDR     PIC 9(8) COMP.                    02290099
023000         03  FILLER             PIC X(8).                         02300099
023100                                                                  02310099
023200 01  SELECT-PARMS.                                                02320099
023300     02  SELECT-NUMFDS          PIC 9(8) COMP VALUE 100.          02330099
023400     02  SELECT-TIMEOUT.                                          02340099
023500         03  SELECT-SECS        PIC 9(8) COMP VALUE 2.            02350099
023600         03  SELECT-MILLSECS    PIC 9(8) COMP VALUE 0.            02360099
023700     02  SELECT-RD-MASK         PIC X(16).                        02370099
023800     02  SELECT-WR-MASK         PIC X(16).                        02380099
023900     02  SELECT-EX-MASK         PIC X(16).                        02390099
024000     02  SELECT-RR-MASK         PIC X(16).                        02400099
024100     02  SELECT-RW-MASK         PIC X(16).                        02410099
024200     02  SELECT-RE-MASK         PIC X(16).                        02420099
024300                                                                  02430099
024400 01  CHAR-MASK1.                                                  02440099
024500     02 CHAR-STRING1            PIC X(100).                       02450099
024600                                                                  02460099
024700 01  CHAR-MASK.                                                   02470099
024800     02 CHAR-STRING             PIC X(100).                       02480099
024900                                                                  02490099
025000 01  CHAR-ARRAY REDEFINES CHAR-MASK.                              02500099
025100     02  CHAR-ENTRY-TABLE OCCURS 100 TIMES.                       02510099
025200       03  CHAR-ENTRY           PIC X.                            02520099
025300                                                                  02530099
025400 01  BIT-MASK.                                                    02540099
025500     02  BIT-ARRAY              PIC X(16).                        02550099
025600                                                                  02560099
025700 01  BIT-FUNCTION-CODES.                                          02570099
025800     02  CTOB                   PIC X(4) VALUE 'CTOB'.            02580099
025900     02  BTOC                   PIC X(4) VALUE 'BTOC'.            02590099
026000                                                                  02600099
026100 01  BIT-MASK-LENGTH            PIC 9(8) COMP VALUE 100.          02610099
026200                                                                  02620099
026300 01  COMMAND.                                                     02630099
026400     05 ACCEPT-CMD              PIC X(16) VALUE 'ACCEPT'.         02640099
026500     05 BIND-CMD                PIC X(16) VALUE 'BIND'.           02650099
026600     05 CLOSE-CMD               PIC X(16) VALUE 'CLOSE'.          02660099
026700     05 FCNTL-CMD               PIC X(16) VALUE 'FCNTL'.          02670099
026800     05 INITAPI-CMD             PIC X(16) VALUE 'INITAPI'.        02680099
026900     05 LISTEN-CMD              PIC X(16) VALUE 'LISTEN'.         02690099
027000     05 RECVFROM-CMD            PIC X(16) VALUE 'RECVFROM'.       02700099
027100     05 SELECT-CMD              PIC X(16) VALUE 'SELECT'.         02710099
027200     05 SETSOCK-CMD             PIC X(16) VALUE 'SETSOCKOPT'.     02720099
027300     05 SOCKET-CMD              PIC X(16) VALUE 'SOCKET'.         02730099
027400     05 TAKESOCKET-CMD          PIC X(16) VALUE 'TAKESOCKET'.     02740099
027500     05 WRITE-CMD               PIC X(16) VALUE 'WRITE'.          02750099
027600                                                                  02760099
027700                                                                  02770099
027800*---------------------------------------------------------        02780099
027900* AUTHORIZATION MESSAGE DETAIL FIELDS                             02790099
028000* THIS TABLE WILL HOLD THE AUTHORIZATION MESSAGE.                 02800099
028100* WILL BE USED TO VERIFY FIRST 6 FIELDS BEFORE SENDING TO         02810099
028200* AUTH PROGRAM.                                                   02820099
028300* MESSAGE CAN BE UP TO 150 FIELDS OF 50 BYTES EACH.               02830099
028400* MESSAGES ARE IN AJB FIPAY 100 FORMAT.                           02840099
028500*---------------------------------------------------------        02850099
028600 01  UT-AUTH-MESSAGE.                                             02860099
028700     05  UT-AUTH-FIELD             OCCURS 150 TIMES               02870099
028800                                   PIC X(50)      VALUE SPACES.   02880099
028900     05  UT-AUTH-INDEX             PIC 9(3)       VALUE ZERO.     02890099
029000     05  UT-WS-CTR                 PIC 9(3)       VALUE ZERO.     02900099
029100                                                                  02910099
029200 01  CHECK-FIPAY-DATA.                                            02920099
029300     05 FI-01-TRAN-TYP          PIC X(3).                         02930099
029400        88 FI-01-REQUEST        VALUE '100'.                      02940099
029500     05 FI-06-TRAN-TYP-CODE     PIC X(10).                        02950099
029600        88 FI-06-SV             VALUE 'GIFTCARD  '.               02960099
029700                                                                  02970099
029800***************  INPUT & OUTPUT BUFFER AREAS ********             02980099
029900                                                                  02990099
030000* TCP-BUF IS MESSAGE READ FROM SOCKET OR TSQ *                    03000099
030100 01  TCP-BUF-OUT.                                                 03010099
030200     05 TCP-BUF-LEN             PIC 9(4).                         03020099
030300     05 TCP-BUF-MATCHING        PIC 9(8).                         03030099
030400     05 TCP-BUF.                                                  03040099
030500        10 TCP-MSG-LEN          PIC X(2).                         03050099
030600        10 TCP-MESSAGE          PIC X(4106).                      03060099
030700                                                                  03070099
030800* MESSAGE TO BE SENT BACK TO STORE *                              03080099
030900 01  TCP-BUF-OUT-R  REDEFINES TCP-BUF-OUT.                        03090099
031000     05 FILLER                  PIC X(12).                        03100099
031100     05 TCP-BUF-REC.                                              03110099
031200       10 TCP-BUF-HEX-LEN       PIC X(2).                         03120099
031300       10 TCP-BUF-R             PIC X(4106).                      03130099
031400                                                                  03140099
031500 01  SPARE-SPACE-FOR-OVERLAY.                                     03150099
031600     05  FILLER                 PIC X(50).                        03160099
031700                                                                  03170099
031800* MESSAGE SENT TO CHILD PROGRAM *                                 03180099
031900 01  CICS-BUF-OUT.                                                03190099
032000     05 CICS-BUF-LEN            PIC 9(4).                         03200099
032100     05 CICS-BUF-MATCHING       PIC 9(8).                         03210099
032200     05 CICS-BUF-LISTENER-Q     PIC X(1).                         03220099
032300     05 CICS-BUF.                                                 03230099
032400        10 FILLER               PIC X(4108).                      03240099
032500                                                                  03250099
032600 01  CICS-TRANID.                                                 03260099
032700     05 CICS-TRANID-SV          PIC X(4)                          03270099
032800                                VALUE 'A502'.                     03280099
032900                                                                  03290099
033000* INDEX TO KEEP TRACK OF MESSAGE TO READ FROM TSQ *               03300099
033100 01  TSQ-INDEX.                                                   03310099
033200     02 TSQ-COUNT-1             PIC 9(8).                         03320099
033300     02 TSQ-COUNT-2             PIC 9(8).                         03330099
033400     02 FILLER                  PIC X(4120).                      03340099
033500                                                                  03350099
033600**********************************************************        03360099
033700* FORMATTED TRACE MESSAGES TO BE DISPLAYED IN EPCL       *        03370099
033800**********************************************************        03380099
033900 01  DISP-OPEN-MSG.                                               03390099
034000     05 FILLER              PIC X(07) VALUE ' OPEN ='.            03400099
034100     05 DISP-OPEN-SOKT      PIC 9(4).                             03410099
034200     05 FILLER              PIC X VALUE ':'.                      03420099
034300     05 DISP-OPEN-CIP-1     PIC 9(3).                             03430099
034400     05 FILLER              PIC X VALUE '.'.                      03440099
034500     05 DISP-OPEN-CIP-2     PIC 9(3).                             03450099
034600     05 FILLER              PIC X VALUE '.'.                      03460099
034700     05 DISP-OPEN-CIP-3     PIC 9(3).                             03470099
034800     05 FILLER              PIC X VALUE '.'.                      03480099
034900     05 DISP-OPEN-CIP-4     PIC 9(3).                             03490099
035000     05 FILLER              PIC X(05) VALUE ',NUM='.              03500099
035100     05 DISP-OPEN-NUMB      PIC 9(6).                             03510099
035200     05 FILLER              PIC X(5) VALUE ',ACT='.               03520099
035300     05 DISP-OPEN-CIP-ACT   PIC 9(4).                             03530099
035400     05 FILLER              PIC X VALUE '.'.                      03540099
035500                                                                  03550099
035600 01  DISP-TRAN-COUNT.                                             03560099
035700     05  FILLER             PIC X(7) VALUE ' CLOSE='.             03570099
035800     05  DISP-TRAN-STORE    PIC 9(4).                             03580099
035900     05  FILLER             PIC X VALUE ':'.                      03590099
036000     05  DIS-RT-1           PIC 9(3).                             03600099
036100     05  FILLER             PIC X VALUE '.'.                      03610099
036200     05  DIS-RT-2           PIC 9(3).                             03620099
036300     05  FILLER             PIC X VALUE '.'.                      03630099
036400     05  DIS-RT-3           PIC 9(3).                             03640099
036500     05  FILLER             PIC X VALUE '.'.                      03650099
036600     05  DIS-RT-4           PIC 9(3).                             03660099
036700     05  FILLER             PIC X(6) VALUE ',RCV#='.              03670099
036800     05  DISP-TRAN-NUMB     PIC 9(5).                             03680099
036900     05  FILLER             PIC X(6) VALUE ',SND#='.              03690099
037000     05  DISP-TRAN-NUMBS    PIC 9(5).                             03700099
037100                                                                  03710099
037200 01  DISP-DEAD-MATCH.                                             03720099
037300     05  FILLER             PIC X(17) VALUE ' MATCHING NUMBER'.   03730099
037400     05  DISP-DEAD-MATCH-NUMB      PIC X(8).                      03740099
037500     05  FILLER             PIC X(18) VALUE ' WITH DEAD SOCKET'.  03750099
037600     05  DISP-DEAD-MATCH-SOCK      PIC 9(4).                      03760099
037700                                                                  03770099
037800 01  INITAPI-COMPLETE.                                            03780099
037900     05  FILLER                 PIC X(32)                         03790099
038000         VALUE '!INITAPI COMPLETED - MAXSOCK# ='.                 03800099
038100     05  INIT-MAXSOCK           PIC 9(8).                         03810099
038200                                                                  03820099
038300 01  INITAPI-ERR.                                                 03830099
038400     05  FILLER                 PIC X(32)                         03840099
038500         VALUE '!INITIAL IUCV API FAIL- ERRNO ='.                 03850099
038600     05  INIT-ERRNO             PIC 9(8).                         03860099
038700                                                                  03870099
038800 01  SOCKAPI-ERR.                                                 03880099
038900     05  FILLER                 PIC X(32)                         03890099
039000         VALUE '!SOCKET IUCV API FAIL-  ERRNO ='.                 03900099
039100     05  SOCK-ERRNO             PIC 9(8).                         03910099
039200                                                                  03920099
039300 01  SETSAPI-ERR.                                                 03930099
039400     05  FILLER                 PIC X(32)                         03940099
039500         VALUE '!SET SOCK IUCV API FAIL-ERRNO ='.                 03950099
039600     05  SETS-ERRNO             PIC 9(8).                         03960099
039700                                                                  03970099
039800 01  BINDAPI-ERR.                                                 03980099
039900     05  FILLER                 PIC X(32)                         03990099
040000         VALUE '!BIND IUCV API FAIL-    ERRNO ='.                 04000099
040100     05  BIND-ERRNO             PIC 9(8).                         04010099
040200                                                                  04020099
040300 01  LISTAPI-ERR.                                                 04030099
040400     05  FILLER                 PIC X(32)                         04040099
040500         VALUE '!LISTEN IUCV API FAIL-  ERRNO ='.                 04050099
040600     05  LIST-ERRNO             PIC 9(8).                         04060099
040700                                                                  04070099
040800 01  OPENCNT-MSG.                                                 04080099
040900     05  FILLER                 PIC X(23)                         04090099
041000         VALUE '!HIGH USED SOCKET IX = '.                         04100099
041100     05  OPEN-COUNTER           PIC 9(8).                         04110099
041200                                                                  04120099
041300 01  DISP-ERR.                                                    04130099
041400     05  FILLER                 PIC X(11)                         04140099
041500         VALUE ' SELRETC = '.                                     04150099
041600     05  DISP-EZRETC            PIC 9(8).                         04160099
041700     05  FILLER                 PIC X(05)  VALUE SPACES.          04170099
041800     05  FILLER                 PIC X(10)                         04180099
041900         VALUE 'EZERRNO = '.                                      04190099
042000     05  DISP-ERRNO             PIC 9(8).                         04200099
042100 01  DISP-EXCEP-MSG.                                              04210099
042200     05  FILLER                 PIC X(20)                         04220099
042300         VALUE ' EXCEPTION - SOCKET'.                             04230099
042400     05  DISP-EXCEP-SOCK        PIC 9(4).                         04240099
042500     05  FILLER                 PIC X(08)                         04250099
042600         VALUE ' RETC = '.                                        04260099
042700     05  DISP-EXCEP-SELRETC     PIC 9(4).                         04270099
042800     05  FILLER                 PIC X(09)                         04280099
042900         VALUE ' ERRNO = '.                                       04290099
043000     05  DISP-EXCEP-ERRNO       PIC 9(4).                         04300099
043100                                                                  04310099
043200 01  SELEAPI-ERR.                                                 04320099
043300     05  FILLER                 PIC X(32)                         04330099
043400         VALUE '!SELECT IUCV API FAIL-  ERRNO ='.                 04340099
043500     05  SELE-ERRNO             PIC 9(8).                         04350099
043600                                                                  04360099
043700 01  ACCEAPI-ERR.                                                 04370099
043800     05  FILLER                 PIC X(32)                         04380099
043900         VALUE '!ACCEPT IUCV API FAIL-  ERRNO ='.                 04390099
044000     05  ACCE-ERRNO             PIC 9(8).                         04400099
044100                                                                  04410099
044200 01  ASSG-ERR-MSG.                                                04420099
044300     05  FILLER                 PIC X(32)                         04430099
044400         VALUE 'ASSIGNING SOCKET - IX =      '.                   04440099
044500     05  ASSG-COUNT             PIC 9(8).                         04450099
044600                                                                  04460099
044700 01  CLOS-ERR-MSG.                                                04470099
044800     05  FILLER                 PIC X(17)                         04480099
044900         VALUE 'CLOSING SOCKET='.                                 04490099
045000     05  CLOS-SOCKT             PIC 9(4).                         04500099
045100     05  FILLER                 PIC X(10)                         04510099
045200         VALUE 'ERRNO='.                                          04520099
045300     05  CLOS-SOCKT-ERR         PIC 9(6).                         04530099
045400                                                                  04540099
045500 01  FCNTAPI-ERR.                                                 04550099
045600     05  FILLER                 PIC X(32)                         04560099
045700         VALUE '!FCONTROL IUCV API FAIL-ERRNO ='.                 04570099
045800     05  FCNT-ERRNO             PIC 9(8).                         04580099
045900                                                                  04590099
046000 01  SEARCH-MSG-ERR.                                              04600099
046100     05  FILLER                 PIC X(24)                         04610099
046200         VALUE ' CLOSING DEAD SOCKET =..'.                        04620099
046300     05  SEARCH-MSG-COUNT       PIC 9(4).                         04630099
046400                                                                  04640099
046500 01  SEARCH-MSG-ERR2.                                             04650099
046600     05  FILLER                 PIC X(24)                         04660099
046700         VALUE ' CLOSING DUP  SOCKET =..'.                        04670099
046800     05  SEARCH-MSG-COUNT2      PIC 9(4).                         04680099
046900                                                                  04690099
047000 01  OPEN-SOCK-MSG.                                               04700099
047100     05  FILLER                 PIC X(24)                         04710099
047200         VALUE ' OPEN NEW SOCKET     =..'.                        04720099
047300     05  OPEN-SOCK-COUNT        PIC 9(4).                         04730099
047400                                                                  04740099
047500 01  INVALID-LEN-ER-MSG.                                          04750099
047600     05  FILLER                 PIC X(32)                         04760099
047700         VALUE '!INVALID LENGTH ON BUFFER ='.                     04770099
047800     05  INVALID-LEN-ER         PIC 9(4).                         04780099
047900     05  FILLER                 PIC X(3) VALUE ' : '.             04790099
048000     05  INVALID-LEN-IX         PIC 9(4).                         04800099
048100                                                                  04810099
048200 01  INVALID-MSG-TYP-MSG.                                         04820099
048300     05  FILLER                 PIC X(27)                         04830099
048400         VALUE '!INVALID MESSAGE TYPE,BUF ='.                     04840099
048500     05  INVALID-MSG-TYP-IX     PIC 9(4).                         04850099
048600     05  FILLER                 PIC X(3) VALUE ' : '.             04860099
048700     05  INVALID-MSG-TYP        PIC X(16).                        04870099
048800                                                                  04880099
048900 01  READ-SOCK1-MSG.                                              04890099
049000     05  FILLER                 PIC X(25)                         04900099
049100         VALUE 'READ SOCKET-SELECT SOCK='.                        04910099
049200     05  READ-SOCK1-COUNT       PIC 9(5).                         04920099
049300                                                                  04930099
049400 01  PART-CNT-MSG.                                                04940099
049500     05  FILLER                 PIC X(25)                         04950099
049600         VALUE ' PREVIOUSLY SAVED CNT='.                          04960099
049700     05  PART-CNT-1             PIC 9(5).                         04970099
049800     05  FILLER                 PIC X(12)                         04980099
049900         VALUE 'NEWRECEIVED='.                                    04990099
050000     05  PART-CNT-2             PIC 9(5).                         05000099
050100                                                                  05010099
050200 01  DISP-BIT-MASK-MSG.                                           05020099
050300     05  FILLER                 PIC X(01)                         05030099
050400         VALUE '!'.                                               05040099
050500     05  DISP-BIT-MASK          PIC X(49).                        05050099
050600                                                                  05060099
050700 01  DEAD-S.                                                      05070099
050800     05 FILLER                  PIC X(13) VALUE ' DEAD SOCKETS'.  05080099
050900     05 DEAD-S-2                PIC 9(18).                        05090099
051000     05 FILLER                  PIC X(1) VALUE ','.               05100099
051100     05 DEAD-S-4                PIC 9(18).                        05110099
051200                                                                  05120099
051300 01  MATCHING-LOG-AREA.                                           05130099
051400     05  FILLER                 PIC X(12) VALUE ' SOCKET # ='.    05140099
051500     05  MATCHING-LOG-A-STORE     PIC 9(4).                       05150099
051600     05  FILLER                 PIC X(13) VALUE ' MATCHING #='.   05160099
051700     05  MATCHING-LOG-A-NUMB      PIC 9(8).                       05170099
051800                                                                  05180099
051900 01  TEMP-DISPLAY.                                                05190099
052000     05 TEMP-DISPLAY-MSG        PIC X(4108) VALUE SPACES.         05200099
052100                                                                  05210099
052200 01  TCPCICS-MSG-AREA.                                            05220099
052300    02 TCPCICS-MSG-1.                                             05230099
052400       05 FILLER                PIC X(1) VALUE SPACES.            05240099
052500       05 MSGDATE               PIC 9(8).                         05250099
052600       05 FILLER                PIC X(1) VALUE SPACES.            05260099
052700       05 MSGTIME               PIC 9(8).                         05270099
052800       05 FILLER                PIC X(3) VALUE ' > '.             05280099
052900       05 MODULE                PIC X(4).                         05290099
053000       05 FILLER                PIC X(1) VALUE SPACES.            05300099
053100       05 MSG-PORT              PIC X(4).                         05310099
053200       05 FILLER                PIC X(1) VALUE SPACES.            05320099
053300                                                                  05330099
053400    02 TCPCICS-MSG-2.                                             05340099
053500       05 MSG-AREA             PIC X(50).                         05350099
053600    02 MSG-OUT REDEFINES TCPCICS-MSG-2.                           05360099
053700       05  CALL-NO      PIC X(10).                                05370099
053800       05  FIELDXX      PIC X(7).                                 05380099
053900       05  ERR-CODE     PIC X(8).                                 05390099
054000       05  SHOW-FIELDS REDEFINES ERR-CODE.                        05400099
054100           10 FILLER    PIC X(2).                                 05410099
054200           10 SHOW-PORTX  PIC 9(6).                               05420099
054300       05  FILLER       PIC X(1).                                 05430099
054400       05  FIELDYY      PIC X(7).                                 05440099
054500       05  DIS-RET-CODE PIC X(10).                                05450099
054600       05  FILLER       PIC X(7).                                 05460099
054700                                                                  05470099
054800**********************************************************        05480099
054900* END OF FORMATTED TRACE MESSAGES TO BE DISPLAYED IN EPCL*        05490099
055000**********************************************************        05500099
055100                                                                  05510099
055200                                                                  05520099
055300 LINKAGE SECTION.                                                 05530099
055400                                                                  05540099
055500****************************************************************  05550099
055600*  THIS IS THE SOCKET TABLE THAT HOLDS ALL OPEN SOCKET INFO    *  05560099
055700*  AND MESSAGE DATA AS IT IS READ.                             *  05570099
055800*  TO INCREASE THE NUMBER OF SOCKETS,  THE TCPSOCKETN-TABLE-   *  05580099
055900*  ELEMENT MUST BE UPDATED FOR THE OCCURS STATEMENT.           *  05590099
056000* Explanation of variables:                                    *  05600099
056100* SOCKADDR-IN = IP address and port of the AJB Server on this  *  05610099
056200*               Socket                                         *  05620099
056300* ST-AVAIL = "Y" = Socket is not connected                     *  05630099
056400*            "N" = Socket connection is established and being  *  05640099
056500*                  used.                                       *  05650099
056600* ST-TSTAMP = Timestamp updated at connection and each msg read*  05660099
056700* ST-MATCHING = A number used to match the response to a socket*  05670099
056800* ST-OPENS,RECV,SEND,CLOSE = Counters that can be used to track*  05680099
056900*                            socket stats                      *  05690099
057000* DATA-CNT = 1 + Length of message to be sent to child program.*  05700099
057100* DATA-TRANID = CICS TranID (child) to send message to.        *  05710099
057200* DATA-LEN-HEX = Length of message in HEX as sent by AJB Server*  05720099
057300*                The length does NOT include this 2 byte header*  05730099
057400* DATA-REQ = Data in EBCDIC format to be sent to child program.*  05740099
057500****************************************************************  05750099
057600                                                                  05760099
057700 01  TCPSOCKETN-TABLE.                                            05770099
057800     05 TCPSOCKETN-TABLE-ELEMENT OCCURS 100 TIMES.                05780099
057900       10 TBL-SOCKADDR-IN.                                        05790099
058000          15 TBL-SIN-FAMILY   PIC 9(4) BINARY.                    05800099
058100          15 TBL-SIN-PORT     PIC 9(4) BINARY.                    05810099
058200          15 TBL-SIN-ADDR     PIC 9(8) BINARY.                    05820099
058300          15 TBL-SIN-ZERO     PIC X(8).                           05830099
058400       10 TBL-ST-AVAIL        PIC X.                              05840099
058500       10 TBL-TSTAMP          PIC 9(16) BINARY.                   05850099
058600       10 TBL-ST-MATCHING     PIC 9(8).                           05860099
058700       10 TBL-ST-OPENS        PIC 9(8) BINARY.                    05870099
058800       10 TBL-ST-RECV         PIC 9(8) BINARY.                    05880099
058900       10 TBL-ST-SEND         PIC 9(8) BINARY.                    05890099
059000       10 TBL-ST-CLOSE        PIC 9(8) BINARY.                    05900099
059100** TBL-DATA-CNT = LENGTH OF MESSAGE + 1                           05910099
059200       10 TBL-DATA-CNT        PIC 9(8) BINARY.                    05920099
059300       10 TBL-DATA-TRANID     PIC X(4).                           05930099
059400       10 TBL-DATA.                                               05940099
059500          15 TBL-DATA-LEN-HEX PIC X(2).                           05950099
059600          15 TBL-DATA-REQ     PIC X(4106).                        05960099
059700                                                                  05970099
059800 EJECT                                                            05980099
059900                                                                  05990099
060000                                                                  06000099
060100******************************************************************06010099
060200 PROCEDURE DIVISION.                                              06020099
060300******************************************************************06030099
060400 0000-MAINLINE.                                                   06040099
060500                                                                  06050099
060600     PERFORM 1000-INITIALIZE.                                     06060099
060700                                                                  06070099
060800     PERFORM 2000-CONNECT.                                        06080099
060900                                                                  06090099
061000     MOVE 'PERFORM PROCESS-MODULE' TO MSG-AREA.                   06100099
061100     PERFORM 9000-WRITE-CICS.                                     06110099
061200                                                                  06120099
061300     PERFORM 3000-PROCESS-MODULE                                  06130099
061400        UNTIL EZRETC < 0.                                         06140099
061500                                                                  06150099
061600     MOVE '!TERMINATION TRANSACTION' TO MSG-AREA.                 06160099
061700     PERFORM 9000-WRITE-CICS.                                     06170099
061800     PERFORM 9990-PGM-EXIT.                                       06180099
061900                                                                  06190099
062000                                                                  06200099
062100****************************************************************  06210099
062200* INITIALIZE                                                   *  06220099
062300* INITIALIZE ALL PARAMETERS AT TASK STARTUP                    *  06230099
062400* THE FOLLOWING LOGIC IS EXECUTED AT TASK STARTUP TO SET       *  06240099
062500* HANDLES FOR EXCEPTIONAL CONDITIONS AND INITIALIZE INTERNAL   *  06250099
062600* TABLES/WORK AREAS.                                           *  06260099
062700****************************************************************  06270099
062800 1000-INITIALIZE.                                                 06280099
062900     EXEC CICS HANDLE CONDITION                                   06290099
063000                      INVREQ  (9010-INVREQ-ERR-SEC)               06300099
063100                      IOERR   (9020-IOERR-SEC)                    06310099
063200                      QZERO   (9030-QZERO-SEC)                    06320099
063300                      LENGERR (9040-LENGERR-SEC)                  06330099
063400                      NOSPACE (9050-NOSPACE-ERR-SEC)              06340099
063500                      NOSTG   (9050-NOSPACE-ERR-SEC)              06350099
063600                      QIDERR  (9060-QIDERR-SEC)                   06360099
063700                      ITEMERR (9070-ITEMERR-SEC)                  06370099
063800                      ENDDATA (9080-ENDDATA-SEC)                  06380099
063900                      INVEXITREQ (9090-TCP-TRUE-REQ)              06390099
064000          END-EXEC.                                               06400099
064100     PERFORM 1100-GET-PORT.                                       06410099
064200     PERFORM 1200-GET-MAIN.                                       06420099
064300     PERFORM 1300-CREATE-TSQS.                                    06430099
064400     PERFORM 1400-INIT-SOCKET-TBL.                                06440099
064500                                                                  06450099
064600****************************************************************  06460099
064700* GET-PORT                                                     *  06470099
064800* RECEIVE THE PORT NUMBER FROM PARMS PASSED TO PROGRAM         *  06480099
064900****************************************************************  06490099
065000 1100-GET-PORT.                                                   06500099
065100     MOVE '!START OF AJB TO MAINFRAME TCPIP LISTENER'             06510099
065110          TO MSG-AREA.                                            06511099
065200     PERFORM 9000-WRITE-CICS.                                     06520099
065300                                                                  06530099
065400     MOVE SPACES TO WS-RECEIVE.                                   06540099
065500     MOVE +4 TO SAV-MSG-LEN.                                      06550099
065600     EXEC CICS RETRIEVE INTO(WS-RECEIVE) LENGTH(SAV-MSG-LEN)      06560099
065700               RESP(PV-RC) NOHANDLE END-EXEC.                     06570099
065800     IF PV-RC NOT = 0 THEN                                        06580099
065900        MOVE '!INVALID PARMS RECEIVED, STOPPING PROGRAM' TO       06590099
066000             MSG-AREA                                             06600099
066100        PERFORM 9000-WRITE-CICS                                   06610099
066200        PERFORM 9990-PGM-EXIT                                     06620099
066300     ELSE                                                         06630099
066400        MOVE '!PARMS=' TO MSG-AREA                                06640099
066500        MOVE WS-RECEIVE TO MSG-AREA(8:30)                         06650099
066600        PERFORM 9000-WRITE-CICS                                   06660099
066700        MOVE WS-RECEIVE(1:4) TO PORTADDR                          06670099
066800        MOVE WS-RECEIVE(1:4) TO PV-HOLD-PORT                      06680099
066900        IF PORTADDR NOT = 0 THEN                                  06690099
067000           MOVE '!PORT#=' TO MSG-AREA                             06700099
067100           MOVE PORTADDR TO MSG-AREA(8:4)                         06710099
067200           PERFORM 9000-WRITE-CICS                                06720099
067300        ELSE                                                      06730099
067400           MOVE '!INVALID PORT NUMBER, EXITING PGM' TO            06740099
067500               MSG-AREA                                           06750099
067600           PERFORM 9000-WRITE-CICS                                06760099
067700           PERFORM 9990-PGM-EXIT                                  06770099
067800        END-IF                                                    06780099
067900     END-IF.                                                      06790099
068000                                                                  06800099
068100*                                                                 06810099
068200*  SET THE CICS TEMP STORAGE QUEUES BASED ON PORT NUMBER          06820099
068300*                                                                 06830099
068400                                                                  06840099
068500     EXEC CICS                                                    06850099
068600         ASSIGN APPLID (PV-SYSTEM-ID)                             06860099
068700     END-EXEC.                                                    06870099
068800                                                                  06880099
068900     IF PV-HOLD-PORT = 4993 AND PV-CICS-REGION = 'CICST1' THEN    06890099
069000        MOVE '1' TO TCPIP-CICS-QUEUE                              06900099
069100     END-IF.                                                      06910099
069200                                                                  06920099
069300     IF PV-HOLD-PORT = 4997 AND PV-CICS-REGION = 'CICSQA' THEN    06930099
069400        MOVE '1' TO TCPIP-CICS-QUEUE                              06940099
069500     END-IF.                                                      06950099
069600                                                                  06960099
069700     IF PV-HOLD-PORT = 4996 AND PV-CICS-REGION = 'CICSLA' THEN    06970099
069800        MOVE '1' TO TCPIP-CICS-QUEUE                              06980099
069900     END-IF.                                                      06990099
070000                                                                  07000099
070100     IF PV-HOLD-PORT = 4998 AND PV-CICS-REGION = 'CICSPS' THEN    07010099
070200        MOVE '1' TO TCPIP-CICS-QUEUE                              07020099
070300     END-IF.                                                      07030099
070400                                                                  07040099
070500     IF TCPIP-CICS-QUEUE = SPACE                                  07050099
070600        MOVE '!INVALID PORT AND CICS, STOPPING PROGRAM' TO        07060099
070700             MSG-AREA                                             07070099
070800        PERFORM 9000-WRITE-CICS                                   07080099
070900        PERFORM 9990-PGM-EXIT                                     07090099
071000     END-IF.                                                      07100099
071100                                                                  07110099
071200     MOVE TCPIP-CICS-QUEUE TO TCPIPPRQ-ONE.                       07120099
071300     MOVE TCPIP-CICS-QUEUE TO TCPIPSWQ-ONE.                       07130099
071400                                                                  07140099
071500***************************************************************** 07150099
071600*  GET-MAIN                                                     * 07160099
071700*  GET MAIN STORAGE                                             * 07170099
071800***************************************************************** 07180099
071900 1200-GET-MAIN.                                                   07190099
072000*    EXEC CICS IGNORE CONDITION TERMERR EOC SIGNAL END-EXEC.      07200099
072100     MOVE 256 TO CLENG.                                           07210099
072200*    EXEC CICS ASKTIME ABSTIME(STARTT) NOHANDLE END-EXEC.         07220099
072300                                                                  07230099
072400     MOVE '!GETMAIN STARTED.' TO MSG-AREA.                        07240099
072500     PERFORM 9000-WRITE-CICS.                                     07250099
072600                                                                  07260099
072700     EXEC CICS GETMAIN SET(ADDRESS OF TCPSOCKETN-TABLE)           07270099
072800        FLENGTH(LENGTH OF TCPSOCKETN-TABLE) INITIMG(INIT-LOW)     07280099
072900        RESP(PV-RC) END-EXEC.                                     07290099
073000                                                                  07300099
073100     MOVE '!GETMAIN DONE ' TO MSG-AREA.                           07310099
073200     PERFORM 9000-WRITE-CICS.                                     07320099
073300     IF PV-RC NOT = 0 THEN                                        07330099
073400        MOVE '!' TO MSG-AREA                                      07340099
073500        MOVE 'RC=' TO FIELDXX                                     07350099
073600        MOVE PV-RC TO ERR-CODE                                    07360099
073700        PERFORM 9000-WRITE-CICS                                   07370099
073800     END-IF.                                                      07380099
073900                                                                  07390099
074000***************************************************************** 07400099
074100* CREATE-TSQS                                                     07410099
074200* DELETE THE TEMP STORAGE QUEUES IF THEY ARE PRESENT, AND         07420099
074300* CREATE NEW TEMP STORAGE QUEUES.                                 07430099
074400* THE FORMAT OF THE QUEUE IS:                                     07440099
074500*  LINE1 = # OF LAST RECORD WRITTEN TO THE Q BY THE CHILD PROGRAM 07450099
074600*          FOLLOWED BY THE TOTAL POSSIBLE ENTRIES IN THE Q (1000) 07460099
074700*  LINE2 = # OF LAST RECORD READ BY THE LISTENER, FOLLOWED BY     07470099
074800*          THE TOTAL POSSIBLE ENTRIES IN THE Q (1000)             07480099
074900*  LINE3 - LINE 1002 = BLANK LINES TO BE FILLED IN BY CHILD       07490099
075000*                     RESPONSES                                   07500099
075100***************************************************************** 07510099
075200 1300-CREATE-TSQS.                                                07520099
075300                                                                  07530099
075400* 'PUSH' DISABLES ALL PREVIOUS CONDITION HANDLERS                 07540099
075500     EXEC CICS PUSH HANDLE  END-EXEC.                             07550099
075600                                                                  07560099
075700* DELETE TCPIPPRQ                                                 07570099
075800     MOVE 'CHECKING TCPIPPRQ TSQ' TO MSG-AREA.                    07580099
075900     MOVE TCPIPPRQ TO MSG-AREA(10:8).                             07590099
076000     PERFORM 9000-WRITE-CICS.                                     07600099
076100                                                                  07610099
076200     EXEC CICS IGNORE CONDITION QIDERR                            07620099
076300     END-EXEC.                                                    07630099
076400                                                                  07640099
076500     EXEC CICS DELETEQ TS QUEUE(TCPIPPRQ) END-EXEC.               07650099
076600                                                                  07660099
076700* DELETE TCPIPSWQ                                                 07670099
076800     MOVE 'CHECKING TCPIPSWQ TSQ' TO MSG-AREA.                    07680099
076900     MOVE TCPIPSWQ TO MSG-AREA(10:8).                             07690099
077000     PERFORM 9000-WRITE-CICS.                                     07700099
077100                                                                  07710099
077200     EXEC CICS IGNORE CONDITION QIDERR                            07720099
077300     END-EXEC.                                                    07730099
077400                                                                  07740099
077500     EXEC CICS DELETEQ TS QUEUE(TCPIPSWQ) END-EXEC.               07750099
077600                                                                  07760099
077700* 'POP' RE-ENABLES CONDITION HANDLERS                             07770099
077800     EXEC CICS POP HANDLE END-EXEC.                               07780099
077900                                                                  07790099
078000* CREATE THE PR DATA QUEUE                                        07800099
078100* WRITE OUT THE FIRST 2 LINES OF THE QUEUE, THEN 1000 BLANK LINES 07810099
078200                                                                  07820099
078300     MOVE 'CREATING TCPIPPRQ TSQ' TO MSG-AREA.                    07830099
078400     MOVE TCPIPPRQ TO MSG-AREA(10:8).                             07840099
078500     PERFORM 9000-WRITE-CICS.                                     07850099
078600                                                                  07860099
078700     MOVE LENGTH OF TCP-BUF-OUT TO SAV-MSG-LEN.                   07870099
078800     MOVE SPACES TO TSQ-INDEX.                                    07880099
078900     MOVE 3 TO TSQ-COUNT-1.                                       07890099
079000     MOVE 1000 TO TSQ-COUNT-2.                                    07900099
079100     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          07910099
079200          LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC.            07920099
079300     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          07930099
079400          LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC.            07940099
079500     MOVE SPACES TO TSQ-INDEX.                                    07950099
079600                                                                  07960099
079700     PERFORM 1000 TIMES                                           07970099
079800        EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)       07980099
079900             LENGTH(SAV-MSG-LEN) MAIN NOSUSPEND END-EXEC          07990099
080000     END-PERFORM.                                                 08000099
080100                                                                  08010099
080200* CREATE THE TS SWITCH OPTION QUEUE                               08020099
080300                                                                  08030099
080400     MOVE 'CREATING TCPIPSWQ TSQ' TO MSG-AREA.                    08040099
080500     MOVE TCPIPSWQ TO MSG-AREA(10:8).                             08050099
080600     PERFORM 9000-WRITE-CICS.                                     08060099
080700                                                                  08070099
080800     MOVE SPACES TO TCP-BUF.                                      08080099
080900     PERFORM 100 TIMES                                            08090099
081000        EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ) FROM(TCP-BUF)         08100099
081100             LENGTH(80) MAIN NOSUSPEND END-EXEC                   08110099
081200     END-PERFORM.                                                 08120099
081300                                                                  08130099
081400***************************************************************** 08140099
081500*  INIT-SOCKET-TBL                                              * 08150099
081600*  INITIALIZE THE SOCKETS STRING                                * 08160099
081700*  HERE WE ARE INITIALIZING THE SOCKETS TABLE, A BYTE STRING    * 08170099
081800*  USED TO IDENTIFY WHICH SOCKETS ARE ACTIVE FROM THE INACTIVE, * 08180099
081900*  AND A TABLE CONTAINING 50 ELEMENTS USED TO STORE RECYCLED    * 08190099
082000*  (CLOSED AND AVAILABLE FOR RE-USE) SOCKET DESCRIPTORS.        * 08200099
082100***************************************************************** 08210099
082200 1400-INIT-SOCKET-TBL.                                            08220099
082300                                                                  08230099
082400     MOVE 'INITIALIZING SOCKET TABLES' TO MSG-AREA.               08240099
082500     PERFORM 9000-WRITE-CICS.                                     08250099
082600                                                                  08260099
082700* SET INITIAL VALUES FOR ALL TCPSOCKETN-TABLE ENTRIES             08270099
082800     PERFORM 1500-INIT-TABLE                                      08280099
082900         VARYING SOCKNO FROM 1 BY 1 UNTIL SOCKNO > SOCKETS.       08290099
083000                                                                  08300099
083100***************************************************************** 08310099
083200* INIT-TABLE                                                    * 08320099
083300*     INIT-TABLES FOR PROGRAM                                   * 08330099
083400***************************************************************** 08340099
083500 1500-INIT-TABLE.                                                 08350099
083600     MOVE 'Y' TO TBL-ST-AVAIL(SOCKNO).                            08360099
083700     MOVE 0 TO TBL-ST-MATCHING(SOCKNO).                           08370099
083800     MOVE 0 TO TBL-ST-OPENS(SOCKNO).                              08380099
083900     MOVE 0 TO TBL-ST-CLOSE(SOCKNO).                              08390099
084000     MOVE 0 TO TBL-TSTAMP(SOCKNO).                                08400099
084100     MOVE 0 TO TBL-ST-RECV(SOCKNO).                               08410099
084200     MOVE 0 TO TBL-ST-SEND(SOCKNO).                               08420099
084300     MOVE SPACES TO TBL-DATA(SOCKNO).                             08430099
084400     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              08440099
084500                                                                  08450099
084600****************************************************************  08460099
084700* CONNECT                                                      *  08470099
084800* CONNECT TO TCP/IP                                            *  08480099
084900*  BEFORE SERVER STARTS,  TRUE MUST BE ACTIVE.  ISSUE 'EXTRACT *  08490099
085000*  EXIT' COMMAND TO CHECK IF TRUE IS ACTIVE OR NOT             *  08500099
085100*  'TRUE' = TASK RELATED USER EXIT                                08510099
085200****************************************************************  08520099
085300 2000-CONNECT.                                                    08530099
085400                                                                  08540099
085500**** OBTAIN ADDRESS OF THE GLOBAL WORK AREA (GWA)                 08550099
085600****      IF NOT FOUND, WAIT 30 SECONDS AND TRY AGAIN             08560099
085700****      FOR UP TO 10 TIMES.                                     08570099
085800****                                                              08580099
085900     MOVE 1 TO PV-RC.                                             08590099
086000     PERFORM VARYING WSCT FROM 1 BY 1 UNTIL                       08600099
086100                                       PV-RC = 0 OR WSCT > 10     08610099
086200       EXEC CICS EXTRACT EXIT PROGRAM('EZACIC01') GASET(GWPTR)    08620099
086300            GALENGTH(CLENG) RESP(PV-RC) END-EXEC                  08630099
086400       IF PV-RC NOT = 0 THEN                                      08640099
086500          IF WSCT > 9 THEN                                        08650099
086600             MOVE '!COULD NOT FIND TRUE IN 5 MIN.' TO MSG-AREA    08660099
086700             PERFORM 9000-WRITE-CICS                              08670099
086800             PERFORM 9990-PGM-EXIT                                08680099
086900          END-IF                                                  08690099
087000          MOVE '!EZACIC01 NOT FOUND, WAITING 30 SEC' TO MSG-AREA  08700099
087100          PERFORM 9000-WRITE-CICS                                 08710099
087200          EXEC CICS DELAY INTERVAL(30) END-EXEC                   08720099
087300       END-IF                                                     08730099
087400     END-PERFORM.                                                 08740099
087500                                                                  08750099
087600*        INDICATE SELECT IS USING SOCKET 1.                       08760099
087700                                                                  08770099
087800     PERFORM 2100-INIT-API.                                       08780099
087900     PERFORM 2110-SOCKET-RTN.                                     08790099
088000     PERFORM 2120-SET-SOCK-OPT.                                   08800099
088100     PERFORM 2130-BIND-RTN.                                       08810099
088200     PERFORM 2140-LISTEN-RTN.                                     08820099
088300                                                                  08830099
088400*         INITIALIZE CHARACTER MASK FOR SELECT                    08840099
088500     PERFORM VARYING WSCT FROM 1 BY 1 UNTIL WSCT > SOCKETS        08850099
088600        MOVE '0' TO CHAR-ENTRY(WSCT)                              08860099
088700     END-PERFORM.                                                 08870099
088800     MOVE '1' TO CHAR-ENTRY(1).                                   08880099
088900     PERFORM 7000-CHAR-TO-BIT.                                    08890099
089000     MOVE BIT-MASK TO SELECT-RD-MASK.                             08900099
089100*    MOVE BIT-MASK TO SELECT-WR-MASK.                             08910099
089200*    MOVE BIT-MASK TO SELECT-EX-MASK.                             08920099
089300                                                                  08930099
089400***************************************************************** 08940099
089500*                                                               * 08950099
089600*     INIT-API - CONNECTS THE APPLICATION TO TCP/IP             * 08960099
089700*                                                               * 08970099
089800***************************************************************** 08980099
089900*                                                                 08990099
090000 2100-INIT-API.                                                   09000099
090100     MOVE EIBTASKN TO SUBTASKNO                                   09010099
090200     MOVE 'CICS TASK NUMBER' TO MSG-AREA.                         09020099
090300     MOVE INTASUBT TO MSG-AREA(18:7).                             09030099
090400     PERFORM 9000-WRITE-CICS.                                     09040099
090500     MOVE 'PERFORMING INIT-API ' TO MSG-AREA.                     09050099
090600     PERFORM 9000-WRITE-CICS.                                     09060099
090700     MOVE SOCKETS TO INTAMAXS.                                    09070099
090800     MOVE 0 TO EZERRNO.                                           09080099
090900     MOVE 0 TO EZRETC.                                            09090099
091000     CALL 'EZASOKET' USING INITAPI-CMD INTAMAXS INTAIDNT          09100099
091100         INTASUBT MAX-SOCK-NUM EZERRNO EZRETC.                    09110099
091200                                                                  09120099
091300     MOVE MAX-SOCK-NUM TO MAX-SOCKETS-LESS1.                      09130099
091400     MOVE MAX-SOCK-NUM TO INIT-MAXSOCK.                           09140099
091500     MOVE INITAPI-COMPLETE TO MSG-AREA.                           09150099
091600     PERFORM 9000-WRITE-CICS.                                     09160099
091700     IF EZRETC < 0 THEN                                           09170099
091800        MOVE EZERRNO TO INIT-ERRNO                                09180099
091900        MOVE INITAPI-ERR TO MSG-AREA                              09190099
092000        PERFORM 9000-WRITE-CICS                                   09200099
092100        PERFORM 9990-PGM-EXIT                                     09210099
092200     END-IF.                                                      09220099
092300                                                                  09230099
092400***************************************************************** 09240099
092500*                                                               * 09250099
092600*     SOCKET ROUTINE - OBTAINS A SOCKET                         * 09260099
092700*                                                               * 09270099
092800***************************************************************** 09280099
092900*                                                                 09290099
093000 2110-SOCKET-RTN.                                                 09300099
093100     MOVE 'PERFORMING SOCKET   ' TO MSG-AREA.                     09310099
093200     PERFORM 9000-WRITE-CICS.                                     09320099
093300     MOVE 0 TO EZERRNO.                                           09330099
093400     MOVE 0 TO EZRETC.                                            09340099
093500     CALL 'EZASOKET' USING SOCKET-CMD                             09350099
093600         SOCKAFIN SOCKTYPE SOCKPCOL                               09360099
093700         EZERRNO EZRETC.                                          09370099
093800     IF EZRETC < 0 THEN                                           09380099
093900        MOVE EZERRNO TO SOCK-ERRNO                                09390099
094000        MOVE SOCKAPI-ERR TO MSG-AREA                              09400099
094100        PERFORM 9000-WRITE-CICS                                   09410099
094200        PERFORM 9990-PGM-EXIT                                     09420099
094300     END-IF.                                                      09430099
094400                                                                  09440099
094500***************************************************************** 09450099
094600*                                                               * 09460099
094700*     SET SOCKET OPTIONS - SOCKET 0 IS SET TO RE-USE            * 09470099
094800*                                                               * 09480099
094900***************************************************************** 09490099
095000*                                                                 09500099
095100 2120-SET-SOCK-OPT.                                               09510099
095200     MOVE 'PERFORMING SET-SOCK ' TO MSG-AREA.                     09520099
095300     PERFORM 9000-WRITE-CICS.                                     09530099
095400     MOVE SSOREUSE TO SSOOPTNM.                                   09540099
095500     MOVE 0 TO SOCKET-DESCRIPTOR.                                 09550099
095600     MOVE 0 TO EZERRNO.                                           09560099
095700     MOVE 0 TO EZRETC.                                            09570099
095800     CALL 'EZASOKET' USING SETSOCK-CMD                            09580099
095900         SOCKET-DESCRIPTOR SSOOPTNM SSOOPVAL SSOLEN               09590099
096000         EZERRNO EZRETC.                                          09600099
096100     IF EZRETC < 0 THEN                                           09610099
096200        MOVE EZERRNO TO SETS-ERRNO                                09620099
096300        MOVE SETSAPI-ERR TO MSG-AREA                              09630099
096400        PERFORM 9000-WRITE-CICS                                   09640099
096500        PERFORM 9990-PGM-EXIT                                     09650099
096600     END-IF.                                                      09660099
096700                                                                  09670099
096800***************************************************************** 09680099
096900*                                                               * 09690099
097000*     BIND ROUTINE - BINDS THE SOCKET TO THE LOCAL PORT         * 09700099
097100*                                                               * 09710099
097200***************************************************************** 09720099
097300 2130-BIND-RTN.                                                   09730099
097400     MOVE 'PERFORMING BIND     ' TO MSG-AREA.                     09740099
097500     PERFORM 9000-WRITE-CICS.                                     09750099
097600     MOVE 2 TO BINDAFIN.                                          09760099
097700     MOVE PORTADDR TO BINDPORT.                                   09770099
097800     MOVE 0 TO BINDIPAD.                                          09780099
097900     MOVE 0 TO BINDZERO.                                          09790099
098000     MOVE 0 TO SOCKET-DESCRIPTOR.                                 09800099
098100     MOVE 0 TO EZERRNO.                                           09810099
098200     MOVE 0 TO EZRETC.                                            09820099
098300     CALL 'EZASOKET' USING BIND-CMD                               09830099
098400         SOCKET-DESCRIPTOR BINDNAME EZERRNO EZRETC.               09840099
098500     IF EZRETC < 0 THEN                                           09850099
098600        MOVE EZERRNO TO BIND-ERRNO                                09860099
098700        MOVE BINDAPI-ERR TO MSG-AREA                              09870099
098800        PERFORM 9000-WRITE-CICS                                   09880099
098900        PERFORM 9990-PGM-EXIT                                     09890099
099000     END-IF.                                                      09900099
099100                                                                  09910099
099200***************************************************************** 09920099
099300*                                                               * 09930099
099400*     LISTEN ROUTINE - ACCEPT INCOMING CALLS FROM CLIENTS       * 09940099
099500*                                                               * 09950099
099600***************************************************************** 09960099
099700*                                                                 09970099
099800 2140-LISTEN-RTN.                                                 09980099
099900     MOVE 'PERFORMING LISTEN   ' TO MSG-AREA.                     09990099
100000     PERFORM 9000-WRITE-CICS.                                     10000099
100100     MOVE 0 TO SOCKET-DESCRIPTOR.                                 10010099
100200     MOVE 0 TO EZERRNO.                                           10020099
100300     MOVE 0 TO EZRETC.                                            10030099
100400     CALL 'EZASOKET' USING LISTEN-CMD                             10040099
100500         SOCKET-DESCRIPTOR LISTBCKL EZERRNO EZRETC.               10050099
100600     IF EZRETC < 0 THEN                                           10060099
100700        MOVE EZERRNO TO LIST-ERRNO                                10070099
100800        MOVE LISTAPI-ERR TO MSG-AREA                              10080099
100900        PERFORM 9000-WRITE-CICS                                   10090099
101000        PERFORM 9990-PGM-EXIT                                     10100099
101100     END-IF.                                                      10110099
101200                                                                  10120099
101300 EJECT                                                            10130099
101400                                                                  10140099
101500************************************************************      10150099
101600* PROCESS-MODULE                                           *      10160099
101700* THIS IS THE MAIN LOOP OF THE PROGRAM.  A SELECT CALL IS  *      10170099
101800* ISSUED TO TCPIP TO WAIT FOR WORK.                        *      10180099
101900************************************************************      10190099
102000 3000-PROCESS-MODULE.                                             10200099
102100                                                                  10210099
102200* FIND OUT WHICH SOCKETS HAVE DATA TO READ                        10220099
102300     PERFORM 3010-SELECT-SOCKETS.                                 10230099
102400                                                                  10240099
102500* CHECK RETURN CODE FROM SELECT AND PROCESS ACCORDINGLY           10250099
102600* IF SELRETC < 0, THAT IS AN ERROR, SO PROCESSING WILL STOP       10260099
102700* IF SELRETC = 0, INDICATES SOCKET HAS TIMED OUT                  10270099
102800* IF SELRETC > 0, CONTINUE PROCESSING                             10280099
102900* AFTER CHECKING ALL SOCKETS, PERFORM TIMEOUT ROUTINE             10290099
103000                                                                  10300099
103100     IF SELRETC > 0                                               10310099
103200*                                                                 10320099
103300* CONVERT BIT MASK TO CHAR MASK FOR READ BITS                     10330099
103400*                                                                 10340099
103500       MOVE SELECT-RR-MASK TO BIT-MASK                            10350099
103600       PERFORM 7010-BIT-TO-CHAR                                   10360099
103700       MOVE CHAR-MASK TO CHAR-MASK1                               10370099
103800*                                                                 10380099
103900*  TRACE DISPLAY ALL BIT THAT ARE ON IT BIT ARRAY                 10390099
104000*                                                                 10400099
104100       IF DISP-MSGS > 0                                           10410099
104200         MOVE 'BIT MASK1 FROM SELECT READ' TO MSG-AREA            10420099
104300         PERFORM 9000-WRITE-CICS                                  10430099
104400         MOVE CHAR-MASK1 TO MSG-AREA                              10440099
104500         PERFORM 9000-WRITE-CICS                                  10450099
104600       END-IF                                                     10460099
104700*                                                                 10470099
104800* TEST FOR READ ON SOCKET 0, IF SO OPEN NEW SOCKET                10480099
104900*                                                                 10490099
105000       IF CHAR-MASK1(1:1) = '1' THEN                              10500099
105100          PERFORM 3100-OPEN-NEW-SOCKET                            10510099
105200          IF EZRETC < 0 THEN                                      10520099
105300            MOVE '!ERROR ON OPEN-NEW-SOCKET   ' TO MSG-AREA       10530099
105400            PERFORM 9000-WRITE-CICS                               10540099
105500          END-IF                                                  10550099
105600       END-IF                                                     10560099
105700*                                                                 10570099
105800* IF OPEN NEW SOCKET FAILED, THEN QUIT READING BUT                10580099
105900* DON'T ABEND.                                                    10590099
106000*                                                                 10600099
106100       IF EZRETC < 0 THEN                                         10610099
106200          MOVE 0 TO EZRETC                                        10620099
106300       ELSE                                                       10630099
106400*                                                                 10640099
106500* TEST FOR READ ON OTHER SOCKETS, IF SO PROCESS SOCKET            10650099
106600*                                                                 10660099
106700         PERFORM VARYING TSOCKET FROM 2 BY 1                      10670099
106800                  UNTIL TSOCKET > SOCKETS                         10680099
106900          IF CHAR-MASK1(TSOCKET:1) = '1' THEN                     10690099
107000             COMPUTE SOCKNO = TSOCKET - 1                         10700099
107100             PERFORM 4000-RECEIVE-DATA                            10710099
107200          END-IF                                                  10720099
107300         END-PERFORM                                              10730099
107400       END-IF                                                     10740099
107500                                                                  10750099
107600     END-IF.                                                      10760099
107700                                                                  10770099
107800*                                                                 10780099
107900* PROCESS TIMEOUT AFTER ALL SOCKETS HAVE BEEN CHECKED FOR DATA    10790099
108000*                                                                 10800099
108100     IF SELRETC >= 0                                              10810099
108200       PERFORM 5000-PROCESS-TIMEOUT                               10820099
108300     END-IF.                                                      10830099
108400                                                                  10840099
108500************************************************************      10850099
108600* SELECT-SOCKETS                                           *      10860099
108700* ISSUE SELECT TO FIND OUT WHAT SOCKETS HAVE DATA TO READ  *      10870099
108800************************************************************      10880099
108900 3010-SELECT-SOCKETS.                                             10890099
109000* ZERO OUT ALL OUTPUT BIT MASKS FOR SELECT                        10900099
109100     PERFORM VARYING SOCKNO FROM 1 BY 1 UNTIL SOCKNO > SOCKETS    10910099
109200        MOVE '0' TO CHAR-ENTRY(SOCKNO)                            10920099
109300     END-PERFORM.                                                 10930099
109400     PERFORM 7000-CHAR-TO-BIT.                                    10940099
109500     MOVE BIT-MASK TO SELECT-RR-MASK.                             10950099
109600     MOVE BIT-MASK TO SELECT-RW-MASK.                             10960099
109700     MOVE BIT-MASK TO SELECT-RE-MASK.                             10970099
109800                                                                  10980099
109900* CLEAR AND NEVER CHECK EXCEPTION OR WRITE BITS                   10990099
110000                                                                  11000099
110100     MOVE BIT-MASK TO SELECT-EX-MASK.                             11010099
110200     MOVE BIT-MASK TO SELECT-WR-MASK.                             11020099
110300                                                                  11030099
110400*                                                                 11040099
110500* ISSUE THE SELECT COMMAND ----------------------------           11050099
110600* SELECT WILL FLIP A BIT IN THE READ MASK TO '1' FOR ANY          11060099
110700* SOCKET THAT HAS DATA TO BE PROCESSED.                           11070099
110800*                                                                 11080099
110900                                                                  11090099
111000* A TRACE MESSAGE                                                 11100099
111100     IF DISP-MSGS > 0                                             11110099
111200       MOVE 'PERFORMING SELECT COMMAND' TO MSG-AREA               11120099
111300       PERFORM 9000-WRITE-CICS                                    11130099
111400     END-IF.                                                      11140099
111500                                                                  11150099
111600     MOVE 0 TO EZERRNO.                                           11160099
111700     MOVE 0 TO SELRETC.                                           11170099
111800     CALL 'EZASOKET' USING SELECT-CMD                             11180099
111900         SELECT-NUMFDS SELECT-TIMEOUT                             11190099
112000         SELECT-RD-MASK SELECT-WR-MASK SELECT-EX-MASK             11200099
112100         SELECT-RR-MASK SELECT-RW-MASK SELECT-RE-MASK             11210099
112200         EZERRNO SELRETC.                                         11220099
112300                                                                  11230099
112400     MOVE SELRETC TO EZRETC.                                      11240099
112500                                                                  11250099
112600     IF SELRETC < 0 THEN                                          11260099
112700        MOVE EZERRNO TO SELE-ERRNO                                11270099
112800        MOVE SELEAPI-ERR TO MSG-AREA                              11280099
112900        PERFORM 9000-WRITE-CICS                                   11290099
113000     END-IF.                                                      11300099
113100                                                                  11310099
113200* TIMESTAMP IS COMPUTED HERE                                      11320099
113300     IF SELRETC >= 0                                              11330099
113400        EXEC CICS ASKTIME ABSTIME(DSTAMP) NOHANDLE END-EXEC       11340099
113500        EXEC CICS FORMATTIME ABSTIME(DSTAMP) DAYCOUNT(DCOUNT)     11350099
113600             TIME(TTIME) TIMESEP(':') NOHANDLE END-EXEC           11360099
113700        COMPUTE TSTAMP = ( DCOUNT * 1440 ) + (HH * 60) + MM       11370099
113800     END-IF.                                                      11380099
113900                                                                  11390099
114000***************************************************************   11400099
114100*  OPEN-NEW-SOCKET                                            *   11410099
114200*  PERFORM THE STEPS NECESSARY TO ESTABLISH A NEW SOCKET AND  *   11420099
114300*  INITIALIZE ALL ASSOCIATED VARIABLES REQUIRED.              *   11430099
114400***************************************************************   11440099
114500 3100-OPEN-NEW-SOCKET.                                            11450099
114600     PERFORM 3110-ACCEPT-SOCKET.                                  11460099
114700     IF EZRETC > 0 THEN                                           11470099
114800        PERFORM 3120-SET-SOCK-OPTIONS                             11480099
114900        IF EZRETC >= 0 THEN                                       11490099
115000           PERFORM 3130-SET-NON-BLOCKING                          11500099
115100           IF EZRETC >= 0 THEN                                    11510099
115200              PERFORM 3140-PREPARE-SOCKET                         11520099
115300              PERFORM 3150-CHECK-OPEN-SOCKETS                     11530099
115400           END-IF                                                 11540099
115500        END-IF                                                    11550099
115600     END-IF.                                                      11560099
115700***************************************************************   11570099
115800*  ACCEPT-SOCKET                                              *   11580099
115900* GET THE PORT AND IP ADDRESS OF THE CLIENT, AND THE NEW      *   11590099
116000* SOCKET NUMBER TO BE OPENED                                  *   11600099
116100***************************************************************   11610099
116200 3110-ACCEPT-SOCKET.                                              11620099
116300                                                                  11630099
116400* NEED TO ACCEPT THE SOCKET FIRST                                 11640099
116500                                                                  11650099
116600     MOVE 0 TO SOCKET-DESCRIPTOR.                                 11660099
116700     MOVE 0 TO EZERRNO.                                           11670099
116800     MOVE 0 TO EZRETC.                                            11680099
116900                                                                  11690099
117000     CALL 'EZASOKET' USING ACCEPT-CMD                             11700099
117100          SOCKET-DESCRIPTOR ACCEPT-NAME                           11710099
117200          EZERRNO EZRETC.                                         11720099
117300                                                                  11730099
117400* THE SOCKET NUMBER IS RETURNED IN EZRETC.                        11740099
117500* IF EZRETC IS < ZERO, THAT IS AN ERROR SO CALL 'DEAD-SOCKET'     11750099
117600                                                                  11760099
117700     IF EZRETC < 0 THEN                                           11770099
117800        MOVE EZERRNO TO ACCE-ERRNO                                11780099
117900        MOVE ACCEAPI-ERR TO MSG-AREA                              11790099
118000        MOVE 10 TO DISP-MSGS                                      11800099
118100        PERFORM 9000-WRITE-CICS                                   11810099
118200        MOVE '!ACCEPT ERROR - CLOSE SOCKETS AT 2 MIN' TO MSG-AREA 11820099
118300        PERFORM 9000-WRITE-CICS                                   11830099
118400        MOVE FULL-TIMEOUT-T2 TO DEAD-TIMEOUT                      11840099
118500        PERFORM 7050-DEAD-SOCKET                                  11850099
118600        MOVE FULL-TIMEOUT-T720 TO DEAD-TIMEOUT                    11860099
118700     END-IF.                                                      11870099
118800                                                                  11880099
118900* IF EZRETC IS ZERO, THAT IS INVALID, AS THE '0' SOCKET IS THE    11890099
119000* LISTENER, WHICH IS ALREADY OPEN.                                11900099
119100                                                                  11910099
119200     IF EZRETC = 0 THEN                                           11920099
119300        MOVE EZERRNO TO ACCE-ERRNO                                11930099
119400        MOVE ACCEAPI-ERR TO MSG-AREA                              11940099
119500        MOVE 10 TO DISP-MSGS                                      11950099
119600        PERFORM 9000-WRITE-CICS                                   11960099
119700        MOVE '!ACCEPT ERROR - RETURN CODE = 0' TO MSG-AREA        11970099
119800        PERFORM 9000-WRITE-CICS                                   11980099
119900     END-IF.                                                      11990099
120000                                                                  12000099
120100                                                                  12010099
120200                                                                  12020099
120300***************************************************************   12030099
120400*  SET-SOCK-OPTIONS                                           *   12040099
120500***************************************************************   12050099
120600 3120-SET-SOCK-OPTIONS.                                           12060099
120700*     ACCEPT-CMD RETURNED THE SOCKET NUMBER TO BE USED            12070099
120800*     SAVE IT IN SOCKNO.                                          12080099
120900     MOVE EZRETC TO SOCKNO.                                       12090099
121000     PERFORM 7030-VALID-IPADDR.                                   12100099
121100                                                                  12110099
121200     IF TBL-ST-AVAIL(SOCKNO) = 'N'                                12120099
121300        MOVE ' ACCEPT SOCKET NOT AVAILABLE ' TO MSG-AREA          12130099
121400        PERFORM 9000-WRITE-CICS                                   12140099
121500     END-IF.                                                      12150099
121600                                                                  12160099
121700     IF SOCKNO = USED-COUNTER                                     12170099
121800        MOVE USED-COUNTER TO OPEN-COUNTER                         12180099
121900        MOVE OPENCNT-MSG TO MSG-AREA                              12190099
122000        PERFORM 9000-WRITE-CICS                                   12200099
122100        ADD 100 TO USED-COUNTER                                   12210099
122200     END-IF.                                                      12220099
122300                                                                  12230099
122400     MOVE SOCKNO TO OPEN-SOCK-COUNT.                              12240099
122500     MOVE OPEN-SOCK-MSG TO MSG-AREA.                              12250099
122600     PERFORM 9000-WRITE-CICS.                                     12260099
122700                                                                  12270099
122800* THE ACCEPT-NAME INFO (FAMILY, PORT, IP ADDR) IS SAVED IN        12280099
122900* TBL-SOCKADDR-IN(SOCKNO)                                         12290099
123000                                                                  12300099
123100     MOVE ACCEPT-NAME TO TBL-SOCKADDR-IN(SOCKNO).                 12310099
123200                                                                  12320099
123300     MOVE SOCKNO TO SOCKID.                                       12330099
123400     MOVE 0 TO EZERRNO.                                           12340099
123500     MOVE 0 TO EZRETC.                                            12350099
123600     MOVE SSOREUSE TO SSOOPTNM.                                   12360099
123700     MOVE 'ISSUE SET SOCKET COMMAND' TO MSG-AREA.                 12370099
123800     PERFORM 9000-WRITE-CICS.                                     12380099
123900                                                                  12390099
124000* SET SOCKET OPTIONS                                              12400099
124100                                                                  12410099
124200     CALL 'EZASOKET' USING SETSOCK-CMD SOCKID                     12420099
124300           SSOOPTNM SSOOPVAL SSOLEN EZERRNO EZRETC.               12430099
124400                                                                  12440099
124500* IF RETURN CODE < 0 THEN CLOSE THE SOCKET                        12450099
124600     IF EZRETC < 0 THEN                                           12460099
124700        MOVE EZERRNO TO SETS-ERRNO                                12470099
124800        MOVE SETSAPI-ERR TO MSG-AREA                              12480099
124900        PERFORM 9000-WRITE-CICS                                   12490099
125000        MOVE 10 TO DISP-MSGS                                      12500099
125100        PERFORM 7060-CLOSE-SOCKET                                 12510099
125200     END-IF.                                                      12520099
125300                                                                  12530099
125400***************************************************************   12540099
125500*  SET-NON-BLOCKING                                           *   12550099
125600*  SET SOCKET TO NON-BLOCKING MODE.                           *   12560099
125700***************************************************************   12570099
125800 3130-SET-NON-BLOCKING.                                           12580099
125900*    PUT SOCKET INTO NON-BLOCKING MODE                            12590099
126000                                                                  12600099
126100     MOVE 4 TO FCNTL-COMMAND.                                     12610099
126200     MOVE 4 TO FCNTL-ARG.                                         12620099
126300     MOVE 0 TO EZERRNO.                                           12630099
126400     MOVE 0 TO EZRETC.                                            12640099
126500                                                                  12650099
126600     CALL 'EZASOKET' USING FCNTL-CMD SOCKID                       12660099
126700          FCNTL-COMMAND FCNTL-ARG EZERRNO EZRETC.                 12670099
126800                                                                  12680099
126900* IF RETURN CODE < 0 THEN CLOSE THE SOCKET                        12690099
127000     IF EZRETC < 0 THEN                                           12700099
127100        MOVE EZERRNO TO FCNT-ERRNO                                12710099
127200        MOVE FCNTAPI-ERR TO MSG-AREA                              12720099
127300        PERFORM 9000-WRITE-CICS                                   12730099
127400        MOVE 10 TO DISP-MSGS                                      12740099
127500        PERFORM 7060-CLOSE-SOCKET                                 12750099
127600     END-IF.                                                      12760099
127700                                                                  12770099
127800***************************************************************   12780099
127900*  PREPARE-SOCKET                                             *   12790099
128000*  INITIALIZE NEW SOCKET INTO BIT MAP, ASSIGN MATCHING NUMBER *   12800099
128100***************************************************************   12810099
128200 3140-PREPARE-SOCKET.                                             12820099
128300     IF EZRETC >= 0 THEN                                          12830099
128400*  SET THE READ AND EXCEPTION BIT MAPS FOR SELECT                 12840099
128500*                                                                 12850099
128600*  THE SELECT-RD-MASK IS CONVERTED FROM BITS TO CHAR AND THE      12860099
128700*  POSITION OF THIS SOCKET IS SET TO '1' SO THAT IT WILL BE       12870099
128800*  PICKED UP IN THE NEXT SOCKET SELECT COMMAND. THE BIT STRING    12880099
128900*  IS THEN CONVERTED BACK TO BITS FROM CHAR.                      12890099
129000                                                                  12900099
129100     MOVE SELECT-RD-MASK TO BIT-MASK.                             12910099
129200     PERFORM 7010-BIT-TO-CHAR.                                    12920099
129300                                                                  12930099
129400*                                                                 12940099
129500*    UN-COMMENT FOLLOWING LINES IF NEEDED FOR DEBUGING            12950099
129600*                                                                 12960099
129700*    MOVE CHAR-MASK TO MSG-AREA.                                  12970099
129800*    PERFORM 9000-WRITE-CICS.                                     12980099
129900                                                                  12990099
130000     COMPUTE WSCT = SOCKNO + 1.                                   13000099
130100     MOVE '1' TO CHAR-ENTRY(WSCT).                                13010099
130200                                                                  13020099
130300*                                                                 13030099
130400*    UN-COMMENT FOLLOWING LINES IF NEEDED FOR DEBUGING            13040099
130500*                                                                 13050099
130600*    MOVE CHAR-MASK TO MSG-AREA.                                  13060099
130700*    PERFORM 9000-WRITE-CICS.                                     13070099
130800                                                                  13080099
130900     PERFORM 7000-CHAR-TO-BIT.                                    13090099
131000                                                                  13100099
131100     MOVE BIT-MASK TO SELECT-RD-MASK.                             13110099
131200*    MOVE BIT-MASK TO SELECT-EX-MASK.                             13120099
131300* A TRACE MESSAGE                                                 13130099
131400     IF DISP-MSGS > 0                                             13140099
131500       MOVE SOCKNO TO ASSG-COUNT                                  13150099
131600       MOVE ASSG-ERR-MSG TO MSG-AREA                              13160099
131700       PERFORM 9000-WRITE-CICS                                    13170099
131800     END-IF.                                                      13180099
131900                                                                  13190099
132000* SET READ BIT FOR THIS NEW SOCKET TO ZERO                        13200099
132100     MOVE '0' TO CHAR-MASK1(WSCT:1).                              13210099
132200* SAVE TIMESTAMP, MATCHING NUMBER,                                13220099
132300* AND SET ST-AVAIL TO 'NO' FOR NEWLY OPENED SOCKET.               13230099
132400     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           13240099
132500     MOVE MATCHING-NUMB TO TBL-ST-MATCHING(SOCKNO).               13250099
132600     MOVE 'N' TO TBL-ST-AVAIL(SOCKNO).                            13260099
132700                                                                  13270099
132800* RESET TBL-DATA-CNT WHEN OPENING A SOCKET                        13280099
132900* TBL-DATA-CNT IS USED TO STORE THE LENGTH OF THE DATA IN         13290099
133000* THE BUFFER. FOR A NEW SOCKET, THERE IS NO DATA YET.             13300099
133100     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              13310099
133200*                                                                 13320099
133300*    DISPLAY MATCHING DATA IN CICS LOG                            13330099
133400     IF DISP-MSGS > 0                                             13340099
133500       MOVE SOCKNO TO MATCHING-LOG-A-STORE                        13350099
133600       MOVE MATCHING-NUMB TO MATCHING-LOG-A-NUMB                  13360099
133700       MOVE MATCHING-LOG-AREA TO MSG-AREA                         13370099
133800       PERFORM 9000-WRITE-CICS                                    13380099
133900     END-IF.                                                      13390099
134000                                                                  13400099
134100     ADD 1 TO MATCHING-NUMB.                                      13410099
134200     IF MATCHING-NUMB > 99999990 THEN                             13420099
134300        MOVE 1 TO MATCHING-NUMB                                   13430099
134400     END-IF.                                                      13440099
134500                                                                  13450099
134600                                                                  13460099
134700************************************************************      13470099
134800*  CHECK-OPEN-SOCKETS.                                     *      13480099
134900*  THIS ROUTE IS CALLED WHENEVER A SOCKET IS OPENED.  IT   *      13490099
135000*  CHECKS TO SEE IF AN EXISTING SOCKET IS OPEN WITH THE    *      13500099
135100*  SAME TCP/IP ADDRESS AND PORT NUMBER.                    *      13510099
135200*  IF ONE IS FOUND, CLOSE IT.                              *      13520099
135300************************************************************      13530099
135400 3150-CHECK-OPEN-SOCKETS.                                         13540099
135500* A TRACE MESSAGE                                                 13550099
135600     IF DISP-MSGS > 0                                             13560099
135700       MOVE 'PERFORMING CHECK-OPEN-SOCKETS ROUTINE' TO MSG-AREA   13570099
135800       PERFORM 9000-WRITE-CICS                                    13580099
135900     END-IF.                                                      13590099
136000                                                                  13600099
136100     MOVE SOCKNO TO SAV-SOCKNO.                                   13610099
136200                                                                  13620099
136300     PERFORM VARYING TSOCKET FROM 1 BY 1                          13630099
136400              UNTIL TSOCKET > MAX-SOCKETS-LESS1                   13640099
136500        IF TBL-ST-AVAIL(TSOCKET) = 'N' THEN                       13650099
136600          IF TSOCKET NOT = SAV-SOCKNO THEN                        13660099
136700            IF TBL-SIN-ADDR(TSOCKET) = TBL-SIN-ADDR(SAV-SOCKNO)   13670099
136800               AND TBL-SIN-PORT(TSOCKET) =                        13680099
136900                                    TBL-SIN-PORT(SAV-SOCKNO)      13690099
137000                 THEN                                             13700099
137100                 MOVE TSOCKET TO SEARCH-MSG-COUNT2                13710099
137200                 MOVE SEARCH-MSG-ERR2 TO MSG-AREA                 13720099
137300                 PERFORM 9000-WRITE-CICS                          13730099
137400                 MOVE TSOCKET TO SOCKNO                           13740099
137500                 PERFORM 7060-CLOSE-SOCKET                        13750099
137600              END-IF                                              13760099
137700           END-IF                                                 13770099
137800        END-IF                                                    13780099
137900     END-PERFORM.                                                 13790099
138000     MOVE SAV-SOCKNO TO SOCKNO.                                   13800099
138100                                                                  13810099
138200                                                                  13820099
138300                                                                  13830099
138400***************************************************************   13840099
138500* RECEIVE-DATA                                                *   13850099
138600* READ A MESSAGE PACKET FROM A SOCKET.                        *   13860099
138700* BEFORE READING, SAVE MESSAGE LENGTH FROM PRIOR SOCKET READ  *   13870099
138800* IN CASE THERE WAS A PARTIAL PACKET THE LAST TIME YOU READ.  *   13880099
138900* NOTE: SOCKNO = THE NUMBER OF THE SOCKET NOW BEING PROCESSED *   13890099
139000***************************************************************   13900099
139100 4000-RECEIVE-DATA.                                               13910099
139200                                                                  13920099
139300* A TRACE MESSAGE SHOWING SOCKET # AND IP ADDRESS                 13930099
139400     IF DISP-MSGS > 0                                             13940099
139500       MOVE SOCKNO TO READ-SOCK1-COUNT                            13950099
139600       MOVE READ-SOCK1-MSG TO MSG-AREA                            13960099
139700       MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME                13970099
139800       PERFORM 7040-CONVERT-IP-ADDR                               13980099
139900       MOVE CIP-1 TO OCTET                                        13990099
140000       MOVE OCTET TO MSG-AREA(34:3)                               14000099
140100       MOVE '.' TO MSG-AREA(37:1)                                 14010099
140200       MOVE CIP-2 TO OCTET                                        14020099
140300       MOVE OCTET TO MSG-AREA(38:3)                               14030099
140400       MOVE '.' TO MSG-AREA(41:1)                                 14040099
140500       MOVE CIP-3 TO OCTET                                        14050099
140600       MOVE OCTET TO MSG-AREA(42:3)                               14060099
140700       MOVE '.' TO MSG-AREA(45:1)                                 14070099
140800       MOVE CIP-4 TO OCTET                                        14080099
140900       MOVE OCTET TO MSG-AREA(46:3)                               14090099
141000       PERFORM 9000-WRITE-CICS                                    14100099
141100     END-IF.                                                      14110099
141200                                                                  14120099
141300*                                                             *   14130099
141400*  TBL-DATA-CNT = LENGTH OF MESSAGE + 1.                      *   14140099
141500*                                                             *   14150099
141600*  FOR A NEW MESSAGE, TBL-DATA-CNT WAS INITIALIZED AT 1.      *   14160099
141700*  IF THERE WAS A PARTIAL MESSAGE READ PREVIOUSLY,            *   14170099
141800*  TBL-DATA-CNT = LENGTH OF THE PARTIAL MESSAGE + 1.          *   14180099
141900*                                                             *   14190099
142000     MOVE TBL-DATA-CNT(SOCKNO) TO PV-PRTL-MSG-LEN.                14200099
142100     MOVE SOCKNO TO SOCKID.                                       14210099
142200     MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME.                 14220099
142300     MOVE 0 TO RECV-FLAG.                                         14230099
142400     MOVE SPACES TO TCP-BUF.                                      14240099
142500     MOVE 0 TO ERRNO.                                             14250099
142600     MOVE 0 TO RETCODE.                                           14260099
142700     MOVE 0 TO PV-REC-PACKET-LEN.                                 14270099
142800****************************************************************  14280099
142900* READ DATA FROM SOCKET                                        *  14290099
143000* HERE WE ARE ISSUING THE RECEIVE COMMAND.  ALL SOCKETS SHOULD *  14300099
143100* BE IN NON-BLOCKING MODE.                                     *  14310099
143200*                                                              *  14320099
143300* IF RETCODE IS RETURNED WITH A POSITIVE VALUE THEN THAT VALUE *  14330099
143400* REPRESENTS THE NUMBER OF BYTES THAT WE HAVE RECEIVED AND WE  *  14340099
143500* WILL CONTINUE TO PROCESS THE DATA.                           *  14350099
143600*                                                              *  14360099
143700* The DATA received is in TCP-BUF.                             *  14370099
143800* PV-REC-PACKET-LEN tells how many bytes of data were received *  14380099
143900* in this data-packet.                                         *  14390099
144000****************************************************************  14400099
144100     CALL 'EZASOKET' USING RECVFROM-CMD SOCKID                    14410099
144200           RECV-FLAG TCP-BUF-SIZE TCP-BUF ACCEPT-NAME             14420099
144300           ERRNO RETCODE.                                         14430099
144400                                                                  14440099
144500* A TRACE MESSAGE SHOWING THE ASCII MESSAGE RECEIVED              14450099
144600     IF DISP-MSGS > 0                                             14460099
144700       MOVE TCP-BUF TO MSG-AREA                                   14470099
144800       PERFORM 9000-WRITE-CICS                                    14480099
144900     END-IF.                                                      14490099
145000*                                                                 14500099
145100* INTERPRET RETURN CODE AS FOLLOWS:                               14510099
145200*   RETCODE > 0 THE VALUE IS HOW MANY BYTES WERE RECEIVED         14520099
145300*   RETCODE = 0 MEANS THE SOCKET TIMED OUT AND SHOULD BE CLOSED   14530099
145400*   RETCODE < 0 MEANS THERE WAS AN ERROR                          14540099
145500*                                                                 14550099
145600     EVALUATE TRUE                                                14560099
145700       WHEN RETCODE > 0                                           14570099
145800         MOVE RETCODE TO PV-REC-PACKET-LEN                        14580099
145900         PERFORM 4100-PROCESS-RECEIVED-DATA                       14590099
146000       WHEN RETCODE = 0                                           14600099
146100         MOVE '**TCPRECV RETCODE = 0' TO MSG-AREA                 14610099
146200         PERFORM 9000-WRITE-CICS                                  14620099
146300         MOVE 'ER-CODE' TO FIELDXX                                14630099
146400         MOVE ERRNO TO ERR-CODE                                   14640099
146500         MOVE 'RET-CD=' TO FIELDYY                                14650099
146600         MOVE RETCODE TO DIS-RET-CODE                             14660099
146700         MOVE 'RECVRDS' TO CALL-NO                                14670099
146800         PERFORM 9000-WRITE-CICS                                  14680099
146900         PERFORM 7060-CLOSE-SOCKET                                14690099
147000       WHEN RETCODE < 0                                           14700099
147100         PERFORM 4990-ERROR-ON-RECEIVE                            14710099
147200     END-EVALUATE.                                                14720099
147300                                                                  14730099
147400****************************************************************  14740099
147500* PROCESS-RECEIVED-DATA                                        *  14750099
147600* In this procedure, the data received in TCP-BUF will be      *  14760099
147700* broken up one message at a time and sent to the correct      *  14770099
147800* authorization program until there are no more messages left  *  14780099
147900* in TCP-BUF, or there is a partial message left.              *  14790099
148000*                                                              *  14800099
148100* More explaination:                                           *  14810099
148200* Each read of a socket will get as much data that fits into   *  14820099
148300* the TCP-buffer. The buffer is large enough to hold up to 10  *  14830099
148400* average-size AJB FiPay messages.                             *  14840099
148500* Every AJB FiPay message starts with a 2 BYTE HEX value that  *  14850099
148600* tells you the message length (NOT INCLUDING THOSE 2 BYTES).  *  14860099
148700* In this procedure, the data is parsed into multiple messages *  14870099
148800* based on these header lengths.                               *  14880099
148900* If there is a partial message at the end of the data, it will*  14890099
149000* be saved in TBL-DATA and the rest of the message will be     *  14900099
149100* picked up the next time the socket is read.                  *  14910099
149200****************************************************************  14920099
149300                                                                  14930099
149400 4100-PROCESS-RECEIVED-DATA.                                      14940099
149500                                                                  14950099
149600* A TRACE MESSAGE SHOWING THE BYTE COUNTS OF THE OLD PARTIAL      14960099
149700* MESSAGE AND THE NEW DATA PACKET THAT WAS READ IN.               14970099
149800     IF DISP-MSGS > 0                                             14980099
149900       IF PV-PRTL-MSG-LEN > 1 THEN                                14990099
150000        MOVE PV-PRTL-MSG-LEN TO PART-CNT-1                        15000099
150100        MOVE PV-REC-PACKET-LEN TO PART-CNT-2                      15010099
150200        MOVE PART-CNT-MSG TO MSG-AREA                             15020099
150300        PERFORM 9000-WRITE-CICS                                   15030099
150400       END-IF                                                     15040099
150500     END-IF.                                                      15050099
150600                                                                  15060099
150700* IF THERE WAS A PARTIAL MESSAGE, USE THE HEADER LENGTH           15070099
150800* FROM THE OLD PARTIAL MESSAGE,                                   15080099
150900* OTHERWISE USE THE HEADER LENGTH FROM THE NEW MESSAGE YOU JUST   15090099
151000* RECEIVED.                                                       15100099
151100     IF PV-PRTL-MSG-LEN > 1 THEN                                  15110099
151200       MOVE TBL-DATA-LEN-HEX(SOCKNO) TO PV-CONVRT-MSGLEN-HEX      15120099
151300     ELSE                                                         15130099
151400       MOVE TCP-MSG-LEN TO PV-CONVRT-MSGLEN-HEX                   15140099
151500     END-IF.                                                      15150099
151600                                                                  15160099
151700* CONVERT THE MESSAGE HEADER LENGTH FROM HEX TO INTEGER.          15170099
151800     PERFORM 7900-READ-HEADER-LENGTH.                             15180099
151900                                                                  15190099
152000     COMPUTE PV-TO-PARSE-LEN =                                    15200099
152100             PV-REC-PACKET-LEN + PV-PRTL-MSG-LEN - 1.             15210099
152200                                                                  15220099
152300* CHECK FOR HEADER ERROR                                          15230099
152400     IF HEADER-ERROR = 'Y' THEN                                   15240099
152500        MOVE '!ERROR IN HEADER.' TO MSG-AREA                      15250099
152600        PERFORM 9000-WRITE-CICS                                   15260099
152700        MOVE '!CLOSING SOCKET.' TO MSG-AREA                       15270099
152800        PERFORM 9000-WRITE-CICS                                   15280099
152900        MOVE 5 TO DISP-MSGS                                       15290099
153000        PERFORM 7060-CLOSE-SOCKET                                 15300099
153100     ELSE                                                         15310099
153200        IF PV-MSG-LEN-WHDR <= PV-TO-PARSE-LEN                     15320099
153300* YOU HAVE AT LEAST 1 GOOD MESSAGE.                               15330099
153400* MOVE THE PARTIAL AND THE NEW MESSAGE INTO THE PARSER            15340099
153500* AND PROCESS THE MESSAGES.                                       15350099
153600           MOVE SPACES TO MSG-PARSER                              15360099
153700* MOVE THE OLD PARTIAL MESSAGE INTO THE PARSER FIRST              15370099
153800           MOVE TBL-DATA(SOCKNO) TO MSG-PARSER                    15380099
153900* THEN APPEND THE NEW DATA PACKET INTO THE PARSER                 15390099
154000           MOVE TCP-BUF TO                                        15400099
154100                MSG-PARSER(PV-PRTL-MSG-LEN:PV-REC-PACKET-LEN)     15410099
154200           PERFORM 4150-PARSE-MESSAGE                             15420099
154300        ELSE                                                      15430099
154400* YOU HAVE A PARTIAL MESSAGE.                                     15440099
154500* IF THIS IS THE FIRST PARTIAL, SAVE IT, OTHERWISE, CLOSE THE     15450099
154600* SOCKET, BECAUSE IF YOU GOT 2 PARTIAL MESSAGES IN A ROW,         15460099
154700* THERE IS PROBABLY SOMETHING WRONG WITH THE CONNECTION.          15470099
154800           IF PV-PRTL-MSG-LEN = 1 THEN                            15480099
154900              MOVE MSG-PARSER TO TBL-DATA(SOCKNO)                 15490099
155000              COMPUTE TBL-DATA-CNT(SOCKNO) =                      15500099
155100                       PV-PRTL-MSG-LEN + PV-REC-PACKET-LEN        15510099
155200           ELSE                                                   15520099
155300              MOVE '!2ND PARTIAL MESSAGE IN A ROW' TO MSG-AREA    15530099
155400              PERFORM 9000-WRITE-CICS                             15540099
155500              MOVE '!CLOSING SOCKET.' TO MSG-AREA                 15550099
155600              PERFORM 9000-WRITE-CICS                             15560099
155700              MOVE 5 TO DISP-MSGS                                 15570099
155800              PERFORM 7060-CLOSE-SOCKET                           15580099
155900           END-IF                                                 15590099
156000        END-IF                                                    15600099
156100     END-IF.                                                      15610099
156200                                                                  15620099
156300****************************************************************  15630099
156400* PARSE-MESSAGE.                                               *  15640099
156500* IF THERE ARE MULTIPLE MESSAGES IN THE DATA YOU RECEVIED,     *  15650099
156600* BREAK THEM UP AND PROCESS EACH ONE INDIVIDUALLY.             *  15660099
156700* (SEND EACH ONE TO ITS AUTHORIZER PROGRAM)                       15670099
156800* SAVE ANY LEFTOVER PARTIAL MESSAGE IN THE TBL-DATA ARRAY.     *  15680099
156900****************************************************************  15690099
157000 4150-PARSE-MESSAGE.                                              15700099
157100     MOVE 1 TO PRSR-CT.                                           15710099
157200     MOVE 'N' TO SW-END-OF-PACKET.                                15720099
157300* PARSING LOOP                                                    15730099
157400* PROCESS EACH MESSAGE IN THE RECEIVED DATA PACKET UNTIL          15740099
157500* YOU ARE AT THE END OF THE DATA PACKET.                          15750099
157600     PERFORM UNTIL SW-END-OF-PACKET = 'Y'                         15760099
157700* MOVE ONE COMPLETE MESSAGE TO TBL-DATA TO BE PROCESSED           15770099
157800       MOVE MSG-PARSER(PRSR-CT:PV-MSG-LEN-WHDR)                   15780099
157900            TO TBL-DATA(SOCKNO)                                   15790099
158000* PROCESS THIS MESSAGE                                            15800099
158100       MOVE 1 TO TBL-DATA-CNT(SOCKNO)                             15810099
158200       PERFORM 4200-FULL-MESSAGE-CREATED                          15820099
158300* CALCULATE START OF NEXT MESSAGE                                 15830099
158400       ADD PV-MSG-LEN-WHDR TO PRSR-CT                             15840099
158500       COMPUTE PRSR-CT-1 = PRSR-CT - 1                            15850099
158600* CHECK IF YOU ARE AT THE END OF THE DATA                         15860099
158700       IF PRSR-CT-1 = PV-TO-PARSE-LEN THEN                        15870099
158800         MOVE 'Y' TO SW-END-OF-PACKET                             15880099
158900       ELSE                                                       15890099
159000* IF NOT END OF MESSAGE, THEN CONVERT NEXT HEADER TO INTEGER      15900099
159100         PERFORM 4991-MULTIPLE-MSG                                15910099
159200         MOVE MSG-PARSER(PRSR-CT:2) TO PV-CONVRT-MSGLEN-HEX       15920099
159300         PERFORM 7900-READ-HEADER-LENGTH                          15930099
159400* CHECK FOR VALID HEADER LENGTH                                   15940099
159500         IF HEADER-ERROR = 'Y' THEN                               15950099
159600* BAD HEADER                                                      15960099
159700           MOVE '!ERROR IN HEADER.' TO MSG-AREA                   15970099
159800           PERFORM 9000-WRITE-CICS                                15980099
159900           MOVE '!CLOSING SOCKET.' TO MSG-AREA                    15990099
160000           PERFORM 9000-WRITE-CICS                                16000099
160100           PERFORM 7060-CLOSE-SOCKET                              16010099
160200           MOVE 'Y' TO SW-END-OF-PACKET                           16020099
160300         ELSE                                                     16030099
160400* GOOD HEADER, CALCULATE END OF NEXT MESSAGE                      16040099
160500           COMPUTE WS-NEWLEN = PV-MSG-LEN-WHDR + PRSR-CT-1        16050099
160600* CHECK FOR PARTIAL MESSAGE                                       16060099
160700           IF WS-NEWLEN > PV-TO-PARSE-LEN THEN                    16070099
160800* PARTIAL MESSAGE IS LEFT, SAVE IT                                16080099
160900             PERFORM 4992-PARTIAL-MSG                             16090099
161000             COMPUTE TBL-DATA-CNT(SOCKNO) =                       16100099
161100                     PV-TO-PARSE-LEN - PRSR-CT                    16110099
161200             MOVE MSG-PARSER(PRSR-CT:PV-MSG-LEN-WHDR)             16120099
161300                  TO TBL-DATA(SOCKNO)                             16130099
161400             MOVE 'Y' TO SW-END-OF-PACKET                         16140099
161500* END IF CHECK FOR PARTIAL MESSAGE                                16150099
161600           END-IF                                                 16160099
161700* END IF CHECK FOR VALID HEADER LENGTH                            16170099
161800         END-IF                                                   16180099
161900* END IF CHECK IF YOU ARE AT THE END OF THE DATA                  16190099
162000       END-IF                                                     16200099
162100* IF ANOTHER MESSAGE IS LEFT LOOP WILL BE PERFORMED AGAIN         16210099
162200     END-PERFORM.                                                 16220099
162300                                                                  16230099
162400****************************************************************  16240099
162500*  FULL-MESSAGE-CREATED                                        *  16250099
162600* REQUEST HAS BEEN RECEIVED AND IS READY TO BE SENT TO CHILD.  *  16260099
162700* CONVERT ENTIRE MESSAGE TO EBCDIC AND PASS IT TO THE CHILD    *  16270099
162800* PROGRAM.                                                     *  16280099
162900****************************************************************  16290099
163000 4200-FULL-MESSAGE-CREATED.                                       16300099
163100* A TRACE MESSAGE                                                 16310099
163200     IF DISP-MSGS > 0                                             16320099
163300       MOVE '**FULL-MESSAGE-CREATED ' TO MSG-AREA                 16330099
163400       PERFORM 9000-WRITE-CICS                                    16340099
163500     END-IF.                                                      16350099
163600                                                                  16360099
163700* THE HEADER HEX LENGTH IS NOT CONVERTED TO EBCDIC                16370099
163800     MOVE PV-MSG-LEN-WOHDR TO PV-CONVERT-LEN.                     16380099
163900                                                                  16390099
164000* A TRACE MESSAGE                                                 16400099
164100     IF DISP-MSGS > 0                                             16410099
164200          MOVE 'CONVERT TO EBCDIC LEN=' TO MSG-AREA               16420099
164300          MOVE PV-CONVERT-LEN TO MSG-AREA(22:8)                   16430099
164400          MOVE ' SOCKNO=' TO MSG-AREA(30:8)                       16440099
164500          MOVE SOCKNO TO MSG-AREA(38:8)                           16450099
164600          PERFORM 9000-WRITE-CICS                                 16460099
164700     END-IF.                                                      16470099
164800*                                                                 16480099
164900** CONVERT MESSAGE FROM ASCII TO EBCDIC **                        16490099
165000*                                                                 16500099
165100     CALL 'EZACIC05' USING                                        16510099
165200          TOEBCDIC-TOKEN TBL-DATA-REQ(SOCKNO) PV-CONVERT-LEN.     16520099
165300                                                                  16530099
165400     MOVE TBL-DATA(SOCKNO) TO TCP-BUF.                            16540099
165500*                                                                 16550099
165600** PARSE FIRST 6 FIELDS OF FIPAY DATA TO CHECK FOR VALID DATA *   16560099
165700*                                                                 16570099
165800     INITIALIZE UT-AUTH-MESSAGE.                                  16580099
165900     MOVE 1 TO UT-AUTH-INDEX.                                     16590099
166000     MOVE 1 TO UT-WS-CTR.                                         16600099
166100     PERFORM UNTIL UT-WS-CTR > PV-MSG-LEN-WOHDR                   16610099
166200             OR UT-AUTH-INDEX > 6                                 16620099
166300          UNSTRING TCP-MESSAGE                                    16630099
166400             DELIMITED BY ','                                     16640099
166500             INTO UT-AUTH-FIELD (UT-AUTH-INDEX)                   16650099
166600             WITH POINTER UT-WS-CTR                               16660099
166700          END-UNSTRING                                            16670099
166800          ADD 1 TO UT-AUTH-INDEX                                  16680099
166900     END-PERFORM.                                                 16690099
167000*                                                                 16700099
167100* CHECK FOR '100' IN FIPAY MESSAGE FIELD 1                        16710099
167200*                                                                 16720099
167300     MOVE UT-AUTH-FIELD (1) TO FI-01-TRAN-TYP.                    16730099
167400     IF NOT FI-01-REQUEST                                         16740099
167500        MOVE '!INVALID HEADER' TO MSG-AREA                        16750099
167600        PERFORM 9000-WRITE-CICS                                   16760099
167700        MOVE '!READ BUFFER=' TO MSG-AREA                          16770099
167800        MOVE FI-01-TRAN-TYP TO MSG-AREA(14:10)                    16780099
167900        PERFORM 9000-WRITE-CICS                                   16790099
168000        PERFORM 7060-CLOSE-SOCKET                                 16800099
168100     ELSE                                                         16810099
168200*                                                                 16820099
168300* DETERMINE WHAT CICS TRANID TO START AND SAVE IT              *  16830099
168400* IN TBL-DATA-TRANID                                           *  16840099
168500*                                                              *  16850099
168600* UT-AUTH-FIELD (6) CONTAINS THE MESSAGE TYPE                  *  16860099
168700* 'GIFTCARD' IS THE TYPE CODE SENT IN FIELD 6 FOR ALL STORED   *  16870099
168800* VALUE CARD TYPES.                                            *  16880099
168900                                                                  16890099
169000        MOVE FUNCTION UPPER-CASE (UT-AUTH-FIELD (6)) TO           16900099
169100             FI-06-TRAN-TYP-CODE                                  16910099
169200* A TRACE MESSAGE                                                 16920099
169300        IF DISP-MSGS > 0                                          16930099
169400          MOVE 'TRN-TYP:' TO MSG-AREA                             16940099
169500          MOVE FI-06-TRAN-TYP-CODE TO MSG-AREA(9:10)              16950099
169600          PERFORM 9000-WRITE-CICS                                 16960099
169700        END-IF                                                    16970099
169800                                                                  16980099
169900        EVALUATE TRUE                                             16990099
170000           WHEN FI-06-SV                                          17000099
170100              MOVE CICS-TRANID-SV TO                              17010099
170200                   TBL-DATA-TRANID(SOCKNO)                        17020099
170300              PERFORM 4300-PASS-TO-SV                             17030099
170400           WHEN OTHER                                             17040099
170500              MOVE FI-06-TRAN-TYP-CODE TO INVALID-MSG-TYP         17050099
170600              MOVE SOCKNO TO INVALID-MSG-TYP-IX                   17060099
170700              MOVE INVALID-MSG-TYP-MSG TO MSG-AREA                17070099
170800              PERFORM 9000-WRITE-CICS                             17080099
170900              PERFORM 7060-CLOSE-SOCKET                           17090099
171000        END-EVALUATE                                              17100099
171100     END-IF.                                                      17110099
171200                                                                  17120099
171300                                                                  17130099
171400                                                                  17140099
171500****************************************************************  17150099
171600*   PASS-TO-SV                                                 *  17160099
171700*  THIS MODULE WILL PASS THE REQUEST TO THE GIFT CARD AUTH     *  17170099
171800*  TRANSACTION AS DETERMINED IN PROCESS-RECEIVED-DATA AND      *  17180099
171900*  STORED IN TBL-DATA-TRANID.                                  *  17190099
172000****************************************************************  17200099
172100 4300-PASS-TO-SV.                                                 17210099
172200                                                                  17220099
172300* A TRACE MESSAGE                                                 17230099
172400     IF DISP-MSGS > 0                                             17240099
172500       MOVE '**SENDING TO CHILD TRANSACTION**' TO MSG-AREA        17250099
172600       PERFORM 9000-WRITE-CICS                                    17260099
173300     END-IF.                                                      17330099
173400                                                                  17340099
173500*    ADD 1 TO RECV-COUNT.                                         17350099
173600*    MOVE TBL-ST-MATCHING(SOCKNO) TO TCP-BUF-MATCHING.            17360099
173700     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           17370099
173800     MOVE 1 TO TBL-DATA-CNT(SOCKNO).                              17380099
173900     ADD 1 TO TBL-ST-RECV(SOCKNO).                                17390099
174000*                                                              *  17400099
174100* CICS-BUF-LEN IS ONLY THE LENGTH OF THE AJB FIPAY AUTH        *  17410099
174110* MESSAGE, INCLUDING THE 2 BYTE HEADER.                        *  17411099
174200* THE TOTAL LENGTH OF DATA SENT TO THE CHILD (CICS-DAT-LEN) IS:*  17420099
174300* MESSAGE LENGTH + 13 BYTES FOR LEN, MATCHING, AND Q INFO.     *  17430099
174400*                                                              *  17440099
174500     COMPUTE CICS-DAT-LEN = PV-MSG-LEN-WHDR + 13.                 17450099
174600     MOVE TBL-ST-MATCHING(SOCKNO) TO CICS-BUF-MATCHING.           17460099
174700     MOVE PV-MSG-LEN-WHDR TO CICS-BUF-LEN.                        17470099
174800     MOVE TCP-BUF TO CICS-BUF.                                    17480099
174900     MOVE TCPIP-CICS-QUEUE TO CICS-BUF-LISTENER-Q.                17490099
175000                                                                  17500099
175100* A TRACE MESSAGE                                                 17510099
175200     IF DISP-MSGS > 0                                             17520099
175300       MOVE 'T=????      ' TO MSG-AREA                            17530099
175400       MOVE CICS-DAT-LEN TO MSG-AREA(8:4)                         17540099
175500       MOVE CICS-BUF-OUT TO MSG-AREA(13:37)                       17550099
175600       MOVE TBL-DATA-TRANID(SOCKNO) TO MSG-AREA(3:4)              17560099
175700       PERFORM 9000-WRITE-CICS                                    17570099
175800     END-IF.                                                      17580099
175900                                                                  17590099
176000     EXEC CICS START TRANSID (TBL-DATA-TRANID(SOCKNO))            17600099
176100                     FROM (CICS-BUF-OUT)                          17610099
176200                     LENGTH (CICS-DAT-LEN)                        17620099
176300                     RESP(PV-RC)                                  17630099
176400     END-EXEC.                                                    17640099
176500                                                                  17650099
176600     IF PV-RC NOT = 0 THEN                                        17660099
176700        MOVE '!INVALID TRANSID STARTED' TO MSG-AREA               17670099
176800        MOVE TBL-DATA-TRANID(SOCKNO) TO MSG-AREA(27:4)            17680099
176900        MOVE 10 TO DISP-MSGS                                      17690099
177000        PERFORM 9000-WRITE-CICS                                   17700099
177100     END-IF.                                                      17710099
177200     IF DISP-MSGS > 0 THEN                                        17720099
177300        PERFORM VARYING WSCT FROM 1 BY 50                         17730099
177400                 UNTIL WSCT > CICS-DAT-LEN                        17740099
177500           MOVE CICS-BUF-OUT(WSCT:50) TO MSG-AREA                 17750099
177600           PERFORM 9000-WRITE-CICS                                17760099
177700        END-PERFORM                                               17770099
177800     END-IF.                                                      17780099
177900     MOVE 'TRANSACTION STARTED' TO MSG-AREA.                      17790099
178000     PERFORM 9000-WRITE-CICS.                                     17800099
178100                                                                  17810099
178200***************************************************************   17820099
178300*  ERROR-ON-RECEIVE                                           *   17830099
178400*  THE RETURN CODE FROM THE RECEIVE COMMAND WAS NEGATIVE,         17840099
178500*  REPORT THE ERROR                                           *   17850099
178600***************************************************************   17860099
178700 4990-ERROR-ON-RECEIVE.                                           17870099
178800*        KNOWN ERRORS:                                            17880099
178900*          1027 = NO SUCH SOCKET EXISTS.                          17890099
179000*          35   = THERE WAS NO DATA TO READ.                      17900099
179100*          9    = AN INCORRECT SOCKET DESCRIPTOR WAS SPECIFIED    17910099
179200     EVALUATE TRUE                                                17920099
179300       WHEN ERRNO = 1027                                          17930099
179400        MOVE '!ERRNO = 1027: CLOSE IX=' TO MSG-AREA               17940099
179500        MOVE SOCKNO TO DSPLY8                                     17950099
179600        MOVE DSPLY8   TO MSG-AREA(25:8)                           17960099
179700        PERFORM 7040-CONVERT-IP-ADDR                              17970099
179800        MOVE CIP-1 TO OCTET                                       17980099
179900        MOVE OCTET TO MSG-AREA(34:3)                              17990099
180000        MOVE '.'  TO MSG-AREA(37:1)                               18000099
180100        MOVE CIP-2 TO OCTET                                       18010099
180200        MOVE OCTET TO MSG-AREA(38:3)                              18020099
180300        MOVE '.'  TO MSG-AREA(41:1)                               18030099
180400        MOVE CIP-3 TO OCTET                                       18040099
180500        MOVE OCTET TO MSG-AREA(42:3)                              18050099
180600        MOVE '.'  TO MSG-AREA(45:1)                               18060099
180700        MOVE CIP-4 TO OCTET                                       18070099
180800        MOVE OCTET TO MSG-AREA(46:3)                              18080099
180900        PERFORM 9000-WRITE-CICS                                   18090099
181000        MOVE 5  TO DISP-MSGS                                      18100099
181100        PERFORM 7060-CLOSE-SOCKET                                 18110099
181200       WHEN ERRNO = 35                                            18120099
181300        MOVE '!ERRNO = 35 ON RECVFROM CMD' TO MSG-AREA            18130099
181400        PERFORM 9000-WRITE-CICS                                   18140099
181500       WHEN ERRNO = 9                                             18150099
181600        MOVE '!ERRNO = 9 ON RECVFROM CMD' TO MSG-AREA             18160099
181700        PERFORM 9000-WRITE-CICS                                   18170099
181800       WHEN OTHER                                                 18180099
181900        MOVE '!ERR ON RECVFROM CMD' TO MSG-AREA                   18190099
182000        PERFORM 9000-WRITE-CICS                                   18200099
182100        MOVE 'ER-CODE' TO FIELDXX                                 18210099
182200        MOVE ERRNO TO ERR-CODE                                    18220099
182300        MOVE 'RET-CD=' TO FIELDYY                                 18230099
182400        MOVE RETCODE TO DIS-RET-CODE                              18240099
182500        MOVE 'RECV' TO CALL-NO                                    18250099
182600        PERFORM 9000-WRITE-CICS                                   18260099
182700        MOVE 5 TO DISP-MSGS                                       18270099
182800        PERFORM 7060-CLOSE-SOCKET                                 18280099
182900     END-EVALUATE.                                                18290099
183000                                                                  18300099
183100***************************************************************   18310099
183200*  MULTIPLE-MSG.                                              *   18320099
183300* DISPLAY A MESSAGE WHEN THERE IS A MULTIPLE-MESSAGE PACKET.  *   18330099
183400* THIS SHOULD BE FOR TESTING PURPOSES ONLY.                   *   18340099
183500***************************************************************   18350099
183600 4991-MULTIPLE-MSG.                                               18360099
183700*    MOVE '!*RECEIVE EXTRA FROM IX=' TO MSG-AREA.                 18370099
183800*    MOVE SOCKNO TO DSPLY8.                                       18380099
183900*    MOVE DSPLY8   TO MSG-AREA(25:8).                             18390099
184000*    PERFORM 7040-CONVERT-IP-ADDR.                                18400099
184100*    MOVE CIP-1 TO OCTET.                                         18410099
184200*    MOVE OCTET TO MSG-AREA(34:3).                                18420099
184300*    MOVE '.'  TO MSG-AREA(37:1).                                 18430099
184400*    MOVE CIP-2 TO OCTET.                                         18440099
184500*    MOVE OCTET TO MSG-AREA(38:3).                                18450099
184600*    MOVE '.'  TO MSG-AREA(41:1).                                 18460099
184700*    MOVE CIP-3 TO OCTET.                                         18470099
184800*    MOVE OCTET TO MSG-AREA(42:3).                                18480099
184900*    MOVE '.'  TO MSG-AREA(45:1).                                 18490099
185000*    MOVE CIP-4 TO OCTET.                                         18500099
185100*    MOVE OCTET TO MSG-AREA(46:3).                                18510099
185200*    PERFORM 9000-WRITE-CICS.                                     18520099
185300*    MOVE ' *RECEIVE MORE THAN EXPECTED ' TO MSG-AREA.            18530099
185400                                                                  18540099
185500*    MOVE MSG-PARSER(1:18) TO MSG-AREA(30:18).                    18550099
185600*    PERFORM 9000-WRITE-CICS.                                     18560099
185700*    MOVE '!' TO MSG-AREA.                                        18570099
185800*    MOVE MSG-PARSER(19:64) TO MSG-AREA(2:45).                    18580099
185900*    PERFORM 9000-WRITE-CICS.                                     18590099
186000*    MOVE '!' TO MSG-AREA.                                        18600099
186100*    MOVE MSG-PARSER(65:110) TO MSG-AREA(2:45).                   18610099
186200*    PERFORM 9000-WRITE-CICS.                                     18620099
186300                                                                  18630099
186400** IF YOU'RE RUNNING A STRESS TEST, UNCOMMENT THIS DISPLAY        18640099
186500** TO MONITOR FOR MULTIPLE-PACKETS. MULTIPLES ARE TO BE           18650099
186600** EXPECTED, ARE NORMAL, AND ARE HANDLED BY THIS PROGRAM.         18660099
186700*    MOVE '!*READ L= ' TO MSG-AREA.                               18670099
186800*    MOVE SAV-MSG-LEN TO DISP-MAX.                                18680099
186900*    MOVE DISP-MAX TO MSG-AREA(11:4).                             18690099
187000*    MOVE ',HEADER COUNT=' TO MSG-AREA(15:14).                    18700099
187100*    MOVE PV-MSG-LEN-WHDR TO DISP-MAX.                            18710099
187200*    MOVE DISP-MAX TO MSG-AREA(29:4).                             18720099
187300*    MOVE ',RETCODE=' TO MSG-AREA(33:9).                          18730099
187400*    MOVE RETCODE TO DISP-MAX.                                    18740099
187500*    MOVE DISP-MAX TO MSG-AREA(42:4).                             18750099
187600*    PERFORM 9000-WRITE-CICS.                                     18760099
187700                                                                  18770099
187800*                                                                 18780099
187900** CONVERT MESSAGE FROM ASCII TO EBCDIC FOR TEST DISPLAY*         18790099
188000*                                                                 18800099
188100*    MOVE MSG-PARSER TO TEMP-DISPLAY-MSG.                         18810099
188200*    MOVE 1000 TO PV-CONVERT-LEN.                                 18820099
188300*    CALL 'EZACIC05' USING TOEBCDIC-TOKEN TEMP-DISPLAY-MSG        18830099
188400*                    PV-CONVERT-LEN.                              18840099
188500* Display message                                                 18850099
188600*    MOVE ' REC=' TO MSG-AREA.                                    18860099
188700*    MOVE TEMP-DISPLAY-MSG(1:44) TO MSG-AREA(6:44).               18870099
188800*    PERFORM 9000-WRITE-CICS.                                     18880099
188900*    MOVE ' ' TO MSG-AREA.                                        18890099
189000*    MOVE TEMP-DISPLAY-MSG(45:49) TO MSG-AREA(2:49).              18900099
189100*    PERFORM 9000-WRITE-CICS.                                     18910099
189200*    MOVE ' ' TO MSG-AREA.                                        18920099
189300*    MOVE TEMP-DISPLAY-MSG(94:49) TO MSG-AREA(2:49).              18930099
189400*    PERFORM 9000-WRITE-CICS.                                     18940099
189500*    MOVE ' ' TO MSG-AREA.                                        18950099
189600*    MOVE TEMP-DISPLAY-MSG(143:49) TO MSG-AREA(2:49).             18960099
189700*    PERFORM 9000-WRITE-CICS.                                     18970099
189800*    MOVE ' ' TO MSG-AREA.                                        18980099
189900*    MOVE TEMP-DISPLAY-MSG(192:49) TO MSG-AREA(2:49).             18990099
190000*    PERFORM 9000-WRITE-CICS.                                     19000099
190100*    MOVE ' ' TO MSG-AREA.                                        19010099
190200*    MOVE TEMP-DISPLAY-MSG(241:49) TO MSG-AREA(2:49).             19020099
190300*    PERFORM 9000-WRITE-CICS.                                     19030099
190400*    MOVE ' ' TO MSG-AREA.                                        19040099
190500*    MOVE TEMP-DISPLAY-MSG(290:49) TO MSG-AREA(2:49).             19050099
190600*    PERFORM 9000-WRITE-CICS.                                     19060099
190700*    MOVE ' ' TO MSG-AREA.                                        19070099
190800*    MOVE TEMP-DISPLAY-MSG(339:49) TO MSG-AREA(2:49).             19080099
190900*    PERFORM 9000-WRITE-CICS.                                     19090099
191000*    MOVE ' ' TO MSG-AREA.                                        19100099
191100*    MOVE TEMP-DISPLAY-MSG(388:49) TO MSG-AREA(2:49).             19110099
191200*    PERFORM 9000-WRITE-CICS.                                     19120099
191300*    MOVE ' ' TO MSG-AREA.                                        19130099
191400*    MOVE TEMP-DISPLAY-MSG(437:49) TO MSG-AREA(2:49).             19140099
191500*    PERFORM 9000-WRITE-CICS.                                     19150099
191600*    MOVE ' ' TO MSG-AREA.                                        19160099
191700*    MOVE TEMP-DISPLAY-MSG(486:49) TO MSG-AREA(2:49).             19170099
191800*    PERFORM 9000-WRITE-CICS.                                     19180099
191900*    MOVE ' ' TO MSG-AREA.                                        19190099
192000*    MOVE TEMP-DISPLAY-MSG(535:49) TO MSG-AREA(2:49).             19200099
192100*    PERFORM 9000-WRITE-CICS.                                     19210099
192200*    MOVE ' ' TO MSG-AREA.                                        19220099
192300*    MOVE TEMP-DISPLAY-MSG(584:49) TO MSG-AREA(2:49).             19230099
192400*    PERFORM 9000-WRITE-CICS.                                     19240099
192500*    MOVE ' ' TO MSG-AREA.                                        19250099
192600*    MOVE TEMP-DISPLAY-MSG(633:49) TO MSG-AREA(2:49).             19260099
192700*    PERFORM 9000-WRITE-CICS.                                     19270099
192800*    MOVE ' ' TO MSG-AREA.                                        19280099
192900*    MOVE TEMP-DISPLAY-MSG(682:49) TO MSG-AREA(2:49).             19290099
193000*    PERFORM 9000-WRITE-CICS.                                     19300099
193100*    MOVE ' ' TO MSG-AREA.                                        19310099
193200*    MOVE TEMP-DISPLAY-MSG(731:49) TO MSG-AREA(2:49).             19320099
193300*    PERFORM 9000-WRITE-CICS.                                     19330099
193400*    MOVE ' ' TO MSG-AREA.                                        19340099
193500*    MOVE TEMP-DISPLAY-MSG(780:49) TO MSG-AREA(2:49).             19350099
193600*    PERFORM 9000-WRITE-CICS.                                     19360099
193700*    MOVE ' ' TO MSG-AREA.                                        19370099
193800*    MOVE TEMP-DISPLAY-MSG(829:49) TO MSG-AREA(2:49).             19380099
193900*    PERFORM 9000-WRITE-CICS.                                     19390099
194000                                                                  19400099
194100***************************************************************   19410099
194200*  PARTIAL-MSG.                                               *   19420099
194300* DISPLAY A MESSAGE WHEN THERE IS A PARTIAL-MESSAGE PACKET.   *   19430099
194400* THIS SHOULD BE FOR TESTING PURPOSES ONLY.                   *   19440099
194500***************************************************************   19450099
194600 4992-PARTIAL-MSG.                                                19460099
194700*    MOVE '!*NEED MORE DATA, READ FOR H=' TO MSG-AREA.            19470099
194800*    MOVE TBL-DATA(SOCKNO)(1:18) TO MSG-AREA(30:18).              19480099
194900*    PERFORM 9000-WRITE-CICS.                                     19490099
195000*    MOVE '!' TO MSG-AREA.                                        19500099
195100*    MOVE TBL-DATA(SOCKNO)(19:64) TO MSG-AREA(2:45).              19510099
195200*    PERFORM 9000-WRITE-CICS.                                     19520099
195300*    MOVE '!*READ L: ' TO MSG-AREA.                               19530099
195400*    MOVE SAV-MSG-LEN TO DISP-MAX.                                19540099
195500*    MOVE DISP-MAX TO MSG-AREA(11:4).                             19550099
195600*    MOVE ',HEADER COUNT=' TO MSG-AREA(15:14).                    19560099
195700*    MOVE PV-MSG-LEN-WHDR TO DISP-MAX.                            19570099
195800*    MOVE DISP-MAX TO MSG-AREA(29:4).                             19580099
195900*    MOVE ',RETCODE=' TO MSG-AREA(33:9).                          19590099
196000*    MOVE RETCODE TO DISP-MAX.                                    19600099
196100*    MOVE DISP-MAX TO MSG-AREA(42:4).                             19610099
196200*    PERFORM 9000-WRITE-CICS.                                     19620099
196300                                                                  19630099
196400***************************************************************   19640099
196500* PROCESS-TIMEOUT                                             *   19650099
196600***************************************************************   19660099
196700 5000-PROCESS-TIMEOUT.                                            19670099
196800*                                                                 19680099
196900*       GO CHECK FOR DATA IN THE TCPIPPRQ                         19690099
197000*                                                                 19700099
197100     PERFORM 5100-READ-PRQ.                                       19710099
197200*                                                                 19720099
197300*       CALL THE READ OPTIONS TSQ ROUTINE EVERY 1 MINUTE          19730099
197400*                                                                 19740099
198100     IF TSTAMP > TSTAMP-SWQ THEN                                  19810099
198200        PERFORM 5400-READ-SWQ                                     19820099
198300        MOVE TSTAMP TO TSTAMP-SWQ                                 19830099
198400     END-IF.                                                      19840099
198500*                                                                 19850099
198600*       CALL THE DEAD-SOCKET CHECK ROUTINE EVERY 30 MINUTES       19860099
198700*       AND CLOSE ALL SOCKETS WITH NO ACTIVITY IN THE LAST        19870099
198800*       12 HOURS (720 MINUTES).                                   19880099
198900*                                                                 19890099
199000     IF TSTAMP > TSTAMP-DEAD THEN                                 19900099
199100        PERFORM 7050-DEAD-SOCKET                                  19910099
199200        MOVE TSTAMP TO TSTAMP-DEAD                                19920099
199300        ADD FULL-TIMEOUT-T30 TO TSTAMP-DEAD                       19930099
199400        MOVE FULL-TIMEOUT-T720 TO DEAD-TIMEOUT                    19940099
199500        PERFORM 7050-DEAD-SOCKET                                  19950099
199600     END-IF.                                                      19960099
199700*                                                                 19970099
199800****************************************************************  19980099
199900*   READ-PRQ                                                   *  19990099
200000*  THIS ROUTE WILL READ THE TCPIPPRQ TEMP STORAGE QUEUE FOR    *  20000099
200100*  RESPONSES BACK FROM THE AUTHORIZATION CHILD PROGRAMS AND    *  20010099
200200*  SEND THE RESPONSES BACK TO THE STORES.                      *  20020099
200300*  THIS ROUTINE KEEPS CALLING ITSELF UNTIL THERE ARE NO MORE   *  20030099
200400*  RECORDS TO PROCESS FROM THE TEMP STORAGE QUEUE.             *  20040099
200500*  RECORDS ARE NEVER DELETED FROM THE QUEUE, THEY ARE OVER-    *  20050099
200600*  WRITTEN.                                                    *  20060099
200700*  QUEUE FORMAT:                                               *  20070099
200800*  LINE 1: # OF NEXT RECORD TO BE WRITTEN TO THE QUEUE BY THE  *  20080099
200900*          CHILD PROGRAM, FOLLOWED BY THE TOTAL NUMBER OF      *  20090099
201000*          POSSIBLE ENTRIES IN THE QUEUE (1000)                *  20100099
201100*  LINE 2: # OF NEXT RECORD TO BE READ BY LISTENER FOLLOWED BY *  20110099
201200*          TOTAL NUMBER OF POSSIBLE ENTRIES IN THE QUEUE (1000)*  20120099
201300*  LINES 3 TO 1000: RESPONSES FROM CHILD PROGRAMS IN FORMAT    *  20130099
201400*                  TCP-BUF-OUT                                 *  20140099
201500*  LINES 1001 AND 1002: NEVER USED                             *  20150099
201600****************************************************************  20160099
201700 5100-READ-PRQ.                                                   20170099
201800                                                                  20180099
201900     PERFORM WITH TEST AFTER                                      20190099
202000             UNTIL TSQ-READ-COUNT = TSQ-WRITE-COUNT               20200099
202100** READ THE FIRST 2 LINES TO SEE WHAT THE NEXT RECORD IS FOR      20210099
202200** THE LISTENER TO READ, AND WHAT THE LAST RECORD WAS THAT        20220099
202300** THE CHILD PROGRAM WROTE OUT.                                   20230099
202400                                                                  20240099
202500** READ LINE 1 TO GET POSITION OF LAST RECORD WRITTEN             20250099
202600       MOVE 1 TO RECORD-TO-READ                                   20260099
202700*      MOVE 'READ-PRQ STARTED' TO MSG-AREA                        20270099
202800*      PERFORM 9000-WRITE-CICS                                    20280099
202900       MOVE LENGTH OF TCP-BUF-OUT TO SAV-MSG-LEN                  20290099
203000       EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TSQ-INDEX)         20300099
203100            NOHANDLE                                              20310099
203200          ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC       20320099
203300       MOVE TSQ-COUNT-1 TO TSQ-WRITE-COUNT                        20330099
203400       MOVE TSQ-COUNT-2 TO TSQ-TOTAL-RECORDS                      20340099
203500       MOVE 'WRITE=' TO MSG-AREA                                  20350099
203600       MOVE TSQ-COUNT-1 TO MSG-AREA(7:8)                          20360099
203700                                                                  20370099
203800** READ LINE 2 TO GET POSITION OF NEXT RECORD TO READ             20380099
203900       MOVE 2 TO RECORD-TO-READ                                   20390099
204000       EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TSQ-INDEX)         20400099
204100            NOHANDLE                                              20410099
204200            ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC     20420099
204300       MOVE TSQ-COUNT-1 TO TSQ-READ-COUNT                         20430099
204400                                                                  20440099
204500*      MOVE TSQ-INDEX(1:36) TO MSG-AREA(14:36)                    20450099
204600*      PERFORM 9000-WRITE-CICS                                    20460099
204700                                                                  20470099
204800** IF THE WRITE-COUNT FROM LINE 1 EQUALS THE READ-COUNT FROM      20480099
204900** LINE 2 THEN THERE ARE NO RECORDS TO PROCESS, SO EXIT.          20490099
205000** OTHERWISE, READ THE NEXT RESPONSE OFF THE QUEUE.               20500099
205100       IF NOT (TSQ-READ-COUNT = TSQ-WRITE-COUNT) THEN             20510099
205200          PERFORM 5200-READ-NEXT-RESPONSE                         20520099
205300       END-IF                                                     20530099
205400     END-PERFORM.                                                 20540099
205500                                                                  20550099
205600***************************************************************   20560099
205700* READ-NEXT-RESPONSE                                          *   20570099
205800*  READ THE NEXT RESPONSE TO PROCESS FROM THE QUEUE           *   20580099
205900***************************************************************   20590099
206000 5200-READ-NEXT-RESPONSE.                                         20600099
206100     MOVE TSQ-READ-COUNT TO RECORD-TO-READ.                       20610099
206200     EXEC CICS READQ TS QUEUE(TCPIPPRQ) INTO(TCP-BUF-OUT)         20620099
206300         NOHANDLE                                                 20630099
206400         ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN) END-EXEC.       20640099
206500                                                                  20650099
206600** UPDATE LINE 2 WITH THE NEXT RECORD NUMBER TO READ              20660099
206700                                                                  20670099
206800     ADD 1 TO TSQ-READ-COUNT.                                     20680099
206900     IF TSQ-READ-COUNT > TSQ-TOTAL-RECORDS                        20690099
207000        MOVE 3 TO TSQ-READ-COUNT                                  20700099
207100     END-IF.                                                      20710099
207200     MOVE TSQ-READ-COUNT TO TSQ-COUNT-1.                          20720099
207300     MOVE 2 TO RECORD-TO-READ.                                    20730099
207400     EXEC CICS WRITEQ TS QUEUE(TCPIPPRQ) FROM(TSQ-INDEX)          20740099
207500          ITEM(RECORD-TO-READ) LENGTH(SAV-MSG-LEN)                20750099
207600          NOHANDLE                                                20760099
207700          MAIN REWRITE END-EXEC.                                  20770099
207800                                                                  20780099
207900*    CHECK MESSAGE FOR CORRECT LENGTH.                            20790099
208000                                                                  20800099
208100     IF TCP-BUF-LEN < 12 THEN                                     20810099
208200        MOVE '!INVALID LEN ERROR' TO MSG-AREA                     20820099
208300        PERFORM 9000-WRITE-CICS                                   20830099
208400     ELSE                                                         20840099
208500*                                                                 20850099
208600*       FIND SOCKET THAT RESPONSE NEEDS TO GO OUT ON              20860099
208700*       BY SEARCHING FOR THE MATCHING NUMBER                      20870099
208800*                                                                 20880099
208900       MOVE 1 TO SOCKNO                                           20890099
209000       PERFORM UNTIL SOCKNO > MAX-SOCKETS-LESS1                   20900099
209100              OR TBL-ST-MATCHING(SOCKNO) = TCP-BUF-MATCHING       20910099
209200          ADD 1 TO SOCKNO                                         20920099
209300       END-PERFORM                                                20930099
209400                                                                  20940099
209500       IF TBL-ST-MATCHING(SOCKNO) = TCP-BUF-MATCHING THEN         20950099
209600                                                                  20960099
209700*        CHECK FOR DEAD/CLOSED SOCKET                             20970099
209800                                                                  20980099
209900         IF TBL-ST-AVAIL(SOCKNO) = 'Y' THEN                       20990099
210000*          A TRACE MESSAGE                                        21000099
210100           IF DISP-MSGS > 0                                       21010099
210200             MOVE SOCKNO            TO DISP-DEAD-MATCH-SOCK       21020099
210300             MOVE TCP-BUF-MATCHING  TO DISP-DEAD-MATCH-NUMB       21030099
210400             MOVE DISP-DEAD-MATCH   TO MSG-AREA                   21040099
210500             PERFORM 9000-WRITE-CICS                              21050099
210600           END-IF                                                 21060099
210700         ELSE                                                     21070099
210800           PERFORM 5300-SEND-RESPONSE                             21080099
210900         END-IF                                                   21090099
211000       ELSE                                                       21100099
211100*                                                                 21110099
211200*       CANNOT FIND SOCKET THAT RESPONSE NEEDS TO GO OUT ON       21120099
211300*                                                                 21130099
211400         MOVE '!NO MATCH ON KEY' TO MSG-AREA                      21140099
211500         MOVE TCP-BUF-MATCHING TO MSG-AREA(18:8)                  21150099
211600         PERFORM 9000-WRITE-CICS                                  21160099
211700         MOVE '!' TO MSG-AREA(1:1)                                21170099
211800         MOVE TCP-BUF-OUT TO MSG-AREA(2:49)                       21180099
211900         PERFORM 9000-WRITE-CICS                                  21190099
212000       END-IF                                                     21200099
212100     END-IF.                                                      21210099
212200                                                                  21220099
212300***************************************************************   21230099
212400* SEND-RESPONSE                                               *   21240099
212500*  THIS ROUTINE WILL SEND THE RESPONSE BACK TO THE SOCKET THAT*   21250099
212600*  SENT THE ORIGINAL MESSAGE.                                 *   21260099
212700***************************************************************   21270099
212800 5300-SEND-RESPONSE.                                              21280099
212900                                                                  21290099
213000     MOVE TSTAMP TO TBL-TSTAMP(SOCKNO).                           21300099
213100                                                                  21310099
213200* A TRACE MESSAGE                                                 21320099
213300     IF DISP-MSGS > 0                                             21330099
213310       MOVE SPACES TO MSG-AREA                                    21331099
213320       MOVE '** SENDING RESPONSE TO AJB SERVER **'                21332099
213321        TO MSG-AREA                                               21332199
213330       PERFORM 9000-WRITE-CICS                                    21333099
213400       MOVE SPACES TO MSG-AREA                                    21340099
213500       MOVE 'RESPONSE  ' TO CALL-NO                               21350099
213600       MOVE 'SOCKET=' TO FIELDXX                                  21360099
213700       MOVE SOCKNO TO ERR-CODE                                    21370099
213800       MOVE 'MATCH= ' TO FIELDYY                                  21380099
213900       MOVE TCP-BUF-MATCHING TO DIS-RET-CODE                      21390099
214000       PERFORM 9000-WRITE-CICS                                    21400099
214100     END-IF.                                                      21410099
214110* A TRACE MESSAGE                                                 21411099
214120     IF DISP-MSGS > 0 THEN                                        21412099
214130        PERFORM VARYING WSCT FROM 1 BY 50                         21413099
214140                 UNTIL WSCT > TCP-BUF-LEN                         21414099
214150           MOVE TCP-BUF-REC(WSCT:50) TO MSG-AREA                  21415099
214160           PERFORM 9000-WRITE-CICS                                21416099
214170        END-PERFORM                                               21417099
214180     END-IF.                                                      21418099
214200                                                                  21420099
214300* CONVERT OUTGOING MESSAGE TO ASCII                               21430099
216200* convert to ascii all but the first 2 bytes hex length           21620099
216300* Note: TCP-BUF-LEN = length of message to be sent.               21630099
216400     COMPUTE PV-CONVERT-LEN = TCP-BUF-LEN - 2.                    21640099
216500     CALL 'EZACIC04' USING TOASCII-TOKEN TCP-BUF-R                21650099
216600                           PV-CONVERT-LEN.                        21660099
216700                                                                  21670099
216800* A TRACE MESSAGE                                                 21680099
216900     IF DISP-MSGS > 0                                             21690099
217000       MOVE 'ASCI=' TO MSG-AREA                                   21700099
217100       MOVE TCP-BUF-REC(1:44) TO MSG-AREA(6:44)                   21710099
217200       PERFORM 9000-WRITE-CICS                                    21720099
217300     END-IF.                                                      21730099
217400                                                                  21740099
217500* ISSUE SEND COMMAND                                              21750099
217600                                                                  21760099
217700     MOVE TCP-BUF-LEN TO PV-CONVERT-LEN.                          21770099
217800     MOVE SOCKNO TO SOCKID.                                       21780099
217900     MOVE 0 TO ERRNO.                                             21790099
218000     MOVE 0 TO RETCODE.                                           21800099
218100                                                                  21810099
218200     CALL 'EZASOKET' USING WRITE-CMD SOCKID PV-CONVERT-LEN        21820099
218300           TCP-BUF-REC ERRNO RETCODE.                             21830099
218400                                                                  21840099
218500     IF RETCODE <  0 THEN                                         21850099
218600        MOVE '!TCPSEND ERROR WRITING MSG TO CLIENT' TO MSG-AREA   21860099
218700        PERFORM 9000-WRITE-CICS                                   21870099
218800        MOVE SPACES TO MSG-AREA                                   21880099
218900        MOVE 'SEND' TO CALL-NO                                    21890099
219000        MOVE 'ER-CODE' TO FIELDXX                                 21900099
219100        MOVE ERRNO TO ERR-CODE                                    21910099
219200        MOVE 'RET-CD=' TO FIELDYY                                 21920099
219300        MOVE RETCODE TO DIS-RET-CODE                              21930099
219400        PERFORM 9000-WRITE-CICS                                   21940099
219500     ELSE                                                         21950099
219700*       ADD 1 TO SEND-COUNT                                       21970099
219800        ADD 1 TO TBL-ST-SEND(SOCKNO)                              21980099
219810* WRITE OUT A TRACE MESSAGE                                       21981099
219900       IF DISP-MSGS > 0                                           21990099
219910        MOVE SPACES TO MSG-AREA                                   21991099
219920        MOVE 'SENT:' TO CALL-NO                                   21992099
219930        MOVE 'HEADER=' TO FIELDXX                                 21993099
219940*      CONVERTING MESSAGE LENGTH FROM HEX TO DECIMAL HERE         21994099
219950        MOVE TCP-BUF-HEX-LEN TO PV-CONVRT-MSGLEN-HEX              21995099
219960        MOVE PV-CONVRT-MSGLEN-COMP TO PV-CONVRT-MSGLEN-INT        21996099
219970        MOVE PV-CONVRT-MSGLEN-INT TO ERR-CODE                     21997099
219980        MOVE 'RET-CD=' TO FIELDYY                                 21998099
219990        MOVE RETCODE TO DIS-RET-CODE                              21999099
219991        PERFORM 9000-WRITE-CICS                                   21999199
220000        MOVE '** RESPONSE SUCCESSFULLY SENT TO AJB SERVER **'     22000099
220100          TO MSG-AREA                                             22010099
220110        PERFORM 9000-WRITE-CICS                                   22011099
221200       END-IF                                                     22120099
221300     END-IF.                                                      22130099
221400                                                                  22140099
221500***************************************************************   22150099
221600*  READ-SWQ.                                                  *   22160099
221700*  THIS ROUTE READS THE TCPIPSWQ TEMP STORAGE QUEUE TO CHECK  *   22170099
221800*  ON TRACE, NOTRACE OR CANCEL OPTIONS                        *   22180099
221900***************************************************************   22190099
222000 5400-READ-SWQ.                                                   22200099
222100* A TRACE MESSAGE                                                 22210099
222200     IF DISP-MSGS > 0                                             22220099
222300       MOVE 'PERFORMING READ-SWQ' TO MSG-AREA                     22230099
222400       PERFORM 9000-WRITE-CICS                                    22240099
222500     END-IF.                                                      22250099
222600     PERFORM VARYING RECORD-TO-READ FROM 1 BY 1                   22260099
222700                     UNTIL RECORD-TO-READ >= 99                   22270099
222800        MOVE 80 TO RTSQ-LEN                                       22280099
222900        EXEC CICS READQ TS QUEUE(TCPIPSWQ) INTO(TCP-BUF)          22290099
223000             ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN) END-EXEC       22300099
223100        IF TCP-BUF(1:5) = 'TRACE' THEN                            22310099
223200           MOVE TCP-BUF(12:4) TO DISP-MSGS                        22320099
223300           IF DISP-MSGS = 0 THEN                                  22330099
223400              MOVE 9999 TO DISP-MSGS                              22340099
223500              MOVE SPACES TO TCP-BUF                              22350099
223600              EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ)                 22360099
223700                   FROM(TCP-BUF)                                  22370099
223800                   ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN)          22380099
223900                   MAIN REWRITE END-EXEC                          22390099
224000           END-IF                                                 22400099
224100        END-IF                                                    22410099
224200        IF TCP-BUF(1:7) = 'NOTRACE' THEN                          22420099
224300           MOVE 0 TO DISP-MSGS                                    22430099
224400           MOVE SPACES TO TCP-BUF                                 22440099
224500           EXEC CICS WRITEQ TS QUEUE(TCPIPSWQ)                    22450099
224600                   FROM(TCP-BUF)                                  22460099
224700                   ITEM(RECORD-TO-READ) LENGTH(RTSQ-LEN)          22470099
224800                   MAIN REWRITE END-EXEC                          22480099
224900        END-IF                                                    22490099
225000        IF TCP-BUF(1:6) = 'CANCEL' THEN                           22500099
225100           MOVE '!TRANSACTION CANCEL BY IPSW' TO MSG-AREA         22510099
225200           PERFORM 9000-WRITE-CICS                                22520099
225300           PERFORM 9990-PGM-EXIT                                  22530099
225400        END-IF                                                    22540099
225500     END-PERFORM.                                                 22550099
225600                                                                  22560099
225700***************************************************************   22570099
225800* CHAR-TO-BIT                                                 *   22580099
225900* CONVERT THE CHARACTER ARRAY TO A SELECT BIT MASK SO THAT THE*   22590099
226000* COBOL PROGRAM CAN WRITE IT.                                 *   22600099
226100***************************************************************   22610099
226200 7000-CHAR-TO-BIT.                                                22620099
226300     CALL 'EZACIC06' USING BITMASK-TOKEN CTOB                     22630099
226400          BIT-MASK CHAR-MASK BIT-MASK-LENGTH EZRETC               22640099
226500     IF EZRETC < 0 THEN                                           22650099
226600        MOVE '!EZCIC06 - CTOB-EXCP ' TO MSG-AREA                  22660099
226700        PERFORM 9000-WRITE-CICS                                   22670099
226800        PERFORM 9990-PGM-EXIT                                     22680099
226900     END-IF.                                                      22690099
227000                                                                  22700099
227100***************************************************************   22710099
227200* BIT-TO-CHAR                                                 *   22720099
227300* CONVERT THE SELECT BIT MASK TO A CHARACTER ARRAY SO THAT    *   22730099
227400* THIS COBOL PROGRAM CAN READ IT.                             *   22740099
227500***************************************************************   22750099
227600 7010-BIT-TO-CHAR.                                                22760099
227700     CALL 'EZACIC06' USING BITMASK-TOKEN BTOC BIT-MASK            22770099
227800         CHAR-MASK BIT-MASK-LENGTH EZRETC.                        22780099
227900     IF EZRETC < 0 THEN                                           22790099
228000        MOVE '!EZCIC06 - BTOC-EXCP ' TO MSG-AREA                  22800099
228100        PERFORM 9000-WRITE-CICS                                   22810099
228200        PERFORM 9990-PGM-EXIT                                     22820099
228300     END-IF.                                                      22830099
228400                                                                  22840099
228500***************************************************************   22850099
228600*  VALID-IPADDR                                               *   22860099
228700*  VALIDATE THE IP ADDR REQUESTING A SOCKET                   *   22870099
228800***************************************************************   22880099
228900 7030-VALID-IPADDR.                                               22890099
229000                                                                  22900099
229100********  GET THE TCPIP OF THE MERCHANT  **************           22910099
229200     PERFORM 7040-CONVERT-IP-ADDR.                                22920099
229300     MOVE SOCKNO TO DISP-OPEN-SOKT.                               22930099
229400     MOVE MATCHING-NUMB TO DISP-OPEN-NUMB.                        22940099
229500     MOVE CIP-1 TO DISP-OPEN-CIP-1.                               22950099
229600     MOVE CIP-2 TO DISP-OPEN-CIP-2.                               22960099
229700     MOVE CIP-3 TO DISP-OPEN-CIP-3.                               22970099
229800     MOVE CIP-4 TO DISP-OPEN-CIP-4.                               22980099
229900     MOVE 0 TO WSCT.                                              22990099
230000                                                                  23000099
230100*  THIS LOOP WILL DISPLAY THE NUMBER OF SOCKETS IN USE.           23010099
230200*  THE IF CHECK WILL ONLY PERFORM THIS IF TRACING IS              23020099
230300*  TURNED ON. NO NEED TO SPIN THROUGH 100  TIMES IF               23030099
230400*  THE RESULT IS NOT GOING TO BE DISPLAYED.                       23040099
230500     IF DISP-MSGS > 0                                             23050099
230600       PERFORM VARYING TSOCKET                                    23060099
230700               FROM 1 BY 1 UNTIL TSOCKET > MAX-SOCKETS-LESS1      23070099
230800          IF TBL-ST-AVAIL(TSOCKET) NOT = 'Y' THEN                 23080099
230900             ADD 1 TO WSCT                                        23090099
231000          END-IF                                                  23100099
231100       END-PERFORM                                                23110099
231200       MOVE WSCT TO DISP-OPEN-CIP-ACT                             23120099
231300       MOVE DISP-OPEN-MSG TO MSG-AREA                             23130099
231400       PERFORM 9000-WRITE-CICS                                    23140099
231500     END-IF.                                                      23150099
231600                                                                  23160099
231700     MOVE 0 TO EZRETC.                                            23170099
231800                                                                  23180099
231900***************************************************************** 23190099
232000* CONVERT-IP-ADDR                                               * 23200099
232100* THIS ROUTE WILL CONVERT THE TCP/IP ADDRESS TO A DISPLAYABLE   * 23210099
232200* FORMAT.                                                       * 23220099
232300*     INPUT = ACCEPT-IP-ADDR  - ADDRESS TO CONVERT              * 23230099
232400*     OUTPUT = HD-1, HD-2, HD-3 AND HD-4.                       * 23240099
232500***************************************************************** 23250099
232600 7040-CONVERT-IP-ADDR.                                            23260099
232700                                                                  23270099
232800     COMPUTE CIP-1 = (ACCEPT-IP-ADDR / 16777216).                 23280099
232900     COMPUTE CIP-4 = ACCEPT-IP-ADDR - (CIP-1 * 16777216).         23290099
233000     COMPUTE CIP-2 = CIP-4 / 65536.                               23300099
233100     COMPUTE CIP-4 = CIP-4 - (CIP-2 * 65536).                     23310099
233200     COMPUTE CIP-3 = CIP-4 / 256.                                 23320099
233300     COMPUTE CIP-4 = CIP-4 - (CIP-3 * 256).                       23330099
233400*                                                              *  23340099
233500* THE FOLLOWING "IF CIP-1 < 0" ADDED TO ALLOW FOR IP ADDRESSES *  23350099
233600* STARTING WITH 0. THRU 127.  (KOHLS NEW ADDRESSES ARE 10.42..)*  23360099
233700*                                 D.DREW 3/10/99               *  23370099
233800*                                                              *  23380099
233900     IF CIP-1 < 0 THEN                                            23390099
234000        COMPUTE CIP-1 = 255 + CIP-1                               23400099
234100        COMPUTE CIP-2 = 255 + CIP-2                               23410099
234200        COMPUTE CIP-3 = 255 + CIP-3                               23420099
234300        COMPUTE CIP-4 = 256 + CIP-4                               23430099
234400     END-IF.                                                      23440099
234500                                                                  23450099
234600************************************************************      23460099
234700*  DEAD-SOCKET                                             *      23470099
234800*  THIS ROUTE WILL CLOSE ALL SOCKETS THAT HAVE BEEN        *      23480099
234900*  INACTIVE FOR MORE THAN 720 MINUTES (12 HOURS).          *      23490099
235000*  NOTE: TSTAMP IS IN UNITS OF 1 MINUTE.                   *      23500099
235100************************************************************      23510099
235200 7050-DEAD-SOCKET.                                                23520099
235300* A TRACE MESSAGE                                                 23530099
235400     IF DISP-MSGS > 0                                             23540099
235500       MOVE 'PERFORMING DEAD-SOCKET ROUTINE' TO MSG-AREA          23550099
235600       PERFORM 9000-WRITE-CICS                                    23560099
235700     END-IF.                                                      23570099
235800                                                                  23580099
235900     COMPUTE SSTAMP = TSTAMP - DEAD-TIMEOUT.                      23590099
236000                                                                  23600099
236100     PERFORM VARYING TSOCKET FROM 1 BY 1                          23610099
236200              UNTIL TSOCKET > MAX-SOCKETS-LESS1                   23620099
236300        IF TBL-ST-AVAIL(TSOCKET) = 'N' THEN                       23630099
236400           IF TBL-TSTAMP(TSOCKET) <= SSTAMP                       23640099
236500             AND TBL-TSTAMP(TSOCKET) NOT = 0                      23650099
236600              MOVE TSOCKET TO SEARCH-MSG-COUNT                    23660099
236700              MOVE SEARCH-MSG-ERR TO MSG-AREA                     23670099
236800              PERFORM 9000-WRITE-CICS                             23680099
236900              MOVE TSTAMP TO DEAD-S-2                             23690099
237000              MOVE TBL-TSTAMP(TSOCKET) TO DEAD-S-4                23700099
237100              MOVE DEAD-S TO MSG-AREA                             23710099
237200              PERFORM 9000-WRITE-CICS                             23720099
237300              MOVE TSOCKET TO SOCKNO                              23730099
237400              PERFORM 7060-CLOSE-SOCKET                           23740099
237500           END-IF                                                 23750099
237600        END-IF                                                    23760099
237700     END-PERFORM.                                                 23770099
237800                                                                  23780099
237900***************************************************************** 23790099
238000* CLOSE-SOCKET.                                                 * 23800099
238100*   CLOSE 'ACCEPT DESCRIPTOR'                                   * 23810099
238200***************************************************************** 23820099
238300 7060-CLOSE-SOCKET.                                               23830099
238400*                                                                 23840099
238500*  CLEAR THE READ AND EXCEPTION BIT MAPS FOR SELECT               23850099
238600*                                                                 23860099
238700     MOVE SOCKNO TO SOCKID.                                       23870099
238800                                                                  23880099
238900*    VALID SOCKETS ARE ONLY > 0                                   23890099
239000     IF SOCKID = 0 THEN                                           23900099
239100        MOVE '!SOCKID FOR RECV CLOSE = 0' TO MSG-AREA             23910099
239200        PERFORM 9000-WRITE-CICS                                   23920099
239300     ELSE                                                         23930099
239400       MOVE SELECT-RD-MASK TO BIT-MASK                            23940099
239500       PERFORM 7010-BIT-TO-CHAR                                   23950099
239600                                                                  23960099
239700*      MOVE CHAR-MASK TO MSG-AREA                                 23970099
239800*      PERFORM 9000-WRITE-CICS                                    23980099
239900*                                                                 23990099
240000*       NEED TO TURN OFF BIT FOR SELECT FOR THIS SOCKET           24000099
240100*                                                                 24010099
240200       COMPUTE WSCT = SOCKID + 1                                  24020099
240300       MOVE '0' TO CHAR-ENTRY(WSCT)                               24030099
240400                                                                  24040099
240500*      MOVE CHAR-MASK TO MSG-AREA                                 24050099
240600*      PERFORM 9000-WRITE-CICS                                    24060099
240700                                                                  24070099
240800       PERFORM 7000-CHAR-TO-BIT                                   24080099
240900       MOVE BIT-MASK TO SELECT-RD-MASK                            24090099
241000*      MOVE BIT-MASK TO SELECT-EX-MASK                            24100099
241100                                                                  24110099
241200       MOVE 0 TO ERRNO                                            24120099
241300       MOVE 0 TO RETCODE                                          24130099
241400                                                                  24140099
241500       CALL 'EZASOKET' USING CLOSE-CMD SOCKID                     24150099
241600             ERRNO RETCODE                                        24160099
241700                                                                  24170099
241800       IF RETCODE < 0 THEN                                        24180099
241900          MOVE ' CLOSE ERROR ON RECV SOCKET' TO MSG-AREA          24190099
242000          PERFORM 9000-WRITE-CICS                                 24200099
242100       END-IF                                                     24210099
242200                                                                  24220099
242300       MOVE SOCKID TO CLOS-SOCKT                                  24230099
242400       MOVE ERRNO TO CLOS-SOCKT-ERR                               24240099
242500       MOVE CLOS-ERR-MSG TO MSG-AREA                              24250099
242600       PERFORM 9000-WRITE-CICS                                    24260099
242700*                                                                 24270099
242800*         GET THE TCPIP OF THE MERCHANT                           24280099
242900*                                                                 24290099
243000       MOVE TBL-SOCKADDR-IN(SOCKNO) TO ACCEPT-NAME                24300099
243100       PERFORM 7040-CONVERT-IP-ADDR                               24310099
243200                                                                  24320099
243300       MOVE SOCKNO TO DISP-TRAN-STORE                             24330099
243400       MOVE CIP-1 TO DIS-RT-1                                     24340099
243500       MOVE CIP-2 TO DIS-RT-2                                     24350099
243600       MOVE CIP-3 TO DIS-RT-3                                     24360099
243700       MOVE CIP-4 TO DIS-RT-4                                     24370099
243800       MOVE TBL-ST-RECV(SOCKNO) TO DISP-TRAN-NUMB                 24380099
243900       MOVE TBL-ST-SEND(SOCKNO) TO DISP-TRAN-NUMBS                24390099
244000       MOVE DISP-TRAN-COUNT TO MSG-AREA                           24400099
244100       PERFORM 9000-WRITE-CICS                                    24410099
244200                                                                  24420099
244300       MOVE 'Y' TO TBL-ST-AVAIL(SOCKNO)                           24430099
244400                                                                  24440099
244500*                                                             *   24450099
244600* RESET TBL-DATA-CNT WHEN CLOSING A SOCKET - NEW SOCKET USING *   24460099
244700*                                                             *   24470099
244800       MOVE 1 TO TBL-DATA-CNT(SOCKNO)                             24480099
244900       MOVE SPACES TO TBL-DATA(SOCKNO)                            24490099
245000                                                                  24500099
245100     END-IF.                                                      24510099
245200                                                                  24520099
245300****************************************************************  24530099
245400*   READ-HEADER-LENGTH                                         *  24540099
245500*  CONVERT THE 2 BYTE HEX HEADER LENGTH TO AN INTEGER AND      *  24550099
245600*  CHECK TO SEE IF IT IS A VALID VALUE (BETWEEN 1 AND 500).    *  24560099
245700*  THE HEADER LENGTH DOES NOT INCLUDE THE HEADER ITSELF.       *  24570099
245800*  IT HAS TO BE AT LEAST 1 BECAUSE YOU WOULDN'T SEND AN EMPTY  *  24580099
245900*  MESSAGE, AND IF ITS MORE THAN 500, THEN YOU PROBABLY HAVE   *  24590099
246000*  INVALID DATA IN THE HEADER POSITIONS.  IF YOU EXPECT        *  24600099
246100*  MESSAGES BIGGER THAN 500 BYTES, THEN CHANGE                 *  24610099
246200*  THE VALUE OF PC-MAX-MSG-LEN.                                *  24620099
246300****************************************************************  24630099
246400 7900-READ-HEADER-LENGTH.                                         24640099
246500     MOVE 'N' TO HEADER-ERROR.                                    24650099
246600     MOVE PV-CONVRT-MSGLEN-COMP TO PV-MSG-LEN-WOHDR.              24660099
246700     IF PV-MSG-LEN-WOHDR > PC-MAX-MSG-LEN                         24670099
246800       OR PV-MSG-LEN-WOHDR < PC-MIN-MSG-LEN                       24680099
246900        MOVE 'Y' TO HEADER-ERROR                                  24690099
247000     ELSE                                                         24700099
247100        COMPUTE PV-MSG-LEN-WHDR = PV-MSG-LEN-WOHDR + 2            24710099
247200     END-IF.                                                      24720099
247300                                                                  24730099
247400****************************************************************  24740099
247500*   WRITE-CICS                                                 *  24750099
247600*  THIS ROUTE WRITES OUT A LOG MESSAGE ON THE CICS OUTPUT      *  24760099
247700*  TRANSIENT DATA QUEUE.                                       *  24770099
247800*                                                              *  24780099
247900****************************************************************  24790099
248000 9000-WRITE-CICS.                                                 24800099
248100                                                                  24810099
248200     IF MSG-AREA(1:1) = '!' OR DISP-MSGS > 0                      24820099
248300        MOVE LENGTH OF TCPCICS-MSG-AREA TO CLENG                  24830099
248400        EXEC CICS ASKTIME ABSTIME(DSTAMP) NOHANDLE END-EXEC       24840099
248500        EXEC CICS FORMATTIME ABSTIME(DSTAMP) MMDDYY(MSGDATE)      24850099
248600             TIME(MSGTIME) DATESEP TIMESEP(':') NOHANDLE END-EXEC 24860099
248700        MOVE IP-LISTENER-TRAN TO MODULE                           24870099
248800        MOVE PV-HOLD-PORT TO MSG-PORT                             24880099
248900        EXEC CICS WRITEQ TD QUEUE('CSSL') FROM (TCPCICS-MSG-AREA) 24890099
249000             RESP(PV-RESPONSE) LENGTH(CLENG) END-EXEC             24900099
249100     END-IF.                                                      24910099
249200                                                                  24920099
249300     IF DISP-MSGS > 0 AND DISP-MSGS < 9999                        24930099
249400        SUBTRACT 1 FROM DISP-MSGS.                                24940099
249500     MOVE SPACES TO MSG-AREA.                                     24950099
249600                                                                  24960099
249700 EJECT                                                            24970099
249800*---------------------------------------------------------------* 24980099
249900*                                                               * 24990099
250000*  CONTROL IS GIVEN TO THE FOLLOWING ERROR ROUTINES BY 'HANDLES'* 25000099
250100*  ISSUED AT THE BEGINNING OF THE PROGRAM.                      * 25010099
250200*                                                               * 25020099
250300*---------------------------------------------------------------* 25030099
250400* N.B.  WE CAN NOT EXIT IF ERROR, WE MUST ONLY EXIT IF            25040099
250500*       THERE ARE NO SOCKETS IN THE TABLE TO SERVICE ! ! !        25050099
250600*       CHANGE THE LOGIC BELOW                                    25060099
250700                                                                  25070099
250800 9010-INVREQ-ERR-SEC.                                             25080099
250900     MOVE '!INTERFACE IS NOT ACTIVE' TO MSG-AREA.                 25090099
251000     PERFORM 9000-WRITE-CICS.                                     25100099
251100     PERFORM 9990-PGM-EXIT.                                       25110099
251200                                                                  25120099
251300 9020-IOERR-SEC.                                                  25130099
251400     MOVE '!IOERR OCCURS           ' TO MSG-AREA.                 25140099
251500     PERFORM 9000-WRITE-CICS.                                     25150099
251600     PERFORM 9990-PGM-EXIT.                                       25160099
251700                                                                  25170099
251800 9030-QZERO-SEC.                                                  25180099
251900     MOVE '!QZERO OCCURRS          ' TO MSG-AREA.                 25190099
252000     PERFORM 9000-WRITE-CICS.                                     25200099
252100     PERFORM 9990-PGM-EXIT.                                       25210099
252200                                                                  25220099
252300 9040-LENGERR-SEC.                                                25230099
252400     MOVE '!*IPSW* LENGTH ERROR READING TD QUEUE' TO MSG-AREA.    25240099
252500     PERFORM 9000-WRITE-CICS.                                     25250099
252600     MOVE '!' TO MSG-AREA.                                        25260099
252700     MOVE 'L =    ' TO FIELDXX.                                   25270099
252800     MOVE SAV-MSG-LEN     TO ERR-CODE.                            25280099
252900     MOVE ', RC = ' TO FIELDYY.                                   25290099
253000     MOVE PV-RC    TO DIS-RET-CODE.                               25300099
253100     MOVE '****' TO CALL-NO.                                      25310099
253200     PERFORM 9000-WRITE-CICS.                                     25320099
253300     PERFORM 9990-PGM-EXIT.                                       25330099
253400                                                                  25340099
253500 9050-NOSPACE-ERR-SEC.                                            25350099
253600     MOVE '!NOSPACE CONDITION      ' TO MSG-AREA.                 25360099
253700     PERFORM 9000-WRITE-CICS.                                     25370099
253800     PERFORM 9990-PGM-EXIT.                                       25380099
253900                                                                  25390099
254000 9060-QIDERR-SEC.                                                 25400099
254100     MOVE '!QIDERR  CONDITION      ' TO MSG-AREA.                 25410099
254200     PERFORM 9000-WRITE-CICS.                                     25420099
254300     PERFORM 9990-PGM-EXIT.                                       25430099
254400                                                                  25440099
254500 9070-ITEMERR-SEC.                                                25450099
254600     MOVE '!ITEMERR ERROR          ' TO MSG-AREA.                 25460099
254700     PERFORM 9000-WRITE-CICS.                                     25470099
254800     PERFORM 9990-PGM-EXIT.                                       25480099
254900                                                                  25490099
255000 9080-ENDDATA-SEC.                                                25500099
255100     MOVE '!RETRIEVE DATA CAN NT BE FOUND' TO MSG-AREA.           25510099
255200     PERFORM 9000-WRITE-CICS.                                     25520099
255300     PERFORM 9990-PGM-EXIT.                                       25530099
255400                                                                  25540099
255500 9090-TCP-TRUE-REQ.                                               25550099
255600     MOVE '!CAN NOT START SERVER..TRUE NOT ACTIVE' TO MSG-AREA.   25560099
255700     PERFORM 9000-WRITE-CICS.                                     25570099
255800     PERFORM 9990-PGM-EXIT.                                       25580099
255900                                                                  25590099
256000***************************************************************   25600099
256100* PGM-EXIT.                                                   *   25610099
256200*  THIS ROUTINE WILL OUTPUT A MESSAGE TO THE CICS LOG AND     *   25620099
256300*  TERMINATE THIS PROGRAM.                                    *   25630099
256400***************************************************************   25640099
256500 9990-PGM-EXIT.                                                   25650099
256600                                                                  25660099
256700     MOVE '!END OF THIS TRANSACTION' TO MSG-AREA.                 25670099
256800     PERFORM 9000-WRITE-CICS.                                     25680099
256900*                                                                 25690099
257000*       IF ERROR, CLOSE ALL OPEN SOCKETS                          25700099
257100*                                                                 25710099
257200     PERFORM VARYING SOCKNO FROM 1 BY 1                           25720099
257300                        UNTIL SOCKNO > MAX-SOCKETS-LESS1          25730099
257400        IF TBL-ST-AVAIL(SOCKNO) = 'N' THEN                        25740099
257500           PERFORM 7060-CLOSE-SOCKET                              25750099
257600        END-IF                                                    25760099
257700     END-PERFORM.                                                 25770099
257800*                                                                 25780099
257900*      CLOSE UP THE PORT                                          25790099
258000*                                                                 25800099
258100     MOVE 0 TO SOCKID.                                            25810099
258200     MOVE 0 TO ERRNO.                                             25820099
258300     MOVE 0 TO RETCODE.                                           25830099
258400     CALL 'EZASOKET' USING CLOSE-CMD SOCKID                       25840099
258500           ERRNO RETCODE.                                         25850099
258600                                                                  25860099
258700     IF STARTUP-AGAIN = 'Y' THEN                                  25870099
258800        EXEC CICS DELAY INTERVAL(05) END-EXEC                     25880099
258900        EXEC CICS START TRANSID(IP-LISTENER-TRAN)                 25890099
259000                           FROM(PV-HOLD-PORT)                     25900099
259100        END-EXEC                                                  25910099
259200     END-IF.                                                      25920099
259300                                                                  25930099
259400     EXEC CICS RETURN  END-EXEC.                                  25940099
259500 EJECT                                                            25950099
259600*                                                                 25960099
