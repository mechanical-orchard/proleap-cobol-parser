/* REXX */                                                                      
                                                                                
/*********************************************************************/         
/* NOTE: Use the Execution Control Variables to set up for testing   */         
/*       (similar to OPREP14)                                        */         
/*********************************************************************/         
                                                                                
/****************************************************************/              
/* CMKRX002 - PRODUCTION DATA CHANGE REQUEST RELEASE/EXECUTION  */              
/*            (automation execution version of OPREP14)         */              
/*                                                              */              
/* This program will facilitate all validation of requests for  */              
/* the automated execution of staged Production Data Change     */              
/* requests, and prepare the release/execution JCL.  All        */              
/* validation is performed as it would be done by the ISPF      */              
/* release panel, but validation failures will now cause the    */              
/* program to abend and post the reason for failure in the      */              
/* sysout.  The CMK900 execution JCL is formed from reading in  */              
/* model production CMK900 job JCL, and substituting all the    */              
/* data elements to create the job JCL required to execute the  */              
/* specific Production Data Change request.                     */              
/*                                                              */              
/* This program must remain in sync with the OPREP14 ISPF       */              
/* clist.  The same dataset reference techniques will be used   */              
/* for greater consistency with the primary process.            */              
/*                                                              */              
/* Parameter list:                                              */              
/*                                                              */              
/*     Production Data Change SQL member name                   */              
/*                                                              */              
/* Control information and SQL member statistics used in        */              
/* validation and execution:                                    */              
/*                                                              */              
/*      ZLUSER = User id to last change member.                 */              
/*      ZLC4DATE = Creation date.                               */              
/*      ZLM4DATE = Last change date.                            */              
/*      ZLMTIME = Last change time.                             */              
/*                                                              */              
/****************************************************************/              
                                                                                
/**********************************************************************/        
/* Accept parameters.                                                 */        
/**********************************************************************/        
ARG SQLMEM                                                                      
/*********************************************************************/         
/* Execution Control Variables - Set to toggle between Production    */         
/*                               needs and Testing needs             */         
/*********************************************************************/         
DBMODE = P     /* P = PRODUCTION DB SUBSYS T = TEST DB SUBSYS        */         
JOBMODE = P    /* P = PRODUCTION JOB NAME  T = USERID-BASED JOB NAME */         
DSNDEFN = P    /* P = PRODUCTION DSNs      T = TEST DSNs             */         
/*********************************************************************/         
/* Initialize local variables.                                       */         
/*********************************************************************/         
CURRUID = 'SERVNOW '  /* fixed, rather than SYSVAR("SYSUID") */                 
STAGE_PDS = 'QKMO.CM.PRODDATA.SQL.STAGE'                                        
DID1 = ''                                                                       
DID1_RC = 8                                                                     
STAGEMBR = ''                                                                   
REQCOUNT = 0                                                                    
CNTL_ONLY_COUNT = 0                                                             
CNTL_PDS = 'QKMO.CM.PRODDATA.SQL.STAGE.CNTL'                                    
DID2 = ''                                                                       
DID2_RC = 8                                                                     
CNTLRCD = ''                                                                    
CNTLLEN = 120                                                                   
SQL_ZLUSER = ''                                                                 
SQL_ZLC4DATE = ''                                                               
SQL_ZLM4DATE = ''                                                               
SQL_ZLMTIME = ''                                                                
SQL_CNTL_MBR = ''                                                               
SQL_CNTL_ZLUSER = ''                                                            
SQL_CNTL_ZLC4DATE = ''                                                          
SQL_CNTL_ZLM4DATE = ''                                                          
SQL_CNTL_ZLMTIME = ''                                                           
TIMESTAMP_SECURITY_MATCH = 'N'                                                  
IF (DSNDEFN = 'T') THEN DO                                                      
    STAGE_PDS = 'TKMA.CM.PRODDATA.SQL.STAGE'                                    
    CNTL_PDS = 'TKMA.CM.PRODDATA.SQL.STAGE.CNTL'                                
END                                                                             
RETURN_CODE = 0                                                                 
/*********************************************************************/         
/* Set values for constants.                                         */         
/*********************************************************************/         
PC_CURRENT_PROGRAM_NAME = 'CMKRX002'                                            
SQL_EXEC_JOB_SUFFIX_STRING = '%ESPAPJOB(7:8)'                                   
SQL_EXEC_JOB_NAME = 'CMK900'                                                    
SQL_EXEC_JOB_NAME_STRING = SQL_EXEC_JOB_NAME ||,                                
          SQL_EXEC_JOB_SUFFIX_STRING                                            
JOB_CLASS_PROD_CPUA = 'P'                                                       
JOB_CLASS_TEST = 'A'                                                            
SQL_EXEC_TEST_JOB_NAME = 'TKMA006P'                                             
JCLLIB_STRING = '//*LIBSRCH'                                                    
SQL_EXEC_TEST_JCLLIB = '//LIBSRCH  JCLLIB ORDER=TKMA.PROCLIB'                   
SQL_EXEC_PROC_NAME = SQL_EXEC_JOB_NAME || '1'                                   
SQL_EXEC_TEST_PROC_NAME = SQL_EXEC_PROC_NAME || 'T'                             
SQL_EXEC_USER_STRING = 'USER='                                                  
SQL_EXEC_NOTIFY_STRING = ',NOTIFY='                                             
SQL_EXEC_SQL_MEMBER_STRING = 'SQLMBR='                                          
SQL_EXEC_SQL_MEMBER_VALUE = SQL_EXEC_SQL_MEMBER_STRING || 'X' || ','            
SQL_EXEC_JOB_SUFFIX_VALUE = SQL_EXEC_JOB_SUFFIX_STRING || 'X'                   
SQL_EXEC_DB2_SUBSYSTEM_STRING = 'SUBSYS='                                       
SQL_EXEC_DB2_SUBSYSTEM_VALUE = SQL_EXEC_DB2_SUBSYSTEM_STRING || 'X'             
SQL_EXEC_APPLID_STRING = 'APPLID='                                              
SQL_EXEC_APPLID_VALUE = SQL_EXEC_APPLID_STRING || 'X' || ','                    
SQL_EXEC_REQUESTED_BY_USERID_STRING = 'REQBYID='                                
SQL_EXEC_REQUESTED_BY_USERID_VALUE = ,                                          
          SQL_EXEC_REQUESTED_BY_USERID_STRING || 'X'                            
SQL_EXEC_MANAGER_USERID_STRING = 'MGRID='                                       
SQL_EXEC_MANAGER_USERID_VALUE = SQL_EXEC_MANAGER_USERID_STRING || 'X'           
SQL_EXEC_RELEASED_BY_USERID_STRING = 'RELBYID='                                 
SQL_EXEC_RELEASED_BY_USERID_VALUE = ,                                           
          SQL_EXEC_RELEASED_BY_USERID_STRING || 'X'                             
/**********************************************************************/        
/* Program Mainline.                                                  */        
/**********************************************************************/        
ADDRESS(ISPEXEC)                                                                
                                                                                
PDC_SQL_MEMBER = STRIP(SQLMEM)                                                  
PDC_SQL_MEMBER_STRING = SQL_EXEC_SQL_MEMBER_STRING ||,                          
          PDC_SQL_MEMBER || ','                                                 
                                                                                
IF (PDC_SQL_MEMBER = '') THEN DO                                                
    SAY PC_CURRENT_PROGRAM_NAME ' - SQL member not passed as an ' ||,           
              'argument'                                                        
    RETURN_CODE = 16                                                            
    ZISPFRC = RETURN_CODE                                                       
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
/* Open the Production Data Change SQL PDS */                                   
                                                                                
"LMINIT DATAID(DID1) DATASET('"STAGE_PDS"')"                                    
DID1_RC = RC                                                                    
IF (DID1_RC = 0) THEN DO                                                        
    "LMOPEN DATAID("DID1")"                                                     
    IF (RC ^= 0) THEN DO                                                        
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on OPEN of ' ||,            
                  STAGE_PDS || ' - RC = ' ||  DID1_RC                           
        CALL CLEANUP                                                            
        RETURN_CODE = 16                                                        
        ZISPFRC = RETURN_CODE                                                   
        "VPUT (ZISPFRC) SHARED"                                                 
        EXIT RETURN_CODE                                                        
    END                                                                         
END                                                                             
ELSE DO                                                                         
    IF (DID1_RC = 8) THEN                                                       
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on INIT of ' ||,            
                  STAGE_PDS || ' - RC = ' ||  DID1_RC ||,                       
                  ' PDS likely does not exist'                                  
    ELSE                                                                        
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on INIT of ' ||,            
                  STAGE_PDS || ' - RC = ' ||  DID1_RC                           
    CALL CLEANUP                                                                
    RETURN_CODE = 16                                                            
    ZISPFRC = RETURN_CODE                                                       
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
/* Open the Production Data Change SQL Control PDS */                           
                                                                                
"LMINIT DATAID(DID2) DATASET('"CNTL_PDS"')"                                     
DID2_RC = RC                                                                    
IF (DID2_RC = 0) THEN DO                                                        
    "LMOPEN DATAID("DID2")"                                                     
    IF (RC ^= 0) THEN DO                                                        
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on OPEN of ' ||,            
                  CNTL_PDS || ' - RC = ' ||  DID2_RC                            
        CALL CLEANUP                                                            
        RETURN_CODE = 16                                                        
        ZISPFRC = RETURN_CODE                                                   
        "VPUT (ZISPFRC) SHARED"                                                 
        EXIT RETURN_CODE                                                        
    END                                                                         
END                                                                             
ELSE DO                                                                         
    IF (DID2_RC = 8) THEN                                                       
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on INIT of ' ||,            
                  CNTL_PDS || ' - RC = ' ||  DID2_RC ||,                        
                  ' PDS likely does not exist'                                  
    ELSE                                                                        
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on INIT of ' ||,            
                  CNTL_PDS || ' - RC = ' ||  DID2_RC                            
    CALL CLEANUP                                                                
    RETURN_CODE = 16                                                            
    ZISPFRC = RETURN_CODE                                                       
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
/* Validate the Production Data Change request */                               
                                                                                
"LMMFIND DATAID("DID1") MEMBER("PDC_SQL_MEMBER") STATS(YES)"                    
RETURN_CODE = RC                                                                
IF (RETURN_CODE = 0) THEN DO                                                    
    PDC_REQUESTED_BY_USERID = ''                                                
    SQL_ZLUSER = ZLUSER                                                         
    SQL_ZLC4DATE = ZLC4DATE                                                     
    SQL_ZLM4DATE = ZLM4DATE                                                     
    SQL_ZLMTIME = ZLMTIME                                                       
    "LMMFIND DATAID("DID2") MEMBER("PDC_SQL_MEMBER") STATS(YES)"                
    RETURN_CODE = RC                                                            
    IF (RETURN_CODE = 0) THEN DO                                                
        "LMGET DATAID("DID2") MODE(INVAR) DATALOC(CNTLRCD)",                    
                  "DATALEN(CNTLLEN) MAXLEN(120)"                                
        RETURN_CODE = RC                                                        
        IF (RETURN_CODE = 0) THEN DO                                            
            PDC_REQUESTED_BY_USERID = SUBSTR(CNTLRCD,10,8)                      
            SQL_CNTL_MBR = CNTLRCD                                              
            SQL_CNTL_ZLUSER = ZLUSER                                            
            SQL_CNTL_ZLC4DATE = ZLC4DATE                                        
            SQL_CNTL_ZLM4DATE = ZLM4DATE                                        
            SQL_CNTL_ZLMTIME = ZLMTIME                                          
            IF ((SQL_ZLUSER = SQL_CNTL_ZLUSER) &,                               
                    (SQL_ZLC4DATE = SQL_CNTL_ZLC4DATE) &,                       
                    (SQL_ZLM4DATE = SQL_CNTL_ZLM4DATE) &,                       
                    (SQL_ZLMTIME = SQL_CNTL_ZLMTIME)) THEN                      
                TIMESTAMP_SECURITY_MATCH = 'Y'                                  
            ELSE DO                                                             
                TIMESTAMP_SECURITY_MATCH = 'N'                                  
                SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** ' ||,               
                          'SQL request ' || PDC_SQL_MEMBER ||,                  
                          ' not secure'                                         
                SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** ' ||,               
                          'Request has been altered since staging'              
                CALL CLEANUP                                                    
                RETURN_CODE = 16                                                
                ZISPFRC = RETURN_CODE                                           
                "VPUT (ZISPFRC) SHARED"                                         
                EXIT RETURN_CODE                                                
            END                                                                 
        END                                                                     
        ELSE DO                                                                 
            SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on GET of ' ||,         
                      PDC_SQL_MEMBER || ' in ' || CNTL_PDS ||,                  
                      ' - RC = ' || RETURN_CODE                                 
            CALL CLEANUP                                                        
            RETURN_CODE = 12                                                    
            ZISPFRC = RETURN_CODE                                               
            "VPUT (ZISPFRC) SHARED"                                             
            EXIT RETURN_CODE                                                    
        END                                                                     
    END                                                                         
    ELSE DO                                                                     
        SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on FIND of ' ||,            
                  PDC_SQL_MEMBER || ' in ' || CNTL_PDS ||,                      
                  ' - RC = ' || RETURN_CODE                                     
        CALL CLEANUP                                                            
        RETURN_CODE = 12                                                        
        ZISPFRC = RETURN_CODE                                                   
        "VPUT (ZISPFRC) SHARED"                                                 
        EXIT RETURN_CODE                                                        
    END                                                                         
END                                                                             
ELSE DO                                                                         
    SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on FIND of ' ||,                
              PDC_SQL_MEMBER || ' in ' || STAGE_PDS ||,                         
              ' - RC = ' || RETURN_CODE                                         
    CALL CLEANUP                                                                
    RETURN_CODE = 12                                                            
    ZISPFRC = RETURN_CODE                                                       
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
CALL RELEASE_REQUEST                                                            
                                                                                
CALL CLEANUP                                                                    
EXIT RETURN_CODE                                                                
                                                                                
/* ----------------------------------------------------------------- */         
/* Subroutines                                                       */         
/* ----------------------------------------------------------------- */         
CLEANUP:                                                                        
IF DID1 ^= '' THEN                                                              
    "LMFREE DATAID("DID1")"                                                     
IF DID2 ^= '' THEN                                                              
    "LMFREE DATAID("DID2")"                                                     
RETURN                                                                          
                                                                                
/* ------------------------------------------------------------------ */        
/* RELEASE_REQUEST - RELEASE A PRODUCTION DATA CHANGE REQUEST         */        
/* ------------------------------------------------------------------ */        
RELEASE_REQUEST:                                                                
                                                                                
PDC_SYSTEM_ID = SUBSTR(PDC_SQL_MEMBER,1,2)                                      
PDC_APPLID = PDC_SYSTEM_ID                                                      
PDC_APPLID_STRING = SQL_EXEC_APPLID_STRING || PDC_APPLID || ','                 
PDC_USER = STRIP(SUBSTR(SQL_CNTL_MBR,32,8))                                     
PDC_USER_STRING = SQL_EXEC_USER_STRING || PDC_USER                              
IF (DBMODE = 'T') THEN DO                                                       
    PDC_DB2_SUBSYSTEM = SUBSTR(SQL_CNTL_MBR,27,3) || 'T'                        
END                                                                             
ELSE                                                                            
    PDC_DB2_SUBSYSTEM = SUBSTR(SQL_CNTL_MBR,27,4)                               
PDC_DB2_SUBSYSTEM_STRING = SQL_EXEC_DB2_SUBSYSTEM_STRING ||,                    
          PDC_DB2_SUBSYSTEM                                                     
PDC_REQUESTED_BY_USERID = STRIP(PDC_REQUESTED_BY_USERID)                        
PDC_REQUESTED_BY_USERID_STRING = SQL_EXEC_REQUESTED_BY_USERID_STRING ||,        
          PDC_REQUESTED_BY_USERID                                               
PDC_MANAGER_USERID = STRIP(SUBSTR(SQL_CNTL_MBR,18,8))                           
PDC_MANAGER_USERID_STRING = SQL_EXEC_MANAGER_USERID_STRING ||,                  
          PDC_MANAGER_USERID                                                    
PDC_RELEASED_BY_USERID = STRIP(CURRUID)                                         
PDC_RELEASED_BY_USERID_STRING = SQL_EXEC_RELEASED_BY_USERID_STRING ||,          
          PDC_RELEASED_BY_USERID                                                
PDC_JOB_CLASS = JOB_CLASS_PROD_CPUA                                             
IF (JOBMODE = T) THEN DO                                                        
    PDC_JOB_CLASS = JOB_CLASS_TEST                                              
    PDC_USER_STRING = PDC_USER_STRING || SQL_EXEC_NOTIFY_STRING ||,             
              SUBSTR(SQL_EXEC_TEST_JOB_NAME,1,7)                                
END                                                                             
                                                                                
/* Read all Production Data Change job JCL lines from the model      */         
/* production job member into a stem variable.                       */         
                                                                                
ADDRESS(TSO)                                                                    
"EXECIO * DISKR" INP01 "(STEM MODELJCL. FINIS"                                  
IF RC /=0 & RC /= 2 THEN                                                        
DO                                                                              
    SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on READ of ' ||,                
              'INP01 Production Data Change job JCL model - RC = ' RC           
    RETURN_CODE = 16                                                            
    ZISPFRC = RETURN_CODE                                                       
    ADDRESS(ISPEXEC)                                                            
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
/* Tailor the Production Data Change job JCL lines to the            */         
/* requirements for executing the current request.                   */         
                                                                                
DO I=1 TO MODELJCL.0                                                            
    PDCJCL.I = MODELJCL.I                                                       
    IF (JOBMODE = T) THEN DO                                                    
        PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_JOB_NAME_STRING,,                   
                  SQL_EXEC_TEST_JOB_NAME, PDCJCL.I)                             
        PDCJCL.I = CHANGE_JCL_LINE("MSGCLASS=P",,                               
                  "MSGCLASS=X", PDCJCL.I)                                       
        PDCJCL.I = CHANGE_JCL_LINE(JCLLIB_STRING,,                              
                  SQL_EXEC_TEST_JCLLIB, PDCJCL.I)                               
        PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_PROC_NAME,,                         
                  SQL_EXEC_TEST_PROC_NAME, PDCJCL.I)                            
    END                                                                         
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_JOB_SUFFIX_STRING,,                     
              PDC_SYSTEM_ID, PDCJCL.I)                                          
    PDCJCL.I = CHANGE_JCL_LINE("%JC",,                                          
              PDC_JOB_CLASS, PDCJCL.I)                                          
    PDCJCL.I = CHANGE_JCL_LINE("USER=X,NOTIFY=X",,                              
              PDC_USER_STRING, PDCJCL.I)                                        
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_SQL_MEMBER_VALUE,,                      
              PDC_SQL_MEMBER_STRING, PDCJCL.I)                                  
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_DB2_SUBSYSTEM_VALUE,,                   
              PDC_DB2_SUBSYSTEM_STRING, PDCJCL.I)                               
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_APPLID_VALUE,,                          
              PDC_APPLID_STRING, PDCJCL.I)                                      
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_REQUESTED_BY_USERID_VALUE,,             
              PDC_REQUESTED_BY_USERID_STRING, PDCJCL.I)                         
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_MANAGER_USERID_VALUE,,                  
              PDC_MANAGER_USERID_STRING, PDCJCL.I)                              
    PDCJCL.I = CHANGE_JCL_LINE(SQL_EXEC_RELEASED_BY_USERID_VALUE,,              
              PDC_RELEASED_BY_USERID_STRING, PDCJCL.I)                          
                                                                                
    /* Display the modified Production Data Change job JCL line */              
    SAY PC_CURRENT_PROGRAM_NAME ' - Production Data Change job JCL' ||,         
              ' line: ' || PDCJCL.I                                             
END                                                                             
                                                                                
/* Write all Production Data Change job JCL lines from the stem      */         
/* variable.                                                         */         
                                                                                
"EXECIO * DISKW" OUT01 "(STEM PDCJCL. FINIS)"                                   
IF RC /=0 THEN                                                                  
DO                                                                              
    SAY PC_CURRENT_PROGRAM_NAME ' - ** ERROR ** on WRITE of ' ||,               
              'OUT01 Production Data Change job JCL - RC = ' RC                 
    RETURN_CODE = 16                                                            
    ZISPFRC = RETURN_CODE                                                       
    ADDRESS(ISPEXEC)                                                            
    "VPUT (ZISPFRC) SHARED"                                                     
    EXIT RETURN_CODE                                                            
END                                                                             
                                                                                
EXIT 0                                                                          
                                                                                
/* ----------------------------------------------------------------- */         
/* CHANGE_JCL_LINE                                                   */         
/*                                                                   */         
/* Replace one string for another within a JCL line.  While the      */         
/* string is still found in the JCL line, parse the JCL line into    */         
/* the characters before and after the string.  Contruct the         */         
/* replacement line by concatenating the characters before the       */         
/* string, the replacement string, and the characters after the      */         
/* string.  Return a JCL line of 80 characters, in case the          */         
/* original string and the replacement string are not the same       */         
/* length.                                                           */         
/* ----------------------------------------------------------------- */         
                                                                                
CHANGE_JCL_LINE:                                                                
PARSE ARG ORIGINAL_VALUE, NEW_VALUE, JCL_LINE                                   
                                                                                
/* Iterate through checking for the string, in case more than one    */         
/* string is found in the JCL line.                                  */         
                                                                                
DO WHILE POS(ORIGINAL_VALUE, JCL_LINE) > 0                                      
  PARSE VALUE JCL_LINE WITH START_OF_LINE (ORIGINAL_VALUE) REST_OF_LINE         
  IF START_OF_LINE <> JCL_LINE THEN                                             
    JCL_LINE = START_OF_LINE || NEW_VALUE || REST_OF_LINE                       
END                                                                             
                                                                                
RETURN LEFT(JCL_LINE, 80)                                                       
